from typing import List, Optional
from datetime import datetime
from sqlalchemy.ext.asyncio import AsyncSession
from models.screenshot import Screenshot, User
from database.repositories.screenshot_repository import ScreenshotRepository
from database.repositories.user_repository import UserRepository

class ScreenshotService:
    def __init__(self, session: AsyncSession):
        self.session = session
        self.screenshot_repo = ScreenshotRepository(session)
        self.user_repo = UserRepository(session)

    async def save_hero_screenshot(
        self,
        telegram_id: int,
        file_id: str,
        hero_name: Optional[str] = None,
        metadata: Optional[dict] = None
    ) -> Screenshot:
        """
        –ó–±–µ—Ä—ñ–≥–∞—î —Å–∫—Ä—ñ–Ω—à–æ—Ç –≥–µ—Ä–æ—è –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ –º–µ—Ç–∞–¥–∞–Ω–∏–º–∏
        
        Args:
            telegram_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram
            file_id: ID —Ñ–∞–π–ª—É –≤ Telegram
            hero_name: –Ü–º'—è –≥–µ—Ä–æ—è (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
            metadata: –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ –ø—Ä–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
        """
        user = await self.user_repo.get_by_telegram_id(telegram_id)
        if not user:
            raise ValueError("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        
        return await self.screenshot_repo.add_screenshot(
            user_id=user.id,
            file_id=file_id,
            hero_name=hero_name,
            metadata=metadata
        )

    async def get_user_screenshots(
        self,
        telegram_id: int,
        limit: int = 10
    ) -> List[Screenshot]:
        """
        –û—Ç—Ä–∏–º—É—î –æ—Å—Ç–∞–Ω–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        
        Args:
            telegram_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram
            limit: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
        """
        user = await self.user_repo.get_by_telegram_id(telegram_id)
        if not user:
            return []
        
        return await self.screenshot_repo.get_user_screenshots(
            user_id=user.id,
            limit=limit
        )

    async def get_hero_screenshots(
        self,
        hero_name: str,
        limit: int = 10
    ) -> List[Screenshot]:
        """
        –û—Ç—Ä–∏–º—É—î —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–µ—Ä–æ—è
        
        Args:
            hero_name: –Ü–º'—è –≥–µ—Ä–æ—è
            limit: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
        """
        return await self.screenshot_repo.get_hero_screenshots(
            hero_name=hero_name,
            limit=limit
        )

    async def delete_screenshot(
        self,
        screenshot_id: int,
        telegram_id: int
    ) -> bool:
        """
        –í–∏–¥–∞–ª—è—î —Å–∫—Ä—ñ–Ω—à–æ—Ç, –ø–µ—Ä–µ–≤—ñ—Ä—è—é—á–∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É
        
        Args:
            screenshot_id: ID —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞
            telegram_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞–≤
        """
        user = await self.user_repo.get_by_telegram_id(telegram_id)
        if not user:
            return False
        
        screenshot = await self.screenshot_repo.get_by_id(screenshot_id)
        if not screenshot or screenshot.user_id != user.id:
            return False
        
        return await self.screenshot_repo.delete_screenshot(screenshot_id)

    @staticmethod
    def format_screenshot_info(screenshot: Screenshot) -> str:
        """
        –§–æ—Ä–º–∞—Ç—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        
        Args:
            screenshot: –û–±'—î–∫—Ç —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞
        """
        info = [
            f"üì∏ –°–∫—Ä—ñ–Ω—à–æ—Ç #{screenshot.id}",
            f"üìÖ –î–∞—Ç–∞: {screenshot.timestamp.strftime('%Y-%m-%d %H:%M:%S')}"
        ]
        
        if screenshot.hero_name:
            info.append(f"ü¶∏ –ì–µ—Ä–æ–π: {screenshot.hero_name}")
        
        if screenshot.metadata:
            info.append("\nüìù –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:")
            for key, value in screenshot.metadata.items():
                info.append(f"- {key}: {value}")
        
        return "\n".join(info)

    @staticmethod
    def validate_screenshot_metadata(metadata: dict) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î –º–µ—Ç–∞–¥–∞–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ –Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å
        
        Args:
            metadata: –°–ª–æ–≤–Ω–∏–∫ –∑ –º–µ—Ç–∞–¥–∞–Ω–∏–º–∏
        """
        required_fields = ["game_mode", "result"]
        return all(field in metadata for field in required_fields)
