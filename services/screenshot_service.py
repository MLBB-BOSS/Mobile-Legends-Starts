from typing import List, Optional
from datetime import datetime
from sqlalchemy.ext.asyncio import AsyncSession
from models.screenshot import Screenshot, User
from database.repositories.screenshot_repository import ScreenshotRepository
from database.repositories.user_repository import UserRepository
from services.exceptions import (
    ValidationError,
    ScreenshotError,
    UserNotFoundError,
    PermissionError
)

class ScreenshotService:
    def __init__(self, session: AsyncSession):
        self.session = session
        self.screenshot_repo = ScreenshotRepository(session)
        self.user_repo = UserRepository(session)

    async def save_hero_screenshot(
        self,
        telegram_id: int,
        file_id: str,
        hero_name: Optional[str] = None,
        metadata: Optional[dict] = None
    ) -> Screenshot:
        """
        –ó–±–µ—Ä—ñ–≥–∞—î —Å–∫—Ä—ñ–Ω—à–æ—Ç –≥–µ—Ä–æ—è –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ –º–µ—Ç–∞–¥–∞–Ω–∏–º–∏
        
        Args:
            telegram_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram
            file_id: ID —Ñ–∞–π–ª—É –≤ Telegram
            hero_name: –Ü–º'—è –≥–µ—Ä–æ—è (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
            metadata: –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ –ø—Ä–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
            
        Raises:
            ValidationError: –Ø–∫—â–æ –¥–∞–Ω—ñ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ
            UserNotFoundError: –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
            ScreenshotError: –ü—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞
        """
        try:
            if not file_id:
                raise ValidationError("ID —Ñ–∞–π–ª—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º")
            
            user = await self.user_repo.get_by_telegram_id(telegram_id)
            if not user:
                raise UserNotFoundError(telegram_id)
            
            # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö
            if metadata and not self.validate_screenshot_metadata(metadata):
                raise ValidationError("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –º–µ—Ç–∞–¥–∞–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞")
            
            return await self.screenshot_repo.add_screenshot(
                user_id=user.id,
                file_id=file_id,
                hero_name=hero_name,
                metadata=metadata
            )
            
        except (ValidationError, UserNotFoundError):
            raise
        except Exception as e:
            raise ScreenshotError(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞: {str(e)}")

    async def get_user_screenshots(
        self,
        telegram_id: int,
        limit: int = 10
    ) -> List[Screenshot]:
        """
        –û—Ç—Ä–∏–º—É—î –æ—Å—Ç–∞–Ω–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        
        Args:
            telegram_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram
            limit: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
            
        Raises:
            UserNotFoundError: –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
        """
        user = await self.user_repo.get_by_telegram_id(telegram_id)
        if not user:
            raise UserNotFoundError(telegram_id)
        
        return await self.screenshot_repo.get_user_screenshots(
            user_id=user.id,
            limit=limit
        )

    async def get_hero_screenshots(
        self,
        hero_name: str,
        limit: int = 10
    ) -> List[Screenshot]:
        """
        –û—Ç—Ä–∏–º—É—î —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–µ—Ä–æ—è
        
        Args:
            hero_name: –Ü–º'—è –≥–µ—Ä–æ—è
            limit: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
            
        Raises:
            ValidationError: –Ø–∫—â–æ —ñ–º'—è –≥–µ—Ä–æ—è –ø–æ—Ä–æ–∂–Ω—î
        """
        if not hero_name:
            raise ValidationError("–Ü–º'—è –≥–µ—Ä–æ—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º")
            
        return await self.screenshot_repo.get_hero_screenshots(
            hero_name=hero_name,
            limit=limit
        )

    async def delete_screenshot(
        self,
        screenshot_id: int,
        telegram_id: int
    ) -> bool:
        """
        –í–∏–¥–∞–ª—è—î —Å–∫—Ä—ñ–Ω—à–æ—Ç, –ø–µ—Ä–µ–≤—ñ—Ä—è—é—á–∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É
        
        Args:
            screenshot_id: ID —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞
            telegram_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞–≤
            
        Raises:
            UserNotFoundError: –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
            ScreenshotError: –Ø–∫—â–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
            PermissionError: –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –º–∞—î –ø—Ä–∞–≤ –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        """
        try:
            user = await self.user_repo.get_by_telegram_id(telegram_id)
            if not user:
                raise UserNotFoundError(telegram_id)
            
            screenshot = await self.screenshot_repo.get_by_id(screenshot_id)
            if not screenshot:
                raise ScreenshotError("–°–∫—Ä—ñ–Ω—à–æ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            
            if screenshot.user_id != user.id:
                raise PermissionError("–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —á—É–∂–∏–π —Å–∫—Ä—ñ–Ω—à–æ—Ç")
            
            return await self.screenshot_repo.delete_screenshot(screenshot_id)
            
        except (UserNotFoundError, ScreenshotError, PermissionError):
            raise
        except Exception as e:
            raise ScreenshotError(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞: {str(e)}")

    @staticmethod
    def format_screenshot_info(screenshot: Screenshot) -> str:
        """
        –§–æ—Ä–º–∞—Ç—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        
        Args:
            screenshot: –û–±'—î–∫—Ç —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞
        """
        info = [
            f"üì∏ –°–∫—Ä—ñ–Ω—à–æ—Ç #{screenshot.id}",
            f"üìÖ –î–∞—Ç–∞: {screenshot.timestamp.strftime('%Y-%m-%d %H:%M:%S')}"
        ]
        
        if screenshot.hero_name:
            info.append(f"ü¶∏ –ì–µ—Ä–æ–π: {screenshot.hero_name}")
        
        if screenshot.metadata:
            info.append("\nüìù –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:")
            for key, value in screenshot.metadata.items():
                info.append(f"- {key}: {value}")
        
        return "\n".join(info)

    @staticmethod
    def validate_screenshot_metadata(metadata: dict) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î –º–µ—Ç–∞–¥–∞–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ –Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å
        
        Args:
            metadata: –°–ª–æ–≤–Ω–∏–∫ –∑ –º–µ—Ç–∞–¥–∞–Ω–∏–º–∏
        """
        if not isinstance(metadata, dict):
            return False
            
        required_fields = ["game_mode", "result"]
        return all(field in metadata for field in required_fields)
