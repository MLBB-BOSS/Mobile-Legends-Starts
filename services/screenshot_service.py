# services/screenshot_service.py

import logging
from aiogram import types
from database.connection import get_db
from models.screenshot import Screenshot
from sqlalchemy.future import select

logger = logging.getLogger(__name__)

async def handle_screenshot_upload(message: types.Message):
    """–û–±—Ä–æ–±–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∫—Ä—ñ–Ω—à–æ—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º"""
    if not message.photo:
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é.")
        return

    photo = message.photo[-1]  # –í–∏–±–∏—Ä–∞—î–º–æ –Ω–∞–π–≤–∏—â—É —è–∫—ñ—Å—Ç—å
    file_id = photo.file_id
    user_id = message.from_user.id

    async for session in get_db():
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∂–µ —ñ—Å–Ω—É—î —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑ —Ç–∞–∫–∏–º file_id
        stmt = select(Screenshot).where(Screenshot.file_id == file_id)
        result = await session.execute(stmt)
        existing_screenshot = result.scalars().first()

        if existing_screenshot:
            await message.reply("–¶–µ–π —Å–∫—Ä—ñ–Ω—à–æ—Ç –≤–∂–µ –±—É–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π.")
            return

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É
        new_screenshot = Screenshot(
            user_id=user_id,
            file_id=file_id
        )
        session.add(new_screenshot)
        await session.commit()
        await message.reply("–°–∫—Ä—ñ–Ω—à–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")

async def get_leaderboard():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –ª—ñ–¥–µ—Ä—ñ–≤ –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤"""
    async for session in get_db():
        stmt = select(Screenshot.user_id, func.count(Screenshot.id).label("count")) \
            .group_by(Screenshot.user_id) \
            .order_by(func.count(Screenshot.id).desc()) \
            .limit(10)
        result = await session.execute(stmt)
        leaderboard = result.all()

        leaderboard_text = "üèÜ <b>–¢–∞–±–ª–∏—Ü—è –õ—ñ–¥–µ—Ä—ñ–≤</b>\n\n"
        for rank, (user_id, count) in enumerate(leaderboard, start=1):
            leaderboard_text += f"{rank}. User ID: {user_id} - {count} —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤\n"

        return leaderboard_text

async def get_user_profile(user_id: int):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    async for session in get_db():
        stmt = select(func.count(Screenshot.id)).where(Screenshot.user_id == user_id)
        result = await session.execute(stmt)
        count = result.scalar()

        profile_text = (
            f"üë§ <b>–ü—Ä–æ—Ñ—ñ–ª—å –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</b>\n\n"
            f"User ID: {user_id}\n"
            f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤: {count}"
        )
        return profile_text

async def get_hero_info():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≥–µ—Ä–æ—ó–≤"""
    # –ü—Ä–∏–∫–ª–∞–¥ —Å—Ç–∞—Ç–∏—á–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó, –º–æ–∂–Ω–∞ —Ä–æ–∑—à–∏—Ä–∏—Ç–∏
    heroes_info = (
        "<b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ì–µ—Ä–æ—ó–≤</b>\n\n"
        "1. Assassin - —à–≤–∏–¥–∫–∏–π —Ç–∞ —Å–º–µ—Ä—Ç–µ–ª—å–Ω–∏–π.\n"
        "2. Fighter - –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–∏–π –±—ñ–π–Ω–∏–∫.\n"
        "3. Mage - –º–∞–≥—ñ—á–Ω–∏–π –ø–æ—Ç—É–∂–Ω–∏–π.\n"
        "4. Marksman - –¥–∞–ª—å–Ω—ñ–π –±—ñ–π.\n"
        "5. Support - –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –∫–æ–º–∞–Ω–¥–∏.\n"
        "6. Tank - –≤–∏—Ç—Ä–∏–≤–∞–ª–∏–π —Ç–∞ —Å—Ç—ñ–π–∫–∏–π."
    )
    return heroes_info
