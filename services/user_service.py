from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from models.user import User
from models.user_stats import UserStats
from datetime import datetime

async def get_user(session: AsyncSession, telegram_id: int) -> User | None:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ë–î –∑–∞ –π–æ–≥–æ telegram_id –∞–±–æ None, —è–∫—â–æ —Ç–∞–∫–æ–≥–æ –Ω–µ–º–∞—î."""
    result = await session.execute(select(User).where(User.telegram_id == telegram_id))
    return result.scalar_one_or_none()

async def create_user(session: AsyncSession, telegram_id: int, username: str = None) -> User:
    """–°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –∑–∞–¥–∞–Ω–∏–º telegram_id —Ç–∞ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–º username."""
    user = User(telegram_id=telegram_id, username=username)
    session.add(user)
    await session.flush()
    return user

async def get_or_create_user_stats(session: AsyncSession, user: User) -> UserStats:
    """–û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î."""
    result = await session.execute(select(UserStats).where(UserStats.user_id == user.id))
    stats = result.scalar_one_or_none()
    if not stats:
        stats = UserStats(user_id=user.id)
        session.add(stats)
        await session.flush()
    return stats

async def update_user_stats(session: AsyncSession, telegram_id: int, rating: int = None, achievements: int = None) -> None:
    """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ telegram_id. –°—Ç–≤–æ—Ä—é—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, —è–∫—â–æ —ó—Ö –Ω–µ —ñ—Å–Ω—É—î."""
    user = await get_user(session, telegram_id)
    if not user:
        user = await create_user(session, telegram_id)
    stats = await get_or_create_user_stats(session, user)
    if rating is not None:
        stats.rating = rating
    if achievements is not None:
        stats.achievements_count = achievements
    stats.last_update = datetime.utcnow()
    await session.commit()

async def get_user_profile_text(session: AsyncSession, telegram_id: int) -> str:
    """–§–æ—Ä–º—É—î —Ç–µ–∫—Å—Ç–æ–≤–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –π–æ–≥–æ telegram_id."""
    user = await get_user(session, telegram_id)
    if not user:
        return "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π."

    stats = await get_or_create_user_stats(session, user)
    level = stats.rating // 100  # –ö–æ–∂–Ω—ñ 100 —Ä–µ–π—Ç–∏–Ω–≥—É - –Ω–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å

    profile_text = (
        f"üîé <b>–í–∞—à –ü—Ä–æ—Ñ—ñ–ª—å:</b>\n\n"
        f"üèÖ –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: <b>{user.username or '–ù–µ–≤—ñ–¥–æ–º–æ'}</b>\n"
        f"üöÄ –†—ñ–≤–µ–Ω—å: <b>{level}</b>\n"
        f"üìà –†–µ–π—Ç–∏–Ω–≥: <b>{stats.rating}</b>\n"
        f"üéØ –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è: <b>{stats.achievements_count} –¥–æ—Å—è–≥–Ω–µ–Ω—å</b>\n"
        f"üéÆ –ú–∞—Ç—á—ñ: {stats.total_matches}, –ü–µ—Ä–µ–º–æ–≥–∏: {stats.total_wins}, –ü–æ—Ä–∞–∑–∫–∏: {stats.total_losses}\n"
        f"\n–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {stats.last_update.strftime('%Y-%m-%d %H:%M:%S')}"
    )
    return profile_text

async def update_mlbb_id(session: AsyncSession, telegram_id: int, mlbb_id: str) -> str:
    """–û–Ω–æ–≤–ª—é—î MLBB ID –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –∑–∞–¥–∞–Ω–∏–º telegram_id."""
    result = await session.execute(select(User).where(User.telegram_id == telegram_id))
    user = result.scalar_one_or_none()
    
    if not user:
        return "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /start."
    
    user.mlbb_id = mlbb_id
    await session.commit()
    
    return f"–í–∞—à MLBB ID —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ: {mlbb_id}"
