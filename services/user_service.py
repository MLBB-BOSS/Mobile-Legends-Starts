# services/user_service.py
from sqlalchemy.future import select
from sqlalchemy.exc import SQLAlchemyError
from models.user import User
from models.user_stats import UserStats
from models.rating_history import RatingHistory  # –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ç–∞–∫–∞ –º–æ–¥–µ–ª—å —ñ—Å–Ω—É—î
from sqlalchemy.ext.asyncio import AsyncSession
import logging

logger = logging.getLogger(__name__)

async def get_or_create_user(db: AsyncSession, telegram_id: int, username: str) -> User:
    # –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    result = await db.execute(select(User).where(User.telegram_id == telegram_id))
    user = result.scalars().first()

    if not user:
        # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî —Å—Ç–≤–æ—Ä–∏–º–æ –Ω–æ–≤–æ–≥–æ
        user = User(telegram_id=telegram_id, username=username)
        db.add(user)
        await db.commit()
        await db.refresh(user)
        logger.info(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ telegram_id={telegram_id}")
    return user

async def get_user_profile_text(db: AsyncSession, telegram_id: int, username: str) -> str:
    try:
        # –í–∏–∫–ª–∏–∫ get_or_create_user —â–æ–± –∑–∞–≤–∂–¥–∏ –º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user = await get_or_create_user(db, telegram_id, username)

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        result = await db.execute(select(UserStats).where(UserStats.user_id == user.id))
        stats = result.scalars().first()

        if not stats:
            # –Ø–∫—â–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ–º–∞ ‚Äî –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –±–∞–∑–æ–≤—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = UserStats(user_id=user.id, rating=100, achievements_count=0)
            db.add(stats)
            await db.commit()
            await db.refresh(stats)

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–µ–π–¥–∂—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_with_badges = await get_user_by_telegram_id(db, telegram_id)
        badges = user_with_badges.badges if user_with_badges and user_with_badges.badges else []

        if badges:
            badges_text = "\n".join([f"‚Ä¢ {badge.icon} {badge.name}" for badge in badges])
        else:
            badges_text = "–ù–µ–º–∞—î –±–µ–π–¥–∂—ñ–≤."

        profile_text = (
            f"üîç <b>–í–∞—à –ü—Ä–æ—Ñ—ñ–ª—å:</b>\n\n"
            f"‚Ä¢ üèÖ –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: @{user.username}\n"
            f"‚Ä¢ üìà –†–µ–π—Ç–∏–Ω–≥: {stats.rating}\n"
            f"‚Ä¢ üéØ –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è: {stats.achievements_count} –¥–æ—Å—è–≥–Ω–µ–Ω—å\n\n"
            f"üèÖ <b>–í–∞—à—ñ –ë–µ–π–¥–∂—ñ:</b>\n{badges_text}"
        )
        return profile_text
    except SQLAlchemyError as e:
        logger.error(f"Error fetching user profile for telegram_id={telegram_id}: {e}")
        return "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."

async def get_user_rating_history(db: AsyncSession, user_id: int) -> list[int]:
    try:
        stmt = select(RatingHistory).where(RatingHistory.user_id == user_id).order_by(RatingHistory.timestamp)
        result = await db.execute(stmt)
        history = result.scalars().all()
        return [record.rating for record in history]
    except SQLAlchemyError as e:
        logger.error(f"Error fetching rating history for user_id={user_id}: {e}")
        return []