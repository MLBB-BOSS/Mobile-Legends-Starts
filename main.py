import os
import asyncio
import logging
from datetime import datetime
from logging.handlers import RotatingFileHandler
from core.bot import run_bot
from core.config import settings
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from services.base_service import BaseService
from typing import Any

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–ª—è –ª–æ–≥—ñ–≤, —è–∫—â–æ —ó—ó —â–µ –Ω–µ–º–∞—î
LOG_DIR: str = 'logs'
LOG_FILE: str = os.path.join(LOG_DIR, 'app.log')

if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger: logging.Logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

formatter: logging.Formatter = logging.Formatter(
    '%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª—ñ
console_handler: logging.StreamHandler = logging.StreamHandler()
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Ñ–∞–π–ª—É –∑ —Ä–æ—Ç–∞—Ü—ñ—î—é
file_handler: RotatingFileHandler = RotatingFileHandler(
    LOG_FILE,
    maxBytes=5 * 1024 * 1024,  # 5 –ú–ë
    backupCount=5
)
file_handler.setFormatter(formatter)
logger.addHandler(file_handler)

# –û—Ç—Ä–∏–º—É—î–º–æ DATABASE_URL –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∞–±–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
database_url: str = os.getenv('DATABASE_URL', settings.DATABASE_URL)
if database_url.startswith('postgres://'):
    database_url = database_url.replace('postgres://', 'postgresql+asyncpg://', 1)

# –°—Ç–≤–æ—Ä—é—î–º–æ engine –¥–ª—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
engine: Any = create_async_engine(
    database_url,
    echo=settings.DEBUG,
    pool_pre_ping=True,
    pool_size=5,
    max_overflow=10
)

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—ñ–π
AsyncSessionFactory: sessionmaker = sessionmaker(
    engine,
    class_=AsyncSession,
    expire_on_commit=False
)

async def init_db() -> None:
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    try:
        async with engine.begin() as conn:
            # –ü—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ —Å—Ç–≤–æ—Ä—é–π—Ç–µ –≤—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ
            # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, —è–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ SQLAlchemy ORM:
            # from models import Base
            # await conn.run_sync(Base.metadata.create_all)
            logger.info("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}", exc_info=True)
        raise

async def startup() -> None:
    """–§—É–Ω–∫—Ü—ñ—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É"""
    try:
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ MLBB-BOSS –±–æ—Ç–∞ –æ {datetime.utcnow()} UTC")
        logger.info(f"üîß –†–µ–∂–∏–º –≤—ñ–¥–ª–∞–¥–∫–∏: {settings.DEBUG}")

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        await init_db()

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–µ—Ä–≤—ñ—Å–∏
        service: BaseService = BaseService()
        service.perform_action()

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
        await run_bot(AsyncSessionFactory)

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–ø—É—Å–∫—É: {e}", exc_info=True)
        await shutdown()
        raise

async def shutdown() -> None:
    """–§—É–Ω–∫—Ü—ñ—è –æ—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ"""
    try:
        logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...")

        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
        await engine.dispose()
        logger.info("‚úÖ –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö –∑–∞–∫—Ä–∏—Ç–æ")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏: {e}", exc_info=True)
        raise

def set_utc_timezone() -> None:
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î UTC —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å"""
    os.environ['TZ'] = 'UTC'
    try:
        import time
        time.tzset()
    except AttributeError:
        # time.tzset() –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –Ω–∞ Windows
        pass

if __name__ == "__main__":
    try:
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ UTC —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å
        set_utc_timezone()

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
        asyncio.run(startup())

    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        asyncio.run(shutdown())

    except Exception as e:
        logger.error(f"‚ùå –ù–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}", exc_info=True)
        asyncio.run(shutdown())
