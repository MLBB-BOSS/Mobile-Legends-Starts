# main.py
import os
import asyncio
import logging
from datetime import datetime
from core.bot import run_bot
from core.config import settings
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

# –û—Ç—Ä–∏–º—É—î–º–æ DATABASE_URL –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∞–±–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
database_url = os.getenv('DATABASE_URL', settings.DATABASE_URL)
if database_url and database_url.startswith('postgres://'):
    database_url = database_url.replace('postgres://', 'postgresql+asyncpg://', 1)

# –°—Ç–≤–æ—Ä—é—î–º–æ engine –¥–ª—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
engine = create_async_engine(
    database_url,
    echo=settings.DEBUG,
    pool_pre_ping=True,
    pool_size=5,
    max_overflow=10
)

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—ñ–π
AsyncSessionFactory = sessionmaker(
    engine,
    class_=AsyncSession,
    expire_on_commit=False
)

async def init_db():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    try:
        async with engine.begin() as conn:
            await conn.run_sync(lambda x: x)
        logger.info("‚úÖ Database connection established successfully")
    except Exception as e:
        logger.error(f"‚ùå Error connecting to database: {e}")
        raise

async def startup():
    """–§—É–Ω–∫—Ü—ñ—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É"""
    try:
        logger.info(f"üöÄ Starting MLBB-BOSS bot at {datetime.utcnow()}")
        logger.info(f"üîß Debug mode: {settings.DEBUG}")
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        await init_db()
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
        await run_bot(AsyncSessionFactory)
        
    except Exception as e:
        logger.error(f"‚ùå Error during startup: {e}")
        raise

async def shutdown():
    """–§—É–Ω–∫—Ü—ñ—è –æ—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ"""
    try:
        logger.info("üîÑ Shutting down...")
        
        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
        await engine.dispose()
        logger.info("‚úÖ Database connection closed")
        
    except Exception as e:
        logger.error(f"‚ùå Error during shutdown: {e}")
        raise

if __name__ == "__main__":
    try:
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ UTC —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å
        os.environ['TZ'] = 'UTC'
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
        asyncio.run(startup())
        
    except KeyboardInterrupt:
        logger.info("üëã Bot stopped by user")
        asyncio.run(shutdown())
        
    except Exception as e:
        logger.error(f"‚ùå Unexpected error: {e}")
        asyncio.run(shutdown())
