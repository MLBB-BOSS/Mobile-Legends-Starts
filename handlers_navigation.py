import os
from aiogram import types, Dispatcher
from keyboards.menus import MenuButton
import openai
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger("handlers_navigation")

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—é—á–∞ OpenAI API –∑ –æ—Ç–æ—á–µ–Ω–Ω—è
openai.api_key = os.getenv('OPENAI_API_KEY')

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ OpenAI —á–µ—Ä–µ–∑ URL
async def ask_openai(prompt: str, max_tokens: int = 500) -> str:
    try:
        headers = {
            "Authorization": f"Bearer {openai.api_key}",
            "Content-Type": "application/json",
        }
        json_data = {
            "model": "gpt-3.5-turbo",
            "messages": [
                {"role": "system", "content": "–¢–∏ —î –µ–∫—Å–ø–µ—Ä—Ç–æ–º Mobile Legends. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ —ñ —Ç–æ—á–Ω–æ."},
                {"role": "user", "content": prompt},
            ],
            "max_tokens": max_tokens,
            "temperature": 0.7,
        }

        async with aiohttp.ClientSession() as session:
            async with session.post(API_URL, headers=headers, json=json_data) as response:
                result = await response.json()
                return result['choices'][0]['message']['content'].strip()
    except aiohttp.ClientError as e:
        logger.error(f"HTTP error: {e}")
        return "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        return "–°—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."

async def show_meta_menu(message: types.Message):
    await message.answer("üìà <b>–ú–µ—Ç–∞:</b> –¢—É—Ç –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º–µ—Ç—É –≥—Ä–∏.", parse_mode='HTML')

async def show_m6_menu(message: types.Message):
    await message.answer("üéÆ <b>–ú6:</b> –û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏ —Ç–∞ –ø–æ–¥—ñ—ó –ø—Ä–æ —Ç—É—Ä–Ω—ñ—Ä–∏ M6.", parse_mode='HTML')

async def show_gpt_menu(message: types.Message):
    await message.answer("üëæ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è GPT:")
    await message.answer("–ó–∞–ø–∏—Ç –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è, –∑–∞—á–µ–∫–∞–π—Ç–µ...")
    response = await ask_openai(message.text)  # –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó OpenAI
    await message.answer(response)

def register_navigation_handlers(dp: Dispatcher):
    dp.message.register(show_meta_menu, text=MenuButton.META.value)
    dp.message.register(show_m6_menu, text=MenuButton.M6.value)
    dp.message.register(show_gpt_menu, text=MenuButton.GPT.value)
