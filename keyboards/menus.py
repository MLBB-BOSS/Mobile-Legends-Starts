# keyboards/menus.py

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from enum import Enum, auto


class MainMenuButtons(Enum):
    NAVIGATION = "üß≠ –ù–∞–≤—ñ–≥–∞—Ü—ñ—è"
    PROFILE = "ü™™ –ú—ñ–π –ü—Ä–æ—Ñ—ñ–ª—å"


class NavigationMenuButtons(Enum):
    CHARACTERS = "ü•∑ –ü–µ—Ä—Å–æ–Ω–∞–∂—ñ"
    BUILDS = "üõ°Ô∏è –ë—ñ–ª–¥–∏"
    COUNTER_PICKS = "‚öñÔ∏è –ö–æ–Ω—Ç—Ä-–ø—ñ–∫–∏"
    GUIDES = "üìö –ì–∞–π–¥–∏"
    VOTING = "üìä –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è"
    M6 = "üèÜ M6"
    GPT = "üëæ GPT"
    META = "üî• META"
    BACK = "üîô –ù–∞–∑–∞–¥"


class CharactersMenuButtons(Enum):
    TANK = "üõ°Ô∏è –¢–∞–Ω–∫"
    MAGE = "üßô‚Äç‚ôÇÔ∏è –ú–∞–≥"
    MARKSMAN = "üèπ –°—Ç—Ä—ñ–ª–µ—Ü—å"
    ASSASSIN = "‚öîÔ∏è –ê—Å–∞—Å—ñ–Ω"
    SUPPORT = "‚ù§Ô∏è –ü—ñ–¥—Ç—Ä–∏–º–∫–∞"
    FIGHTER = "üó°Ô∏è –ë–æ—î—Ü—å"
    COMPARISON = "‚öñÔ∏è –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è"
    SEARCH_HERO = "üîé –ü–æ—à—É–∫"
    BACK = "üîô –ù–∞–∑–∞–¥"


class BuildsMenuButtons(Enum):
    CREATE_BUILD = "üèóÔ∏è –°—Ç–≤–æ—Ä–∏—Ç–∏"
    MY_BUILDS = "üìÑ –û–±—Ä–∞–Ω—ñ"
    POPULAR_BUILDS = "üî• –ü–æ–ø—É–ª—è—Ä–Ω—ñ"
    BACK = "üîô –ù–∞–∑–∞–¥"


class CounterPicksMenuButtons(Enum):
    COUNTER_SEARCH = "üîé –ü–æ—à—É–∫"
    COUNTER_LIST = "üìù –°–ø–∏—Å–æ–∫ –ü–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤"
    BACK = "üîô –ù–∞–∑–∞–¥"


class GuidesMenuButtons(Enum):
    NEW_GUIDES = "üÜï –ù–æ–≤—ñ –ì–∞–π–¥–∏"
    TOP_GUIDES = "üåü –¢–æ–ø –ì–∞–π–¥–∏"
    BEGINNER_GUIDES = "üìò –î–ª—è –ü–æ—á–∞—Ç–∫—ñ–≤—Ü—ñ–≤"
    ADVANCED_GUIDES = "üßô –°—Ç—Ä–∞—Ç–µ–≥—ñ—ó –≥—Ä–∏"
    TEAMPLAY_GUIDES = "ü§ù –ö–æ–º–∞–Ω–¥–Ω–∞ –ì—Ä–∞"
    BACK = "üîô –ù–∞–∑–∞–¥"


class VotingMenuButtons(Enum):
    CURRENT_VOTES = "üìç –ü–æ—Ç–æ—á–Ω—ñ –û–ø–∏—Ç—É–≤–∞–Ω–Ω—è"
    MY_VOTES = "üìã –ú–æ—ó –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è"
    SUGGEST_TOPIC = "‚ûï –ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –¢–µ–º—É"
    BACK = "üîô –ù–∞–∑–∞–¥"


class M6MenuButtons(Enum):
    TOURNAMENT_INFO = "üèÜ –¢—É—Ä–Ω—ñ—Ä–Ω–∞ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"
    STATISTICS_M6 = "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ M6"
    NEWS_M6 = "üì∞ –ù–æ–≤–∏–Ω–∏ M6"
    BACK = "üîô –ù–∞–∑–∞–¥"


class GPTMenuButtons(Enum):
    GENERATE_DATA = "ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –î–∞–Ω–∏—Ö"
    GPT_HINTS = "üìù –ü—ñ–¥–∫–∞–∑–∫–∏"
    HERO_STATS_GPT = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ì–µ—Ä–æ—ó–≤"
    BACK = "üîô –ù–∞–∑–∞–¥"


class MetaMenuButtons(Enum):
    META_HERO_LIST = "üìã –°–ø–∏—Å–æ–∫ –ì–µ—Ä–æ—ó–≤ —É –ú–µ—Ç—É"
    RECOMMENDATIONS = "üåü –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"
    UPDATE_META = "üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ú–µ—Ç–∏"
    BACK = "üîô –ù–∞–∑–∞–¥"


class ProfileMenuButtons(Enum):
    STATISTICS = "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    ACHIEVEMENTS = "üèÜ –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è"
    SETTINGS = "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"
    FEEDBACK = "üíå –ó–≤–æ—Ä–æ—Ç–Ω–∏–π –ó–≤'—è–∑–æ–∫"
    HELP = "‚ùì –î–æ–ø–æ–º–æ–≥–∞"
    BACK_TO_MAIN = "üîô –ù–∞–∑–∞–¥ –¥–æ –ì–æ–ª–æ–≤–Ω–æ–≥–æ –ú–µ–Ω—é"


class StatisticsMenuButtons(Enum):
    ACTIVITY = "üìä –ó–∞–≥–∞–ª—å–Ω–∞ –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å"
    RANKING = "ü•á –†–µ–π—Ç–∏–Ω–≥"
    GAME_STATS = "üéÆ –Ü–≥—Ä–æ–≤–∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    BACK = "üîô –ù–∞–∑–∞–¥"


class AchievementsMenuButtons(Enum):
    BADGES = "üéñÔ∏è –ú–æ—ó –ë–µ–π–¥–∂—ñ"
    PROGRESS = "üöÄ –ü—Ä–æ–≥—Ä–µ—Å"
    TOURNAMENT_STATS = "üèÖ –¢—É—Ä–Ω—ñ—Ä–Ω–∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    AWARDS = "üéüÔ∏è –û—Ç—Ä–∏–º–∞–Ω—ñ –ù–∞–≥–æ—Ä–æ–¥–∏"
    BACK = "üîô –ù–∞–∑–∞–¥"


class SettingsMenuButtons(Enum):
    LANGUAGE = "üåê –ú–æ–≤–∞ –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"
    CHANGE_USERNAME = "‚ÑπÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ Username"
    UPDATE_ID = "üÜî –û–Ω–æ–≤–∏—Ç–∏ ID"
    NOTIFICATIONS = "üîî –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è"
    BACK = "üîô –ù–∞–∑–∞–¥"


class FeedbackMenuButtons(Enum):
    SEND_FEEDBACK = "‚úèÔ∏è –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –í—ñ–¥–≥—É–∫"
    REPORT_BUG = "üêõ –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ü–æ–º–∏–ª–∫—É"
    BACK = "üîô –ù–∞–∑–∞–¥"


class HelpMenuButtons(Enum):
    INSTRUCTIONS = "üìÑ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó"
    FAQ = "‚ùî FAQ"
    HELP_SUPPORT = "üìû –ü—ñ–¥—Ç—Ä–∏–º–∫–∞"
    BACK = "üîô –ù–∞–∑–∞–¥"


def create_reply_keyboard(buttons: list, row_width: int = 2, resize_keyboard: bool = True) -> ReplyKeyboardMarkup:
    keyboard = ReplyKeyboardMarkup(resize_keyboard=resize_keyboard, row_width=row_width)
    keyboard.add(*[KeyboardButton(text=button.value) for button in buttons])
    return keyboard


def get_main_menu() -> ReplyKeyboardMarkup:
    return create_reply_keyboard([MainMenuButtons.NAVIGATION, MainMenuButtons.PROFILE], row_width=2)


def get_navigation_menu() -> ReplyKeyboardMarkup:
    return create_reply_keyboard([
        NavigationMenuButtons.CHARACTERS,
        NavigationMenuButtons.BUILDS,
        NavigationMenuButtons.COUNTER_PICKS,
        NavigationMenuButtons.GUIDES,
        NavigationMenuButtons.VOTING,
        NavigationMenuButtons.M6,
        NavigationMenuButtons.GPT,
        NavigationMenuButtons.META,
        NavigationMenuButtons.BACK
    ], row_width=3)


def get_characters_menu() -> ReplyKeyboardMarkup:
    return create_reply_keyboard([
        CharactersMenuButtons.TANK,
        CharactersMenuButtons.MAGE,
        CharactersMenuButtons.MARKSMAN,
        CharactersMenuButtons.ASSASSIN,
        CharactersMenuButtons.SUPPORT,
        CharactersMenuButtons.FIGHTER,
        CharactersMenuButtons.COMPARISON,
        CharactersMenuButtons.SEARCH_HERO,
        CharactersMenuButtons.BACK
    ], row_width=3)


def get_builds_menu() -> ReplyKeyboardMarkup:
    return create_reply_keyboard([
        BuildsMenuButtons.CREATE_BUILD,
        BuildsMenuButtons.MY_BUILDS,
        BuildsMenuButtons.POPULAR_BUILDS,
        BuildsMenuButtons.BACK
    ], row_width=2)


def get_counter_picks_menu() -> ReplyKeyboardMarkup:
    return create_reply_keyboard([
        CounterPicksMenuButtons.COUNTER_SEARCH,
        CounterPicksMenuButtons.COUNTER_LIST,
        CounterPicksMenuButtons.BACK
    ], row_width=2)


def get_guides_menu() -> ReplyKeyboardMarkup:
    return create_reply_keyboard([
        GuidesMenuButtons.NEW_GUIDES,
        GuidesMenuButtons.TOP_GUIDES,
        GuidesMenuButtons.BEGINNER_GUIDES,
        GuidesMenuButtons.ADVANCED_GUIDES,
        GuidesMenuButtons.TEAMPLAY_GUIDES,
        GuidesMenuButtons.BACK
    ], row_width=2)


def get_voting_menu() -> ReplyKeyboardMarkup:
    return create_reply_keyboard([
        VotingMenuButtons.CURRENT_VOTES,
        VotingMenuButtons.MY_VOTES,
        VotingMenuButtons.SUGGEST_TOPIC,
        VotingMenuButtons.BACK
    ], row_width=2)


def get_m6_menu() -> ReplyKeyboardMarkup:
    return create_reply_keyboard([
        M6MenuButtons.TOURNAMENT_INFO,
        M6MenuButtons.STATISTICS_M6,
        M6MenuButtons.NEWS_M6,
        M6MenuButtons.BACK
    ], row_width=2)


def get_gpt_menu() -> ReplyKeyboardMarkup:
    return create_reply_keyboard([
        GPTMenuButtons.GENERATE_DATA,
        GPTMenuButtons.GPT_HINTS,
        GPTMenuButtons.HERO_STATS_GPT,
        GPTMenuButtons.BACK
    ], row_width=2)


def get_meta_menu() -> ReplyKeyboardMarkup:
    return create_reply_keyboard([
        MetaMenuButtons.META_HERO_LIST,
        MetaMenuButtons.RECOMMENDATIONS,
        MetaMenuButtons.UPDATE_META,
        MetaMenuButtons.BACK
    ], row_width=2)


def get_profile_menu() -> ReplyKeyboardMarkup:
    return create_reply_keyboard([
        ProfileMenuButtons.STATISTICS,
        ProfileMenuButtons.ACHIEVEMENTS,
        ProfileMenuButtons.SETTINGS,
        ProfileMenuButtons.FEEDBACK,
        ProfileMenuButtons.HELP,
        ProfileMenuButtons.BACK_TO_MAIN
    ], row_width=2)


def get_statistics_menu() -> ReplyKeyboardMarkup:
    return create_reply_keyboard([
        StatisticsMenuButtons.ACTIVITY,
        StatisticsMenuButtons.RANKING,
        StatisticsMenuButtons.GAME_STATS,
        StatisticsMenuButtons.BACK
    ], row_width=2)


def get_achievements_menu() -> ReplyKeyboardMarkup:
    return create_reply_keyboard([
        AchievementsMenuButtons.BADGES,
        AchievementsMenuButtons.PROGRESS,
        AchievementsMenuButtons.TOURNAMENT_STATS,
        AchievementsMenuButtons.AWARDS,
        AchievementsMenuButtons.BACK
    ], row_width=2)


def get_settings_menu() -> ReplyKeyboardMarkup:
    return create_reply_keyboard([
        SettingsMenuButtons.LANGUAGE,
        SettingsMenuButtons.CHANGE_USERNAME,
        SettingsMenuButtons.UPDATE_ID,
        SettingsMenuButtons.NOTIFICATIONS,
        SettingsMenuButtons.BACK
    ], row_width=2)


def get_feedback_menu() -> ReplyKeyboardMarkup:
    return create_reply_keyboard([
        FeedbackMenuButtons.SEND_FEEDBACK,
        FeedbackMenuButtons.REPORT_BUG,
        FeedbackMenuButtons.BACK
    ], row_width=2)


def get_help_menu() -> ReplyKeyboardMarkup:
    return create_reply_keyboard([
        HelpMenuButtons.INSTRUCTIONS,
        HelpMenuButtons.FAQ,
        HelpMenuButtons.HELP_SUPPORT,
        HelpMenuButtons.BACK
    ], row_width=2)


# –Ü–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏

class InlineMenuButtons(Enum):
    ADDITIONAL_INFO = "–î–æ–¥–∞—Ç–∫–æ–≤–∞ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"
    BACK_TO_MENU = "üîô –ù–∞–∑–∞–¥ –¥–æ –ú–µ–Ω—é"
    NEXT_CHARACTER = "‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∏–π"
    PREV_CHARACTER = "‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π"
    MORE_GUIDES = "üìù –ë—ñ–ª—å—à–µ –ì–∞–π–¥—ñ–≤"


def get_generic_inline_keyboard() -> InlineKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∏—á–Ω–∞ —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.
    """
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton(text=InlineMenuButtons.ADDITIONAL_INFO.value, callback_data="additional_info"),
        InlineKeyboardButton(text=InlineMenuButtons.BACK_TO_MENU.value, callback_data="back_to_menu"),
    ]
    keyboard.add(*buttons)
    return keyboard


def get_character_inline_keyboard(character_id: int) -> InlineKeyboardMarkup:
    """
    –Ü–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≥–∞–π–¥—ñ–≤ —Ç–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó.
    """
    keyboard = InlineKeyboardMarkup(row_width=3)
    buttons = [
        InlineKeyboardButton(text="üìù –ì–∞–π–¥–∏", callback_data=f"guides_{character_id}"),
        InlineKeyboardButton(text="‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∏–π", callback_data=f"next_{character_id}"),
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π", callback_data=f"prev_{character_id}"),
    ]
    keyboard.add(*buttons)
    return keyboard


def get_guide_inline_keyboard(guide_id: int) -> InlineKeyboardMarkup:
    """
    –Ü–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≥–∞–π–¥—ñ–≤ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∞–±–æ –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ —ñ–Ω—à–æ–≥–æ –≥–∞–π–¥—É.
    """
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton(text="üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å", callback_data="back_to_guides"),
        InlineKeyboardButton(text="‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∏–π –ì–∞–π–¥", callback_data=f"next_guide_{guide_id}"),
    ]
    keyboard.add(*buttons)
    return keyboard