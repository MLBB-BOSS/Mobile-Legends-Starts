# menus.py
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from enum import Enum
import logging

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

class MenuButton(Enum):
    NAVIGATION = "üß≠ –ù–∞–≤—ñ–≥–∞—Ü—ñ—è"
    PROFILE = "ü™™ –ü—Ä–æ—Ñ—ñ–ª—å"
    HEROES = "üõ°Ô∏è –ü–µ—Ä—Å–æ–Ω–∞–∂—ñ"
    GUIDES = "üìö –ì–∞–π–¥–∏"
    SEARCH_HERO = "üîé –ü–æ—à—É–∫ –ü–µ—Ä—Å–æ–Ω–∞–∂–∞"
    FIGHTER = "üí™ –ë–æ—î—Ü—å"  # –î–æ–¥–∞–Ω–æ –∫–ª–∞—Å "–ë–æ—î—Ü—å"
    TANK = "üõ°Ô∏è –¢–∞–Ω–∫"
    MAGE = "üîÆ –ú–∞–≥"
    MARKSMAN = "üèπ –°—Ç—Ä—ñ–ª–µ—Ü—å"
    ASSASSIN = "‚öîÔ∏è –ê—Å–∞—Å—ñ–Ω"
    SUPPORT = "üß¨ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞"
    BACK = "üîÑ –ù–∞–∑–∞–¥"
    NEW_GUIDES = "üÜï –ù–æ–≤—ñ –ì–∞–π–¥–∏"
    POPULAR_GUIDES = "üåü –ü–æ–ø—É–ª—è—Ä–Ω—ñ –ì–∞–π–¥–∏"
    BEGINNER_GUIDES = "üìò –î–ª—è –ü–æ—á–∞—Ç–∫—ñ–≤—Ü—ñ–≤"
    ADVANCED_TECHNIQUES = "üßô –ü—Ä–æ—Å—É–Ω—É—Ç—ñ –¢–µ—Ö–Ω—ñ–∫–∏"
    TEAMPLAY_GUIDES = "üõ°Ô∏è –ö–æ–º–∞–Ω–¥–Ω–∞ –ì—Ä–∞"
    COUNTER_PICKS = "‚öñÔ∏è –ö–æ–Ω—Ç—Ä-–ø—ñ–∫–∏"
    COUNTER_SEARCH = "üîé –ü–æ—à—É–∫ –ö–æ–Ω—Ç—Ä-–ø—ñ–∫—É"
    COUNTER_LIST = "üìù –°–ø–∏—Å–æ–∫ –ü–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤"
    CREATE_BUILD = "üèóÔ∏è –°—Ç–≤–æ—Ä–∏—Ç–∏ –ë—ñ–ª–¥"
    MY_BUILDS = "üìÑ –ú–æ—ó –ë—ñ–ª–¥–∏"
    POPULAR_BUILDS = "üíé –ü–æ–ø—É–ª—è—Ä–Ω—ñ –ë—ñ–ª–¥–∏"
    BUILDS = "‚öúÔ∏è –ë—ñ–ª–¥–∏"  # –î–æ–¥–∞–Ω–æ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –≤ –æ–±—Ä–æ–±–Ω–∏–∫–∞—Ö
    CURRENT_VOTES = "üìç –ü–æ—Ç–æ—á–Ω—ñ –û–ø–∏—Ç—É–≤–∞–Ω–Ω—è"
    MY_VOTES = "üìã –ú–æ—ó –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è"
    SUGGEST_TOPIC = "‚ûï –ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –¢–µ–º—É"
    VOTING = "üìä –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è"  # –î–æ–¥–∞–Ω–æ —Ü—é –∫–Ω–æ–ø–∫—É
    ACTIVITY = "üìä –ó–∞–≥–∞–ª—å–Ω–∞ –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å"
    RANKING = "ü•á –†–µ–π—Ç–∏–Ω–≥"
    GAME_STATS = "üéÆ –Ü–≥—Ä–æ–≤–∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    BADGES = "üéñÔ∏è –ú–æ—ó –ë–µ–π–¥–∂—ñ"
    PROGRESS = "üöÄ –ü—Ä–æ–≥—Ä–µ—Å"
    TOURNAMENT_STATS = "üèÖ –¢—É—Ä–Ω—ñ—Ä–Ω–∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    AWARDS = "üéüÔ∏è –û—Ç—Ä–∏–º–∞–Ω—ñ –ù–∞–≥–æ—Ä–æ–¥–∏"
    LANGUAGE = "üåê –ú–æ–≤–∞ –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"
    CHANGE_USERNAME = "üÜî –ó–º—ñ–Ω–∏—Ç–∏ Username"
    UPDATE_ID = "üõ°Ô∏è –û–Ω–æ–≤–∏—Ç–∏ ID –ì—Ä–∞–≤—Ü—è"
    NOTIFICATIONS = "üîî –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è"
    INSTRUCTIONS = "üìÑ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó"
    FAQ = "‚ùî FAQ"
    HELP_SUPPORT = "üÜò –ü—ñ–¥—Ç—Ä–∏–º–∫–∞"  # –î–æ–¥–∞–Ω–æ –¥–ª—è –º–µ–Ω—é "–î–æ–ø–æ–º–æ–≥–∞"

# –°–ø–∏—Å–æ–∫ –≥–µ—Ä–æ—ó–≤ –∑–∞ –∫–ª–∞—Å–∞–º–∏
heroes_by_class = {
    "–ë–æ—î—Ü—å": [
        "Balmond", "Alucard", "Bane", "Zilong", "Freya", "Alpha", "Ruby", "Roger",
        "Gatotkaca", "Jawhead", "Martis", "Aldous", "Minsitthar", "Terizla", "X.Borg",
        "Dyroth", "Masha", "Silvanna", "Yu Zhong", "Khaleed", "Barats", "Paquito",
        "Phoveus", "Aulus", "Fiddrin", "Arlott", "Cici", "Kaja", "Leomord", "Thamuz",
        "Badang", "Guinevere"
    ],
    "–¢–∞–Ω–∫": [
        "Alice", "Tigreal", "Akai", "Franco", "Minotaur", "Lolia", "Gatotkaca", "Grock",
        "Hylos", "Uranus", "Belerick", "Khufra", "Esmeralda", "Terizla", "Baxia", "Masha",
        "Atlas", "Barats", "Edith", "Fredrinn", "Johnson", "Hilda", "Carmilla", "Gloo", "Chip"
    ],
    "–ê—Å–∞—Å—ñ–Ω": [
        "Saber", "Alucard", "Zilong", "Fanny", "Natalia", "Yi Sun-shin", "Lancelot", "Helcurt",
        "Lesley", "Selena", "Mathilda", "Paquito", "Yin", "Arlott", "Harley", "Suyou"
    ],
    "–°—Ç—Ä—ñ–ª–µ—Ü—å": [
        "Popol and Kupa", "Brody", "Beatrix", "Natan", "Melissa", "Ixia", "Hanabi", "Claude",
        "Kimmy", "Granger", "Wanwan", "Miya", "Bruno", "Clint", "Layla", "Yi Sun-shin", "Moskov",
        "Roger", "Karrie", "Irithel", "Lesley"
    ],
    "–ú–∞–≥": [
        "Vale", "Lunox", "Kadita", "Cecillion", "Luo Yi", "Xavier", "Novaria", "Zhuxin", "Harley",
        "Yve", "Aurora", "Faramis", "Esmeralda", "Kagura", "Cyclops", "Vexana", "Odette", "Zhask"
    ],
    "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞": [
        "Rafaela", "Minotaur", "Lolita", "Estes", "Angela", "Faramis", "Mathilda", "Florin", "Johnso"
    ],
}

# –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è MenuButton –Ω–∞ –Ω–∞–∑–≤–∏ –∫–ª–∞—Å—ñ–≤
menu_button_to_class = {
    MenuButton.TANK.value: "–¢–∞–Ω–∫",
    MenuButton.MAGE.value: "–ú–∞–≥",
    MenuButton.MARKSMAN.value: "–°—Ç—Ä—ñ–ª–µ—Ü—å",
    MenuButton.ASSASSIN.value: "–ê—Å–∞—Å—ñ–Ω",
    MenuButton.SUPPORT.value: "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞",
    MenuButton.FIGHTER.value: "–ë–æ—î—Ü—å",
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–µ–Ω—é –≥–µ—Ä–æ—ó–≤
def get_heroes_menu():
    return create_menu(
        [
            MenuButton.SEARCH_HERO,
            MenuButton.FIGHTER,
            MenuButton.TANK,
            MenuButton.MAGE,
            MenuButton.MARKSMAN,
            MenuButton.ASSASSIN,
            MenuButton.SUPPORT,
            MenuButton.BACK
        ],
        row_width=2
    )

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –≥–µ—Ä–æ—è–º–∏ –æ–±—Ä–∞–Ω–æ–≥–æ –∫–ª–∞—Å—É
def get_hero_class_menu(hero_class):
    heroes = heroes_by_class.get(hero_class, [])
    buttons = [KeyboardButton(text=hero) for hero in heroes]
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –≥–µ—Ä–æ—è–º–∏
    row_width = 2
    keyboard = [buttons[i:i+row_width] for i in range(0, len(buttons), row_width)]
    keyboard.append([KeyboardButton(text=MenuButton.BACK.value)])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä
def create_menu(buttons, row_width=2):
    """
    –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏.
    :param buttons: –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ (MenuButton –∞–±–æ str).
    :param row_width: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–Ω–æ–ø–æ–∫ —É —Ä—è–¥–∫—É.
    :return: ReplyKeyboardMarkup
    """
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—É –∫–Ω–æ–ø–æ–∫
    if not all(isinstance(button, MenuButton) or isinstance(button, str) for button in buttons):
        raise ValueError("–£—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ —É —Å–ø–∏—Å–∫—É –∫–Ω–æ–ø–æ–∫ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –µ–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏ MenuButton –∞–±–æ str.")
    logger.info(f"–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–∞–º–∏: {[button.value if isinstance(button, MenuButton) else button for button in buttons]}")
    keyboard = [
        [KeyboardButton(text=button.value if isinstance(button, MenuButton) else button) for button in buttons[i:i + row_width]]
        for i in range(0, len(buttons), row_width)
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# –Ü–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –º–µ–Ω—é –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω
# ...
