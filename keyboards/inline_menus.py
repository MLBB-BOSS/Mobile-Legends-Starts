from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –§—É–Ω–∫—Ü—ñ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä
def get_intro_page_1_keyboard():
    """
    –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä—à–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —ñ–Ω—Ç—Ä–æ.
    """
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞–ª—ñ", callback_data="intro_next_1")],
        ]
    )
    return keyboard

def get_intro_page_2_keyboard():
    """
    –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –¥—Ä—É–≥–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —ñ–Ω—Ç—Ä–æ.
    """
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞–ª—ñ", callback_data="intro_next_2")],
        ]
    )
    return keyboard

def get_intro_page_3_keyboard():
    """
    –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è —Ç—Ä–µ—Ç—å–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —ñ–Ω—Ç—Ä–æ.
    """
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–†–æ–∑–ø–æ—á–∞—Ç–∏", callback_data="intro_start")],
        ]
    )
    return keyboard

def get_back_to_main_menu_button():
    """
    –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –æ–¥–Ω—ñ—î—é –∫–Ω–æ–ø–∫–æ—é –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    """
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n‚ïë        ‚ñë‚ñí‚ñì‚ñà Ôº≠ Ôº¨ Ôº≥ ‚ñà‚ñì‚ñí‚ñë",
                    callback_data="menu_back"
                )
            ]
        ]
    )
    return keyboard

def get_main_menu():
    """
    –ì–µ–Ω–µ—Ä—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    """
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üì∞ –ù–æ–≤–∏–Ω–∏", callback_data="news_placeholder")],
            [InlineKeyboardButton(text="üéØ –í–∏–∫–ª–∏–∫–∏", callback_data="challenges_placeholder")],
        ]
    )
    return keyboard

# –•–µ–Ω–¥–ª–µ—Ä–∏
@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    """
    –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /start.
    """
    await message.answer(
        text="–í—ñ—Ç–∞—î–º–æ –≤ MLS –±–æ—Ç—ñ! –¶–µ —ñ–Ω—Ç—Ä–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–∞–ª—ñ', —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏.",
        reply_markup=get_intro_page_1_keyboard()
    )

@dp.callback_query_handler(lambda c: c.data == "intro_next_1")
async def intro_page_2(callback_query: types.CallbackQuery):
    """
    –î—Ä—É–≥–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —ñ–Ω—Ç—Ä–æ.
    """
    await callback_query.message.edit_text(
        text="–¶–µ –¥—Ä—É–≥–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —ñ–Ω—Ç—Ä–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–∞–ª—ñ', —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏.",
        reply_markup=get_intro_page_2_keyboard()
    )

@dp.callback_query_handler(lambda c: c.data == "intro_next_2")
async def intro_page_3(callback_query: types.CallbackQuery):
    """
    –¢—Ä–µ—Ç—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —ñ–Ω—Ç—Ä–æ.
    """
    await callback_query.message.edit_text(
        text="–¶–µ –æ—Å—Ç–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —ñ–Ω—Ç—Ä–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–†–æ–∑–ø–æ—á–∞—Ç–∏', —â–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏.",
        reply_markup=get_intro_page_3_keyboard()
    )

@dp.callback_query_handler(lambda c: c.data == "intro_start")
async def intro_complete(callback_query: types.CallbackQuery):
    """
    –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —ñ–Ω—Ç—Ä–æ.
    """
    await callback_query.message.edit_text(
        text="–Ü–Ω—Ç—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ.",
        reply_markup=get_back_to_main_menu_button()
    )

@dp.callback_query_handler(lambda c: c.data == "menu_back")
async def handle_back_to_main_menu(callback_query: types.CallbackQuery):
    """
    –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    """
    await callback_query.message.edit_text(
        text="–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )

@dp.callback_query_handler(lambda c: c.data == "news_placeholder")
async def handle_news(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ù–æ–≤–∏–Ω–∏'.
    """
    await callback_query.message.edit_text(
        text="–¢—É—Ç –±—É–¥—É—Ç—å –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏.",
        reply_markup=get_back_to_main_menu_button()
    )

@dp.callback_query_handler(lambda c: c.data == "challenges_placeholder")
async def handle_challenges(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–í–∏–∫–ª–∏–∫–∏'.
    """
    await callback_query.message.edit_text(
        text="–¢—É—Ç –±—É–¥—É—Ç—å –≤–∞—à—ñ –≤–∏–∫–ª–∏–∫–∏.",
        reply_markup=get_back_to_main_menu_button()
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)