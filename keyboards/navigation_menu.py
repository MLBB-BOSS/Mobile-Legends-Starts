# File: keyboards/navigation_menu.py

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from utils.localization import loc
import logging

logger = logging.getLogger(__name__)

class NavigationMenu:
    def get_main_navigation(self) -> ReplyKeyboardMarkup:
        """Creates and returns the main navigation menu keyboard"""
        try:
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text=loc.get_message("buttons.guides") or "üìñ –ì–∞–π–¥–∏"),
                        KeyboardButton(text=loc.get_message("buttons.characters") or "üë• –ü–µ—Ä—Å–æ–Ω–∞–∂—ñ")
                    ],
                    [
                        KeyboardButton(text=loc.get_message("buttons.counter_picks") or "‚öîÔ∏è –ö–æ–Ω—Ç—Ä-–ø—ñ–∫–∏"),
                        KeyboardButton(text=loc.get_message("buttons.builds") or "üõ†Ô∏è –ë—ñ–ª–¥–∏")
                    ],
                    [
                        KeyboardButton(text=loc.get_message("buttons.voting") or "üìä –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è")
                    ],
                    [
                        KeyboardButton(text=loc.get_message("buttons.back") or "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
                    ]
                ],
                resize_keyboard=True
            )
            return keyboard
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
            # Return a simplified fallback keyboard
            return ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )

    def get_heroes_menu(self) -> ReplyKeyboardMarkup:
        """Creates and returns the heroes menu keyboard"""
        try:
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text=loc.get_message("heroes.classes.tank.name") or "–¢–∞–Ω–∫"),
                        KeyboardButton(text=loc.get_message("heroes.classes.fighter.name") or "–ë—ñ–π—Ü—ñ")
                    ],
                    [
                        KeyboardButton(text=loc.get_message("heroes.classes.assassin.name") or "–ê—Å–∞—Å–∏–Ω–∏"),
                        KeyboardButton(text=loc.get_message("heroes.classes.mage.name") or "–ú–∞–≥–∏")
                    ],
                    [
                        KeyboardButton(text=loc.get_message("heroes.classes.marksman.name") or "–°—Ç—Ä—ñ–ª—å—Ü—ñ"),
                        KeyboardButton(text=loc.get_message("heroes.classes.support.name") or "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞")
                    ],
                    [
                        KeyboardButton(text=loc.get_message("buttons.back_to_navigation") or "‚Ü©Ô∏è –î–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó")
                    ]
                ],
                resize_keyboard=True
            )
            return keyboard
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–µ–Ω—é –≥–µ—Ä–æ—ó–≤: {e}")
            return ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚Ü©Ô∏è –î–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó")]
                ],
                resize_keyboard=True
            )

    def get_hero_class_menu(self, hero_class: str) -> ReplyKeyboardMarkup:
        """Creates and returns the menu for a specific hero class"""
        try:
            heroes = loc.get_message(f"heroes.classes.{hero_class}.heroes")
            if not heroes:
                raise ValueError(f"Heroes not found for class: {hero_class}")

            # Split heroes into pairs for the keyboard
            hero_pairs = [heroes[i:i + 2] for i in range(0, len(heroes), 2)]
            keyboard_buttons = [[KeyboardButton(text=hero) for hero in pair] for pair in hero_pairs]
            
            # Add back button
            keyboard_buttons.append([
                KeyboardButton(text=loc.get_message("buttons.back_to_hero_classes") or "‚¨ÖÔ∏è –î–æ –∫–ª–∞—Å—ñ–≤ –≥–µ—Ä–æ—ó–≤")
            ])

            return ReplyKeyboardMarkup(
                keyboard=keyboard_buttons,
                resize_keyboard=True
            )
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–µ–Ω—é –∫–ª–∞—Å—É –≥–µ—Ä–æ—ó–≤ {hero_class}: {e}")
            return ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚¨ÖÔ∏è –î–æ –∫–ª–∞—Å—ñ–≤ –≥–µ—Ä–æ—ó–≤")]
                ],
                resize_keyboard=True
            )
