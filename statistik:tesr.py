from aiogram import Router, Bot, F
from aiogram.types import Message, BotCommand, BotCommandScopeDefault
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import logging
from datetime import datetime

logger = logging.getLogger(__name__)

class StatisticsCommand:
    """–ö–ª–∞—Å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
        self.router = Router()
        self._setup_handlers()
    
    async def setup_bot_commands(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        commands = [
            BotCommand(
                command="statistics",
                description="üìä –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
            )
        ]
        
        try:
            await self.bot.set_my_commands(
                commands=commands,
                scope=BotCommandScopeDefault()
            )
            logger.info("Bot commands have been set up successfully")
        except Exception as e:
            logger.error(f"Error setting up bot commands: {e}")

    def _setup_handlers(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–æ–º–∞–Ω–¥"""
        self.router.message.register(
            self.show_statistics,
            Command("statistics")
        )

    async def get_user_statistics(self, user_id: int) -> dict:
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        –í –º–∞–π–±—É—Ç–Ω—å–æ–º—É —Ç—É—Ç –±—É–¥–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        """
        # TODO: Implement database integration
        return {
            "username": "is_mlbb",
            "level": 1,
            "rating": 0.0,
            "tasks": 0,
            "missions": 0,
            "quizzes": 0,
            "screenshots": 0,
            "matches": 0,
            "wins": 0,
            "losses": 0,
            "tournaments": 0,
            "badges": 0,
            "last_updated": datetime.utcnow()
        }

    def format_statistics(self, stats: dict) -> str:
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        return f"""üåü –ï–ø—ñ—á–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –≥—Ä–∞–≤—Ü—è üåü

üë§ –Ü–º'—è: {stats['username']}
üéØ –†—ñ–≤–µ–Ω—å: {stats['level']}
üåü –†–µ–π—Ç–∏–Ω–≥: {stats['rating']}

üèÜ –î–û–°–Ø–ì–ù–ï–ù–ù–Ø
üìå –ó–∞–≤–¥–∞–Ω—å: {stats['tasks']}
üéÆ –ú—ñ—Å—ñ–π: {stats['missions']}
üß† –í—ñ–∫—Ç–æ—Ä–∏–Ω: {stats['quizzes']}
üñºÔ∏è –°–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤: {stats['screenshots']}

‚öîÔ∏è –ú–ê–¢–ß–Ü
üèüÔ∏è –ú–∞—Ç—á—ñ–≤: {stats['matches']}
üèÖ –í–∏–≥—Ä–∞—à—ñ: {stats['wins']}
‚ùå –ü–æ—Ä–∞–∑–∫–∏: {stats['losses']}

üèÖ –¢–£–†–ù–Ü–†–ò
üìÖ –£—á–∞—Å—Ç—å: {stats['tournaments']}
üèµÔ∏è –ë–µ–π–¥–∂—ñ–≤: {stats['badges']}
üîÑ –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {stats['last_updated'].strftime('%d.%m.%Y %H:%M')}

ü§ñ –ì–æ—Ç–æ–≤—ñ –ø—ñ–¥–∫–æ—Ä—é–≤–∞—Ç–∏ –Ω–æ–≤—ñ –≤–µ—Ä—à–∏–Ω–∏ —É Mobile Legends?
‚öîÔ∏è –í–∏–±–∏—Ä–∞–π—Ç–µ —Å–≤—ñ–π —à–ª—è—Ö —ñ —Å—Ç–∞–≤–∞–π—Ç–µ —â–µ —Å–∏–ª—å–Ω—ñ—à–∏–º–∏! –†–∞–∑–æ–º –¥–æ –ø–µ—Ä–µ–º–æ–≥–∏!"""

    async def show_statistics(self, message: Message):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /statistics"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            stats = await self.get_user_statistics(message.from_user.id)
            
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            await message.answer(
                text=self.format_statistics(stats),
                parse_mode="HTML"
            )
            logger.info(f"Statistics shown for user {message.from_user.id}")
            
        except Exception as e:
            logger.error(f"Error showing statistics: {e}")
            await message.answer(
                "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. "
                "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def setup_statistics_command(bot: Bot) -> Router:
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    statistics_command = StatisticsCommand(bot)
    await statistics_command.setup_bot_commands()
    return statistics_command.router

# –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —É –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ñ–∞–π–ª—ñ –±–æ—Ç–∞:
'''
async def main():
    bot = Bot(token="YOUR_BOT_TOKEN")
    dp = Dispatcher()
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    statistics_router = await setup_statistics_command(bot)
    dp.include_router(statistics_router)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
'''
