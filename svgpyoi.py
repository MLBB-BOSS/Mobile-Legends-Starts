import os
import cairosvg
from pathlib import Path
from aiogram import Router, Bot, F
from aiogram.types import Message, FSInputFile
from aiogram.filters import Command
import logging

class ProfileImageGenerator:
    def __init__(self, temp_dir: str = "temp"):
        self.temp_dir = temp_dir
        self.logger = logging.getLogger(__name__)
        self._ensure_temp_dir()

    def _ensure_temp_dir(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó"""
        Path(self.temp_dir).mkdir(parents=True, exist_ok=True)

    def _get_temp_path(self, filename: str) -> str:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —à–ª—è—Ö—É –¥–æ —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É"""
        return os.path.join(self.temp_dir, filename)

    async def generate_profile_image(self, user_data: dict) -> str:
        """
        –ì–µ–Ω–µ—Ä—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        
        Args:
            user_data (dict): –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –ø—Ä–æ—Ñ—ñ–ª—ñ
            
        Returns:
            str: –®–ª—è—Ö –¥–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        """
        # –ß–∏—Ç–∞—î–º–æ —à–∞–±–ª–æ–Ω SVG
        svg_template_path = "templates/profile_template.svg"
        with open(svg_template_path, 'r', encoding='utf-8') as f:
            svg_content = f.read()

        # –ó–∞–º—ñ–Ω—è—î–º–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
        svg_content = svg_content.replace("–û–ª–µ–≥", user_data.get('username', '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'))
        svg_content = svg_content.replace("10", str(user_data.get('level', 1)))
        # –î–æ–¥–∞–π—Ç–µ —ñ–Ω—à—ñ –∑–∞–º—ñ–Ω–∏ –¥–ª—è —ñ–Ω—à–∏—Ö –¥–∞–Ω–∏—Ö...

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π SVG
        temp_svg = self._get_temp_path(f"profile_{user_data['user_id']}.svg")
        with open(temp_svg, 'w', encoding='utf-8') as f:
            f.write(svg_content)

        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ PNG
        output_path = self._get_temp_path(f"profile_{user_data['user_id']}.png")
        try:
            cairosvg.svg2png(
                url=temp_svg,
                write_to=output_path,
                dpi=300,
                scale=2.0
            )
            return output_path
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó SVG –≤ PNG: {e}")
            raise

class ProfileCommand:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.router = Router()
        self.image_generator = ProfileImageGenerator()
        self._setup_handlers()

    def _setup_handlers(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–æ–º–∞–Ω–¥"""
        self.router.message.register(self.show_profile, Command("profile"))

    async def get_user_data(self, user_id: int) -> dict:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        # TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        return {
            "user_id": user_id,
            "username": "is_mlbb",
            "level": 100,
            "rating": "–¢–û–ü 1",
            "badges": 56,
            "wins": 16,
            "activity_days": 15,
            "play_time": "40 –≥–æ–¥–∏–Ω",
            "friends": 5,
            "favorite_hero": "–õ–∞–Ω—Å–µ–ª–æ—Ç",
            "last_tournament": "18.12.2024"
        }

    async def show_profile(self, message: Message):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /profile"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user_data = await self.get_user_data(message.from_user.id)
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
            image_path = await self.image_generator.generate_profile_image(user_data)
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            await message.answer_photo(
                photo=FSInputFile(image_path),
                caption=f"üéÆ –ü—Ä–æ—Ñ—ñ–ª—å –≥—Ä–∞–≤—Ü—è {user_data['username']}"
            )
            
        except Exception as e:
            self.logger.error(f"Error showing profile: {e}")
            await message.answer("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–æ—Ñ—ñ–ª—é")
        
        finally:
            # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏
            try:
                if image_path and os.path.exists(image_path):
                    os.remove(image_path)
            except Exception as e:
                self.logger.error(f"Error cleaning up temporary files: {e}")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –ø—Ä–æ—Ñ—ñ–ª—é
async def setup_profile_command(bot: Bot) -> Router:
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –ø—Ä–æ—Ñ—ñ–ª—é"""
    profile_command = ProfileCommand(bot)
    return profile_command.router

# –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —É –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ñ–∞–π–ª—ñ –±–æ—Ç–∞:
'''
async def main():
    bot = Bot(token="YOUR_BOT_TOKEN")
    dp = Dispatcher()
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ SVG —à–∞–±–ª–æ–Ω
    os.makedirs("templates", exist_ok=True)
    with open("templates/profile_template.svg", "w", encoding="utf-8") as f:
        f.write(your_svg_template)
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –ø—Ä–æ—Ñ—ñ–ª—é
    profile_router = await setup_profile_command(bot)
    dp.include_router(profile_router)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
'''
