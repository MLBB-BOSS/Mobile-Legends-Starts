from sqlalchemy import Column, Integer, ForeignKey, DateTime, String, Float
from sqlalchemy.orm import relationship, Session
from datetime import datetime
from models.base import Base
from models.user import User


# –ú–æ–¥–µ–ª—å UserStats –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
class UserStats(Base):
    __tablename__ = 'user_stats'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(Integer, ForeignKey('users.id', ondelete='CASCADE'), nullable=False)
    rating = Column(Integer, default=0)
    achievements_count = Column(Integer, default=0)
    total_matches = Column(Integer, default=0)
    total_wins = Column(Integer, default=0)
    total_losses = Column(Integer, default=0)
    last_update = Column(DateTime, default=datetime.utcnow)

    user = relationship("User", backref="stats")
    
    def __repr__(self):
        return (f"<UserStats(user_id={self.user_id}, rating={self.rating}, "
                f"achievements_count={self.achievements_count}, total_matches={self.total_matches})>")


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def get_user_profile_text(db: Session, telegram_id: int):
    user = db.query(User).filter(User.telegram_id == telegram_id).first()
    if not user:
        return "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å."

    profile_text = f"""
    üÜî MLBB ID: {user.mlbb_id or "–ù–µ–≤–∫–∞–∑–∞–Ω–æ"}
    üéØ **–†–µ–π—Ç–∏–Ω–≥:** {user.rating}
    """
    return profile_text


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è MLBB ID
async def update_mlbb_id(db: Session, telegram_id: int, mlbb_id: str):
    user = db.query(User).filter(User.telegram_id == telegram_id).first()
    if not user:
        return "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –†–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å —Å–ø–æ—á–∞—Ç–∫—É."
    
    user.mlbb_id = mlbb_id
    db.commit()
    return f"–í–∞—à MLBB ID —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {mlbb_id}"
