# handlers/m6.py

from aiogram import Router, types, Dispatcher
from keyboards.menus import MenuButton, get_m6_menu
import logging

logger = logging.getLogger(__name__)

router = Router()

def register_handlers(dp: Dispatcher):
    # –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "üèÜ M6"
    @dp.message_handler(lambda message: message.text == MenuButton.M6.value)
    async def m6_menu_handler(message: types.Message):
        await message.answer("–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é M6:", reply_markup=get_m6_menu())

    # –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "üèÜ –¢—É—Ä–Ω—ñ—Ä–Ω–∞ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"
    @dp.message_handler(lambda message: message.text == MenuButton.M6_INFO.value)
    async def m6_info_handler(message: types.Message):
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ M6
        m6_info = "–¢—É—Ä–Ω—ñ—Ä–Ω–∞ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è: ... (–∑–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ)"
        await message.answer(m6_info, reply_markup=get_m6_menu())

    # –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ M6"
    @dp.message_handler(lambda message: message.text == MenuButton.M6_STATS.value)
    async def m6_stats_handler(message: types.Message):
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ M6
        m6_stats = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ M6: ... (–∑–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ)"
        await message.answer(m6_stats, reply_markup=get_m6_menu())

    # –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "üì∞ –ù–æ–≤–∏–Ω–∏ M6"
    @dp.message_handler(lambda message: message.text == MenuButton.M6_NEWS.value)
    async def m6_news_handler(message: types.Message):
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–æ–≤–∏–Ω M6
        m6_news = "–ù–æ–≤–∏–Ω–∏ M6: ... (–∑–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ)"
        await message.answer(m6_news, reply_markup=get_m6_menu())