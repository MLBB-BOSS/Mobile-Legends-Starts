# handlers/ai_handler.py

import logging
import openai
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from config import OPENAI_API_KEY
from keyboards.inline_menus import get_generic_inline_keyboard
from utils.messages import (
    GENERIC_ERROR_MESSAGE_TEXT,
    AI_INTRO_TEXT,
    AI_RESPONSE_TEXT,
    UNKNOWN_COMMAND_TEXT,
)
from utils.hero_data import load_hero_data  # –Ü–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≥–µ—Ä–æ—è
from keyboards.menus import menu_button_to_class  # –Ü–º–ø–æ—Ä—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –∫–Ω–æ–ø–æ–∫ –∫–ª–∞—Å–∞–º

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ OpenAI API
openai.api_key = OPENAI_API_KEY

# –°—Ç–≤–æ—Ä—é—î–º–æ Router –¥–ª—è AI
router = Router()

# –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞–Ω–∏ –¥–ª—è AI
class AIStates(StatesGroup):
    WAITING_FOR_QUERY = State()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ—á–∞—Ç–∫—É –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ AI
@router.message(F.text == "üßë‚Äçüíª –î–æ–ø–æ–º–æ–≥–∞ –∑ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º")  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ç–æ—á–Ω–∏–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
async def ai_start(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} —Ä–æ–∑–ø–æ—á–∞–≤ –≤–∑–∞—î–º–æ–¥—ñ—é –∑ AI –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")

    await message.delete()

    await state.set_state(AIStates.WAITING_FOR_QUERY)

    await bot.send_message(
        chat_id=message.chat.id,
        text=AI_INTRO_TEXT,
        reply_markup=get_generic_inline_keyboard()
    )

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@router.message(AIStates.WAITING_FOR_QUERY)
async def ai_handle_query(message: Message, state: FSMContext, bot: Bot):
    user_query = message.text.strip()
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –∑–∞–ø–∏—Ç—É—î AI –ø—Ä–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {user_query}")

    await message.delete()

    if not user_query:
        await bot.send_message(
            chat_id=message.chat.id,
            text="–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–º'—è –≥–µ—Ä–æ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.",
            reply_markup=get_generic_inline_keyboard()
        )
        return

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≥–µ—Ä–æ—è
    hero_data = load_hero_data(user_query)
    if not hero_data:
        await bot.send_message(
            chat_id=message.chat.id,
            text="–í–∏–±—Ä–∞–Ω–∏–π –≥–µ—Ä–æ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–∑–≤—É –≥–µ—Ä–æ—è –∞–±–æ –≤–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π.",
            reply_markup=get_generic_inline_keyboard()
        )
        await state.clear()
        return

    # –§–æ—Ä–º—É—î–º–æ –ø—Ä–æ–º–ø—Ç –¥–ª—è OpenAI
    prompt = (
        f"–û—Å—å –±–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≥–µ—Ä–æ—è Mobile Legends:\n"
        f"–ù–∞–∑–≤–∞: {hero_data['name']} ({hero_data['name']})\n"
        f"–ö–ª–∞—Å: {hero_data['class']}\n"
        f"–ë–∞–∑–æ–≤—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:\n"
        f"  - –ê—Ç–∞–∫–∞: {hero_data['base_statistics']['attack']}\n"
        f"  - –ó–∞—Ö–∏—Å—Ç: {hero_data['base_statistics']['defense']}\n"
        f"  - –ú–∞–≥—ñ—è: {hero_data['base_statistics']['magic']}\n"
        f"  - –®–≤–∏–¥–∫—ñ—Å—Ç—å: {hero_data['base_statistics']['speed']}\n"
        f"–°–∫—ñ–ª–∏:\n"
    )
    for skill_type, skill in hero_data['skills'].items():
        # –£ –≤–∏–ø–∞–¥–∫—É –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ `energy_cost` —á–∏ —ñ–Ω—à–∏—Ö –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
        skill_info = f"{skill['name']}: {skill['description']}"
        if "cooldown" in skill:
            skill_info += f" (–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞: {skill['cooldown']})"
        if "mana_cost" in skill and skill['mana_cost'] is not None:
            skill_info += f" (–í–∏—Ç—Ä–∞—Ç–∞ –º–∞–Ω–∏: {skill['mana_cost']})"
        if "energy_cost" in skill and skill['energy_cost'] is not None:
            skill_info += f" (–í–∏—Ç—Ä–∞—Ç–∞ –µ–Ω–µ—Ä–≥—ñ—ó: {skill['energy_cost']})"
        skill_info += "\n"
        prompt += f"  - {skill_info}"

    prompt += (
        "\n"
        "–ù–∞ –æ—Å–Ω–æ–≤—ñ —Ü—ñ—î—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó, –Ω–∞–¥–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –≥–µ—Ä–æ—è, –π–æ–≥–æ —Ä–æ–ª—ñ —É –≥—Ä—ñ, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —â–æ–¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å–∫—ñ–ª—ñ–≤ —Ç–∞ –∑–∞–≥–∞–ª—å–Ω—ñ –ø–æ—Ä–∞–¥–∏ —â–æ–¥–æ –≥—Ä–∏ –∑–∞ —Ü—å–æ–≥–æ –≥–µ—Ä–æ—è."
    )

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–æ–º–ø—Ç –≤ —Å—Ç–∞–Ω—ñ –¥–ª—è –º–æ–∂–ª–∏–≤–æ–≥–æ –¥–µ–±–∞–≥—É
    await state.update_data(last_prompt=prompt)

    # –í–∏–∫–ª–∏–∫–∞—î–º–æ OpenAI API –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "You are a knowledgeable assistant for Mobile Legends players."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=1000,
            n=1,
            stop=None,
            temperature=0.7,
        )

        ai_reply = response.choices[0].message['content'].strip()

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        await bot.send_message(
            chat_id=message.chat.id,
            text=AI_RESPONSE_TEXT.format(response=ai_reply),
            parse_mode="HTML",
            reply_markup=get_generic_inline_keyboard()
        )

        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        await state.clear()

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–ª–∏–∫—É OpenAI API: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        await state.clear()

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ AI
@router.message(F.text.lower() == "—Å–∫–∞—Å—É–≤–∞—Ç–∏")
async def ai_cancel(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} —Å–∫–∞—Å—É–≤–∞–≤ –≤–∑–∞—î–º–æ–¥—ñ—é –∑ AI")

    await message.delete()
    await state.clear()

    await bot.send_message(
        chat_id=message.chat.id,
        text="–í–∑–∞—î–º–æ–¥—ñ—è –∑ AI —Å–∫–∞—Å–æ–≤–∞–Ω–∞.",
        reply_markup=get_generic_inline_keyboard()
    )
