# handlers/ai_handler.py

import logging
import openai
from aiogram import Router, F, Bot
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from config import settings
from keyboards.ai_menus import get_ai_menu_keyboard  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ AI –º–µ–Ω—é
from keyboards.menus import get_main_menu, MenuButton
from texts import (
    GENERIC_ERROR_MESSAGE_TEXT,
    AI_INTRO_TEXT,
    AI_RESPONSE_TEXT,
    UNKNOWN_COMMAND_TEXT,
)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ OpenAI API
openai.api_key = settings.OPENAI_API_KEY

# –°—Ç–≤–æ—Ä—é—î–º–æ Router –¥–ª—è AI
router = Router()

# –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞–Ω–∏ –¥–ª—è AI
class AIStates(StatesGroup):
    WAITING_FOR_QUERY = State()

@router.message(F.text == MenuButton.AI.value)
async def ai_intro_handler(message: Message, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "ü§ñ AI" —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é.
    """
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –æ–±—Ä–∞–≤ {message.text} —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é")

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≤—Å—Ç—É–ø–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –º–µ–Ω—é AI
    await message.answer(
        text=AI_INTRO_TEXT,
        reply_markup=get_ai_menu_keyboard()
    )

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await AIStates.WAITING_FOR_QUERY.set()

@router.message(AIStates.WAITING_FOR_QUERY)
async def ai_query_handler(message: Message, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ AI —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º.
    """
    user_query = message.text.strip()
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –∑–∞–ø–∏—Ç–∞–≤ AI: {user_query}")

    if not user_query:
        await message.answer(
            text="–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è AI.",
            reply_markup=get_ai_menu_keyboard()
        )
        return

    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "You are a knowledgeable assistant for Mobile Legends players."},
                {"role": "user", "content": user_query}
            ],
            max_tokens=1000,
            n=1,
            stop=None,
            temperature=0.7,
        )

        ai_reply = response.choices[0].message['content'].strip()

        await message.answer(
            text=AI_RESPONSE_TEXT.format(response=ai_reply),
            parse_mode="HTML",
            reply_markup=get_ai_menu_keyboard()
        )

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–ª–∏–∫—É OpenAI API: {e}")
        await message.answer(
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_ai_menu_keyboard()
        )

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await state.clear()
    await message.answer(
        text="–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
        reply_markup=get_main_menu()
    )
