# handlers/ai.py

from aiogram import Router, Bot
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import logging

from keyboards import get_generic_inline_keyboard
from texts import (
    AI_INTRO_TEXT,
    AI_RESPONSE_TEXT,
    USE_BUTTON_NAVIGATION_TEXT,
    # –î–æ–¥–∞–π—Ç–µ –≤—Å—ñ —ñ–Ω—à—ñ —Ç–µ–∫—Å—Ç–æ–≤—ñ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏ —Ç—É—Ç
)
from gpt_integration import get_gpt_response

logger = logging.getLogger(__name__)

router = Router()

class GPTStates(StatesGroup):
    GPT_MENU = State()
    GPT_ASK_QUESTION = State()

@router.message(commands=["gpt"])
async def cmd_gpt(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –∑–∞–ø–∏—Ç—É—î GPT")
    await message.delete()
    await bot.send_message(
        chat_id=message.chat.id,
        text=AI_INTRO_TEXT,
        reply_markup=get_generic_inline_keyboard()
    )
    await state.set_state(GPTStates.GPT_MENU)

@router.message(GPTStates.GPT_MENU)
async def handle_gpt_menu_buttons(message: Message, state: FSMContext, bot: Bot):
    user_choice = message.text
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –æ–±—Ä–∞–≤ '{user_choice}' –≤ –º–µ–Ω—é GPT")

    await message.delete()

    if user_choice == "ü§ñ –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è":
        await bot.send_message(
            chat_id=message.chat.id,
            text="üìù –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ –≥—Ä–∏:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(GPTStates.GPT_ASK_QUESTION)
    elif user_choice == "üìö –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ä–∞–¥–∏":
        await bot.send_message(
            chat_id=message.chat.id,
            text="üìù –í–≤–µ–¥—ñ—Ç—å —Ç–µ–º—É, –∑ —è–∫–æ—ó –≤–∏ —Ö–æ—Ç—ñ–ª–∏ –± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ä–∞–¥–∏:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(GPTStates.GPT_ASK_QUESTION)
    elif user_choice == "üß† –°–∫–ª–∞–¥–Ω—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è":
        await bot.send_message(
            chat_id=message.chat.id,
            text="üìù –í–≤–µ–¥—ñ—Ç—å —Å–∫–ª–∞–¥–Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, —ñ GPT —Å–ø—Ä–æ–±—É—î –π–æ–≥–æ —Ä–æ–∑–≤'—è–∑–∞—Ç–∏:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(GPTStates.GPT_ASK_QUESTION)
    elif user_choice == "üîô –ù–∞–∑–∞–¥":
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        await state.set_state(MenuStates.MAIN_MENU)
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        main_menu_text_formatted = MAIN_MENU_TEXT.format(user_first_name=message.from_user.first_name)
        main_message = await bot.send_message(
            chat_id=message.chat.id,
            text=main_menu_text_formatted,
            reply_markup=get_main_menu()
        )
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
        await state.update_data(bot_message_id=main_message.message_id)
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        data = await state.get_data()
        interactive_message_id = data.get('interactive_message_id')
        if interactive_message_id:
            try:
                await bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=interactive_message_id,
                    text=MAIN_MENU_DESCRIPTION,
                    reply_markup=get_generic_inline_keyboard()
                )
            except Exception as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        return
    else:
        # –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞
        await bot.send_message(
            chat_id=message.chat.id,
            text=UNKNOWN_COMMAND_TEXT,
            reply_markup=get_gpt_menu()
        )
        await state.set_state(MenuStates.GPT_MENU)

@router.message(GPTStates.GPT_ASK_QUESTION)
async def handle_gpt_question(message: Message, state: FSMContext, bot: Bot):
    question = message.text.strip()
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} —Å—Ç–∞–≤–∏—Ç—å –ø–∏—Ç–∞–Ω–Ω—è: {question}")

    await message.delete()

    if question:
        response = await get_gpt_response(question)
        await bot.send_message(
            chat_id=message.chat.id,
            text=AI_RESPONSE_TEXT.format(response=response),
            reply_markup=get_generic_inline_keyboard()
        )
    else:
        await bot.send_message(
            chat_id=message.chat.id,
            text="‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è.",
            reply_markup=get_generic_inline_keyboard()
        )

    # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é GPT
    await state.set_state(GPTStates.GPT_MENU)
