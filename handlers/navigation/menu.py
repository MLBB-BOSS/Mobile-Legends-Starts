# handlers/navigation/menu.py
import logging
from aiogram import Router, types, Bot
from aiogram.fsm.context import FSMContext
from states import MenuStates
from utils.shared_utils import safe_delete_message
from keyboards.menus import get_navigation_menu, MenuButton
from texts import NAVIGATION_MENU_TEXT, NAVIGATION_INTERACTIVE_TEXT

router = Router()
logger = logging.getLogger(__name__)

@router.message(MenuStates.MAIN_MENU, lambda message: message.text == "üß≠ –ù–∞–≤—ñ–≥–∞—Ü—ñ—è")
async def handle_navigation_transition(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–æ–≥–æ –º–µ–Ω—é."""
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –ø–µ—Ä–µ–π—à–æ–≤ –¥–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–æ–≥–æ –º–µ–Ω—é")
    
    await safe_delete_message(bot, message.chat.id, message.message_id)
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–æ–≥–æ –º–µ–Ω—é
    await state.set_state(MenuStates.NAVIGATION_MENU)
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–∏–º –º–µ–Ω—é
    await message.answer(
        text=NAVIGATION_MENU_TEXT,
        reply_markup=get_navigation_menu()
    )

@router.message(MenuStates.NAVIGATION_MENU)
async def handle_navigation_menu_buttons(message: types.Message, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –º–µ–Ω—é NAVIGATION_MENU.
    –û–±—Ä–æ–±–ª—è—î –≤—Å—ñ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–æ–≥–æ –º–µ–Ω—é
    """
    user_choice = message.text
    logger.info(f"[NAVIGATION_MENU] User {message.from_user.id} tapped: {user_choice}")

    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –ú–∞–ø–ø—ñ–Ω–≥ –∫–Ω–æ–ø–æ–∫ –¥–æ —Å—Ç–∞–Ω—ñ–≤ —ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    menu_options = {
        MenuButton.HEROES.value: (MenuStates.HEROES_MENU, "–í–∏ –ø–µ—Ä–µ–π—à–ª–∏ –¥–æ —Ä–æ–∑–¥—ñ–ª—É –≥–µ—Ä–æ—ó–≤"),
        MenuButton.TOURNAMENTS.value: (MenuStates.TOURNAMENTS_MENU, "–í–∏ –ø–µ—Ä–µ–π—à–ª–∏ –¥–æ —Ä–æ–∑–¥—ñ–ª—É —Ç—É—Ä–Ω—ñ—Ä—ñ–≤"),
        MenuButton.GUIDES.value: (MenuStates.GUIDES_MENU, "–í–∏ –ø–µ—Ä–µ–π—à–ª–∏ –¥–æ —Ä–æ–∑–¥—ñ–ª—É –≥–∞–π–¥—ñ–≤"),
        MenuButton.BUILDS.value: (MenuStates.BUILDS_MENU, "–í–∏ –ø–µ—Ä–µ–π—à–ª–∏ –¥–æ —Ä–æ–∑–¥—ñ–ª—É –±—ñ–ª–¥—ñ–≤"),
        MenuButton.TEAMS.value: (MenuStates.TEAMS_MENU, "–í–∏ –ø–µ—Ä–µ–π—à–ª–∏ –¥–æ —Ä–æ–∑–¥—ñ–ª—É –∫–æ–º–∞–Ω–¥"),
        MenuButton.CHALLENGE.value: (MenuStates.CHALLENGES_MENU, "–í–∏ –ø–µ—Ä–µ–π—à–ª–∏ –¥–æ —Ä–æ–∑–¥—ñ–ª—É —á–µ–ª–µ–Ω–¥–∂—ñ–≤"),
        MenuButton.BUST.value: (MenuStates.BUST_MENU, "–í–∏ –ø–µ—Ä–µ–π—à–ª–∏ –¥–æ —Ä–æ–∑–¥—ñ–ª—É –±—É—Å—Ç—É"),
        MenuButton.TRADING.value: (MenuStates.TRADING_MENU, "–í–∏ –ø–µ—Ä–µ–π—à–ª–∏ –¥–æ —Ä–æ–∑–¥—ñ–ª—É —Ç–æ—Ä–≥—ñ–≤–ª—ñ"),
        MenuButton.BACK.value: (MenuStates.MAIN_MENU, "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
    }

    if user_choice in menu_options:
        new_state, response_text = menu_options[user_choice]
        await state.set_state(new_state)
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É
        keyboard = get_navigation_menu()  # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –∫–ª–∞–≤—ñ–∞—Ç—É—Ä
        await message.answer(response_text, reply_markup=keyboard)
    else:
        await message.answer(
            "–§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ –∞–±–æ –Ω–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞",
            reply_markup=get_navigation_menu()
        )
