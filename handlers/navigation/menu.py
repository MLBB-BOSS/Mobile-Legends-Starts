# handlers/navigation/menu.py
import logging
from aiogram import Router, types, Bot
from aiogram.fsm.context import FSMContext
from states import MenuStates
from utils.shared_utils import safe_delete_message
from keyboards.menus import (
    MenuButton, 
    get_navigation_menu,
    get_heroes_menu,
    get_builds_menu,
    get_guides_menu,
    get_tournaments_menu,
    get_teams_menu,
    get_challenges_menu,
    get_bust_menu,
    get_trading_menu,
    get_main_menu
)

router = Router()
logger = logging.getLogger(__name__)

@router.message(MenuStates.MAIN_MENU, lambda message: message.text == MenuButton.NAVIGATION.value)
async def handle_navigation_transition(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–æ–≥–æ –º–µ–Ω—é."""
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –ø–µ—Ä–µ–π—à–æ–≤ –¥–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–æ–≥–æ –º–µ–Ω—é")
    
    await safe_delete_message(bot, message.chat.id, message.message_id)
    
    await state.set_state(MenuStates.NAVIGATION_MENU)
    await message.answer(
        "üß≠ –ù–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–µ –º–µ–Ω—é\n\n–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª, —è–∫–∏–π –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å:",
        reply_markup=get_navigation_menu()
    )

@router.message(MenuStates.NAVIGATION_MENU)
async def handle_navigation_menu_buttons(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–æ–≥–æ –º–µ–Ω—é."""
    user_choice = message.text
    logger.info(f"[NAVIGATION_MENU] User {message.from_user.id} tapped: {user_choice}")

    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –°–ª–æ–≤–Ω–∏–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π –∫–Ω–æ–ø–æ–∫ –¥–æ —Å—Ç–∞–Ω—ñ–≤ —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ–π —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä
    menu_options = {
        MenuButton.HEROES.value: (MenuStates.HEROES_MENU, get_heroes_menu, "–ú–µ–Ω—é –≥–µ—Ä–æ—ó–≤"),
        MenuButton.BUILDS.value: (MenuStates.BUILDS_MENU, get_builds_menu, "–ú–µ–Ω—é –±—ñ–ª–¥—ñ–≤"),
        MenuButton.GUIDES.value: (MenuStates.GUIDES_MENU, get_guides_menu, "–ú–µ–Ω—é –≥–∞–π–¥—ñ–≤"),
        MenuButton.TOURNAMENTS.value: (MenuStates.TOURNAMENTS_MENU, get_tournaments_menu, "–ú–µ–Ω—é —Ç—É—Ä–Ω—ñ—Ä—ñ–≤"),
        MenuButton.TEAMS.value: (MenuStates.TEAMS_MENU, get_teams_menu, "–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥"),
        MenuButton.CHALLENGES.value: (MenuStates.CHALLENGES_MENU, get_challenges_menu, "–ú–µ–Ω—é —á–µ–ª–µ–Ω–¥–∂—ñ–≤"),
        MenuButton.BUST.value: (MenuStates.BUST_MENU, get_bust_menu, "–ú–µ–Ω—é –±—É—Å—Ç—É"),
        MenuButton.TRADING.value: (MenuStates.TRADING_MENU, get_trading_menu, "–ú–µ–Ω—é —Ç–æ—Ä–≥—ñ–≤–ª—ñ"),
        MenuButton.BACK.value: (MenuStates.MAIN_MENU, get_main_menu, "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
    }

    if user_choice in menu_options:
        new_state, get_keyboard, text = menu_options[user_choice]
        await state.set_state(new_state)
        await message.answer(text, reply_markup=get_keyboard())
    else:
        logger.warning(f"–ù–µ–≤—ñ–¥–æ–º–∞ –æ–ø—Ü—ñ—è –º–µ–Ω—é: {user_choice}")
        await message.answer(
            "–ù–µ–≤—ñ–¥–æ–º–∞ –æ–ø—Ü—ñ—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é.",
            reply_markup=get_navigation_menu()
        )

# –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—ñ–¥–º–µ–Ω—é –º–æ–∂—É—Ç—å –±—É—Ç–∏ –¥–æ–¥–∞–Ω—ñ —Ç—É—Ç –∞–±–æ –≤ –æ–∫—Ä–µ–º–∏—Ö —Ñ–∞–π–ª–∞—Ö
