# handlers/hero/content_handler.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from ..base_handler import BaseHandler
from database.repositories import HeroRepository
from services.s3_service import S3Service
from models import Hero, HeroMedia, MediaType

class HeroContentHandler(BaseHandler):
    def __init__(self):
        super().__init__()
        self.hero_repository = HeroRepository()
        self.s3_service = S3Service()

    async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –≥–µ—Ä–æ—è"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –≥–µ—Ä–æ—è –∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –∫–æ–º–∞–Ω–¥–∏
            if not context.args or len(context.args) < 1:
                raise ValueError("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —ñ–º'—è –≥–µ—Ä–æ—è")
            
            hero_name = " ".join(context.args)
            
            with db.get_session() as session:
                hero = self.hero_repository.get_with_media(session, hero_name)
                
                if not hero:
                    await update.message.reply_text("‚ùå –ì–µ—Ä–æ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                    return

                # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç—É
                keyboard = [
                    [
                        InlineKeyboardButton("üì∏ –°–∫—Ä—ñ–Ω—à–æ—Ç–∏", callback_data=f"hero_media_{hero.id}_screenshot"),
                        InlineKeyboardButton("üé• –í—ñ–¥–µ–æ", callback_data=f"hero_media_{hero.id}_video")
                    ],
                    [InlineKeyboardButton("üìñ –ì–∞–π–¥–∏", callback_data=f"hero_guides_{hero.id}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≥–µ—Ä–æ—è
                message = (
                    f"ü¶∏‚Äç‚ôÇÔ∏è *{hero.name}*\n"
                    f"–†–æ–ª—å: {hero.role.value}\n"
                    f"–°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å: {'‚≠ê' * hero.difficulty}\n\n"
                    f"{hero.description}\n\n"
                    "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É:"
                )
                
                await update.message.reply_text(
                    message,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )

        except Exception as e:
            await self.handle_error(update, context, e)

    async def handle_media_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–æ–±–∫–∞ callback –∑–∞–ø–∏—Ç—É –¥–ª—è –º–µ–¥—ñ–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
        query = update.callback_query
        await query.answer()
        
        try:
            _, hero_id, media_type = query.data.split('_')
            
            with db.get_session() as session:
                hero = self.hero_repository.get_with_media(session, int(hero_id))
                if not hero:
                    await query.message.edit_text("‚ùå –ì–µ—Ä–æ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                    return

                media_items = [m for m in hero.media if m.media_type == MediaType(media_type)]
                
                if not media_items:
                    await query.message.edit_text(
                        f"–î–ª—è –≥–µ—Ä–æ—è {hero.name} –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î {media_type} –∫–æ–Ω—Ç–µ–Ω—Ç—É"
                    )
                    return

                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –º–µ–¥—ñ–∞ –∫–æ–Ω—Ç–µ–Ω—Ç
                for media in media_items[:5]:  # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–µ–¥—ñ–∞
                    if media.media_type == MediaType.VIDEO:
                        await query.message.reply_video(media.url)
                    else:
                        await query.message.reply_photo(media.url)

        except Exception as e:
            await self.handle_error(update, context, e)
