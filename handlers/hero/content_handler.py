from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, CallbackQueryHandler
from telegram.constants import ParseMode
import logging
from typing import List, Optional, Tuple
from datetime import datetime

from services.hero_service import HeroService
from services.s3_service import S3Service
from models.hero_media import HeroMedia

logger = logging.getLogger(__name__)

class HeroContentHandler:
    def __init__(self, hero_service: HeroService, s3_service: S3Service):
        self.hero_service = hero_service
        self.s3_service = s3_service
        self.ITEMS_PER_PAGE = 5

    async def handle_media_upload(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–¥—ñ–∞ —Ñ–∞–π–ª—ñ–≤"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ñ–æ—Ç–æ
            if not update.message.photo:
                await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é –≥–µ—Ä–æ—è.")
                return

            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–π–±—ñ–ª—å—à–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É —Ñ–æ—Ç–æ
            photo = update.message.photo[-1]
            
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–π–ª—É
            file = await context.bot.get_file(photo.file_id)
            file_data = await file.download_as_bytearray()

            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è hero_id –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            hero_id = context.user_data.get('current_hero_id')
            if not hero_id:
                await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å –≥–µ—Ä–æ—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ /select_hero")
                return

            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–¥—ñ–∞
            hero_media = await self.hero_service.add_hero_media(
                hero_id=hero_id,
                file_data=file_data,
                media_type='screenshot',
                author_id=str(update.effective_user.id),
                author_nickname=update.effective_user.username or update.effective_user.first_name,
                metadata={
                    'telegram_file_id': photo.file_id,
                    'width': photo.width,
                    'height': photo.height
                }
            )

            if hero_media:
                keyboard = self._create_media_keyboard(hero_media)
                await update.message.reply_text(
                    "‚úÖ –§–æ—Ç–æ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ! –û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.",
                    reply_markup=keyboard
                )
            else:
                await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–æ—Ç–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

        except Exception as e:
            logger.error(f"Error handling media upload: {e}")
            await update.message.reply_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

    async def handle_media_navigation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ –º–µ–¥—ñ–∞"""
        try:
            query = update.callback_query
            action = query.data.split('_')[1]

            if action == "nav":
                new_index = int(query.data.split('_')[2])
                hero_id = context.user_data.get('current_hero_id')
                
                if not hero_id:
                    await query.answer("–°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å –≥–µ—Ä–æ—è")
                    return

                media_list = await self.hero_service.get_hero_media(hero_id)
                
                if not media_list:
                    await query.answer("–ú–µ–¥—ñ–∞ –∫–æ–Ω—Ç–µ–Ω—Ç –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")
                    return

                start_idx = new_index * self.ITEMS_PER_PAGE
                end_idx = start_idx + self.ITEMS_PER_PAGE
                current_page = media_list[start_idx:end_idx]
                
                keyboard = self._create_media_navigation_keyboard(
                    new_index,
                    len(media_list),
                    self.ITEMS_PER_PAGE
                )

                media_text = self._format_media_list(current_page)
                
                await query.message.edit_text(
                    media_text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.HTML
                )
                await query.answer()

            elif action == "vote":
                media_id = query.data.split('_')[2]
                success = await self.hero_service.vote_for_media(
                    media_id,
                    str(update.effective_user.id)
                )
                
                if success:
                    await query.answer("–í–∞—à –≥–æ–ª–æ—Å –≤—Ä–∞—Ö–æ–≤–∞–Ω–æ!")
                else:
                    await query.answer("–í–∏ –≤–∂–µ –≥–æ–ª–æ—Å—É–≤–∞–ª–∏ –∑–∞ —Ü–µ –º–µ–¥—ñ–∞")

            elif action == "delete":
                media_id = query.data.split('_')[2]
                if await self._can_delete_media(update.effective_user.id, media_id):
                    await self._delete_media(media_id)
                    await query.message.edit_text("–ú–µ–¥—ñ–∞ –∫–æ–Ω—Ç–µ–Ω—Ç –≤–∏–¥–∞–ª–µ–Ω–æ")
                else:
                    await query.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ü—å–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É")

        except Exception as e:
            logger.error(f"Error in media navigation: {e}")
            await query.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

    def _create_media_keyboard(self, media: HeroMedia) -> InlineKeyboardMarkup:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –º–µ–¥—ñ–∞"""
        keyboard = [
            [
                InlineKeyboardButton("üëç –ì–æ–ª–æ—Å—É–≤–∞—Ç–∏", callback_data=f"media_vote_{media.id}"),
                InlineKeyboardButton("üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"media_delete_{media.id}")
            ],
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"media_stats_{media.id}")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)

    def _create_media_navigation_keyboard(self, 
                                       current_page: int,
                                       total_items: int,
                                       items_per_page: int) -> InlineKeyboardMarkup:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ –º–µ–¥—ñ–∞"""
        total_pages = (total_items + items_per_page - 1) // items_per_page
        keyboard = []

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
        nav_buttons = []
        if current_page > 0:
            nav_buttons.append(
                InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"media_nav_{current_page-1}")
            )
        nav_buttons.append(
            InlineKeyboardButton(f"{current_page + 1}/{total_pages}", callback_data="media_page")
        )
        if current_page < total_pages - 1:
            nav_buttons.append(
                InlineKeyboardButton("‚û°Ô∏è", callback_data=f"media_nav_{current_page+1}")
            )
        keyboard.append(nav_buttons)

        return InlineKeyboardMarkup(keyboard)

    def _format_media_list(self, media_list: List[HeroMedia]) -> str:
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –º–µ–¥—ñ–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        if not media_list:
            return "–ú–µ–¥—ñ–∞ –∫–æ–Ω—Ç–µ–Ω—Ç –≤—ñ–¥—Å—É—Ç–Ω—ñ–π"

        result = ["<b>–ú–µ–¥—ñ–∞ –∫–æ–Ω—Ç–µ–Ω—Ç:</b>\n"]
        for i, media in enumerate(media_list, 1):
            status = "‚úÖ" if media.approved else "‚è≥"
            result.append(
                f"{i}. {status} –ê–≤—Ç–æ—Ä: {media.author_nickname}\n"
                f"   üëç {media.votes} –≥–æ–ª–æ—Å—ñ–≤\n"
                f"   üìÖ {media.added_at.strftime('%d.%m.%Y %H:%M')}\n"
            )
        return "\n".join(result)

    async def _can_delete_media(self, user_id: int, media_id: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –º–µ–¥—ñ–∞"""
        # TODO: –î–æ–¥–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        media = await self.hero_service.get_hero_media_by_id(media_id)
        return media and str(user_id) == media.author_id

    async def _delete_media(self, media_id: str) -> bool:
        """–í–∏–¥–∞–ª–µ–Ω–Ω—è –º–µ–¥—ñ–∞"""
        media = await self.hero_service.get_hero_media_by_id(media_id)
        if media:
            # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∑ S3
            file_key = self.s3_service.get_file_key_from_url(media.url)
            if file_key:
                await self.s3_service.delete_file(file_key)
            
            # –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
            return await self.hero_service.delete_hero_media(media_id)
        return False

    def get_handlers(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤"""
        return [
            MessageHandler(filters.PHOTO, self.handle_media_upload),
            CallbackQueryHandler(self.handle_media_navigation, pattern='^media_')
        ]
