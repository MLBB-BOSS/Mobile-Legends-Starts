# handlers/hero/guide_handler.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from ..base_handler import BaseHandler
from database.repositories import HeroRepository
from models import HeroGuide

class HeroGuideHandler(BaseHandler):
    def __init__(self):
        super().__init__()
        self.hero_repository = HeroRepository()

    async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –≥–∞–π–¥–∞–º–∏ –≥–µ—Ä–æ—ó–≤"""
        try:
            if not context.args or len(context.args) < 1:
                raise ValueError("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —ñ–º'—è –≥–µ—Ä–æ—è")
            
            hero_name = " ".join(context.args)
            
            with db.get_session() as session:
                hero = self.hero_repository.get_with_guides(session, hero_name)
                
                if not hero:
                    await update.message.reply_text("‚ùå –ì–µ—Ä–æ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                    return

                if not hero.guides:
                    keyboard = [[
                        InlineKeyboardButton(
                            "üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ –≥–∞–π–¥", 
                            callback_data=f"create_guide_{hero.id}"
                        )
                    ]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await update.message.reply_text(
                        f"–î–ª—è –≥–µ—Ä–æ—è {hero.name} –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –≥–∞–π–¥—ñ–≤.\n"
                        "–•–æ—á–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–µ—Ä—à–∏–π?",
                        reply_markup=reply_markup
                    )
                    return

                # –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ –≥–∞–π–¥—ñ–≤
                guides_text = f"üìö –ì–∞–π–¥–∏ –¥–ª—è –≥–µ—Ä–æ—è {hero.name}:\n\n"
                for guide in hero.guides:
                    guides_text += (
                        f"üìñ {guide.title}\n"
                        f"üë§ –ê–≤—Ç–æ—Ä: {guide.author.username}\n"
                        f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {guide.rating}\n\n"
                    )

                keyboard = [
                    [InlineKeyboardButton("üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ –≥–∞–π–¥", callback_data=f"create_guide_{hero.id}")],
                    [InlineKeyboardButton("üîç –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ", callback_data=f"view_guides_{hero.id}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    guides_text,
                    reply_markup=reply_markup
                )

        except Exception as e:
            await self.handle_error(update, context, e)

    async def handle_create_guide(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–æ–±–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –≥–∞–π–¥—É"""
        query = update.callback_query
        await query.answer()
        
        try:
            _, hero_id = query.data.split('_')
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–∞–π–¥—É
            context.user_data['creating_guide_for'] = int(hero_id)
            
            await query.message.edit_text(
                "üìù –î–∞–≤–∞–π—Ç–µ —Å—Ç–≤–æ—Ä–∏–º–æ –≥–∞–π–¥!\n"
                "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–∞–∑–≤—É –≥–∞–π–¥—É –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º."
            )
            
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫ - –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –≥–∞–π–¥—É
            return 'WAITING_GUIDE_TITLE'

        except Exception as e:
            await self.handle_error(update, context, e)
