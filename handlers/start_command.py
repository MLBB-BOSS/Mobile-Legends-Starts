from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from services.states import RegistrationStates
from services.database import async_session, User
from sqlalchemy import select
import logging
import re

logger = logging.getLogger(__name__)
router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    try:
        async with async_session() as session:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
            result = await session.execute(
                select(User).where(User.telegram_id == message.from_user.id)
            )
            user = result.scalar_one_or_none()
            
            if user and user.is_registered:
                await message.answer(
                    f"–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º, {user.nickname}! üëã\n"
                    "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:"
                )
            else:
                await message.answer(
                    "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ MLS Bot! üéÆ\n"
                    "–î–∞–≤–∞–π—Ç–µ —Ä–æ–∑–ø–æ—á–Ω–µ–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é.\n"
                    "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω—ñ–∫–Ω–µ–π–º (–º—ñ–Ω—ñ–º—É–º 3 —Å–∏–º–≤–æ–ª–∏):"
                )
                await state.set_state(RegistrationStates.waiting_for_nickname)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–æ–º–∞–Ω–¥–∏ start: {e}")
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

@router.message(RegistrationStates.waiting_for_nickname)
async def process_nickname(message: Message, state: FSMContext):
    nickname = message.text.strip()
    
    if len(nickname) < 3:
        await message.answer("–ù—ñ–∫–Ω–µ–π–º –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 3 —Å–∏–º–≤–æ–ª–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(nickname=nickname)
    await message.answer(
        "–ß—É–¥–æ–≤–æ! ‚ú®\n"
        "–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É:"
    )
    await state.set_state(RegistrationStates.waiting_for_email)

@router.message(RegistrationStates.waiting_for_email)
async def process_email(message: Message, state: FSMContext):
    email = message.text.strip().lower()
    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    
    if not re.match(email_pattern, email):
        await message.answer("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    
    try:
        async with async_session() as session:
            result = await session.execute(
                select(User).where(User.email == email)
            )
            if result.scalar_one_or_none():
                await message.answer("–¶–µ–π email –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —ñ–Ω—à–∏–π:")
                return
            
            await state.update_data(email=email)
            await message.answer(
                "–ß—É–¥–æ–≤–æ! üìß\n"
                "–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à ID –∑ Mobile Legends (—Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏):"
            )
            await state.set_state(RegistrationStates.waiting_for_game_id)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ email: {e}")
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@router.message(RegistrationStates.waiting_for_game_id)
async def process_game_id(message: Message, state: FSMContext):
    game_id = message.text.strip()
    
    if not game_id.isdigit():
        await message.answer("ID –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    
    try:
        async with async_session() as session:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ game_id –≤–∂–µ —ñ—Å–Ω—É—î
            result = await session.execute(
                select(User).where(User.game_id == game_id)
            )
            if result.scalar_one_or_none():
                await message.answer("–¶–µ–π ID –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —ñ–Ω—à–∏–π:")
                return
            
            user_data = await state.get_data()
            new_user = User(
                telegram_id=message.from_user.id,
                nickname=user_data['nickname'],
                email=user_data['email'],
                game_id=game_id,
                is_registered=True
            )
            
            session.add(new_user)
            await session.commit()
            
            await message.answer(
                f"üéâ –í—ñ—Ç–∞—î–º–æ, {user_data['nickname']}!\n"
                "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
                "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –≤—Å—ñ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ –±–æ—Ç–∞!"
            )
            await state.clear()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
