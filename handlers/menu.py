# handlers/menu.py

from aiogram import Router, types
from aiogram.types import InputMediaPhoto
from keyboards.menus import main_menu, statistics_inline
from utils.charts import generate_activity_chart
import logging

router = Router()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /start
@router.message(lambda message: message.text == "/start" or message.text == "üîô –ù–∞–∑–∞–¥")
async def show_main_menu(message: types.Message):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É."""
    user_id = message.from_user.id
    logger.info(f"User {user_id} opened the main menu")

    try:
        await message.delete()
        await message.answer("üóÇ *–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é*", reply_markup=main_menu(), parse_mode="Markdown")
        await message.answer("üìä –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=statistics_inline())
    except Exception as e:
        logger.error(f"Failed to display main menu for user {user_id}: {e}")

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@router.callback_query(lambda c: c.data in ["general_activity", "game_stats", "activity_chart"])
async def process_statistics_callback(callback: types.CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    user_id = callback.from_user.id
    data = callback.data
    logger.info(f"User {user_id} pressed {data} in statistics menu")

    if data == "general_activity":
        text = "üéØ –ó–∞–≥–∞–ª—å–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: 85% –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å"
    elif data == "game_stats":
        text = "üéÆ –Ü–≥—Ä–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n- –ü–µ—Ä–µ–º–æ–≥: 120\n- –ü–æ—Ä–∞–∑–æ–∫: 30"
    elif data == "activity_chart":
        try:
            chart = generate_activity_chart()
            await callback.message.edit_media(
                media=InputMediaPhoto(media=chart, caption="üìà –í–∞—à –≥—Ä–∞—Ñ—ñ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"),
                reply_markup=statistics_inline()
            )
            await callback.answer()
            return
        except Exception as e:
            logger.error(f"Failed to generate/send activity chart for user {user_id}: {e}")
            text = "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥—Ä–∞—Ñ—ñ–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."

    try:
        await callback.message.edit_text(text, reply_markup=statistics_inline())
    except Exception as e:
        logger.error(f"Failed to update statistics menu for user {user_id}: {e}")
        await callback.message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –º–µ–Ω—é.")
    
    await callback.answer()

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–µ–≤—ñ–¥–æ–º–∏—Ö callback'—ñ–≤
@router.callback_query()
async def handle_unknown_callback(callback: types.CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –Ω–µ–≤—ñ–¥–æ–º—ñ callback'–∏."""
    user_id = callback.from_user.id
    logger.warning(f"User {user_id} pressed unknown callback: {callback.data}")
    await callback.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó.")
