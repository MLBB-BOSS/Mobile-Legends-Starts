# handlers/user/achievement_handler.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from ..base_handler import BaseHandler
from database.repositories import UserRepository, AchievementRepository

class AchievementHandler(BaseHandler):
    def __init__(self):
        super().__init__()
        self.user_repository = UserRepository()
        self.achievement_repository = AchievementRepository()

    async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–æ—Å—è–≥–Ω–µ–Ω—å"""
        try:
            with db.get_session() as session:
                user = self.user_repository.get_by_telegram_id(
                    session, 
                    update.effective_user.id
                )
                
                if not user:
                    await update.message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                    return

                achievements = self.achievement_repository.get_user_achievements(
                    session, 
                    user.id
                )

                if not achievements:
                    await update.message.reply_text(
                        "üèÜ –£ –≤–∞—Å –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –¥–æ—Å—è–≥–Ω–µ–Ω—å.\n"
                        "–ë–µ—Ä—ñ—Ç—å —É—á–∞—Å—Ç—å –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö, —â–æ–± –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –Ω–æ–≤—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è!"
                    )
                    return

                # –ì—Ä—É–ø—É—î–º–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
                achievement_text = "üèÜ *–í–∞—à—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è:*\n\n"
                total_points = 0

                # –°–æ—Ä—Ç—É—î–º–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –æ—á–∫—ñ–≤
                sorted_achievements = sorted(
                    achievements, 
                    key=lambda x: x.points, 
                    reverse=True
                )

                for achievement in sorted_achievements:
                    achievement_text += (
                        f"‚Ä¢ {achievement.name} (+{achievement.points} –æ—á–∫—ñ–≤)\n"
                        f"  _{achievement.description}_\n\n"
                    )
                    total_points += achievement.points

                achievement_text += f"\nüìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ—á–∫—ñ–≤: {total_points}"

                # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
                keyboard = [
                    [
                        InlineKeyboardButton(
                            "üéØ –î–æ—Å—Ç—É–ø–Ω—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è", 
                            callback_data="available_achievements"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            "üèÖ –†–µ–π—Ç–∏–Ω–≥ –≥—Ä–∞–≤—Ü—ñ–≤", 
                            callback_data="achievements_leaderboard"
                        )
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await update.message.reply_text(
                    achievement_text,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )

        except Exception as e:
            await self.handle_error(update, context, e)

    async def handle_available_achievements(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–æ—Å—è–≥–Ω–µ–Ω—å"""
        query = update.callback_query
        await query.answer()

        try:
            with db.get_session() as session:
                user = self.user_repository.get_by_telegram_id(
                    session, 
                    update.effective_user.id
                )
                
                all_achievements = self.achievement_repository.get_all(session)
                user_achievements = set(user.achievements)
                
                # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è, —è–∫—ñ —â–µ –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω—ñ
                available = [a for a in all_achievements if a not in user_achievements]
                
                if not available:
                    await query.message.edit_text(
                        "üéâ –í—ñ—Ç–∞—î–º–æ! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è!"
                    )
                    return

                text = "üéØ *–î–æ—Å—Ç—É–ø–Ω—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è:*\n\n"
                for achievement in available:
                    text += (
                        f"‚Ä¢ {achievement.name} (+{achievement.points} –æ—á–∫—ñ–≤)\n"
                        f"  _{achievement.description}_\n\n"
                    )

                keyboard = [[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_achievements")
                ]]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await query.message.edit_text(
                    text,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )

        except Exception as e:
            await self.handle_error(update, context, e)
