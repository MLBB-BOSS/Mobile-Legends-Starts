# handlers/moderation_handler.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler
from telegram.error import TelegramError
import logging
from typing import List, Dict, Optional
from datetime import datetime
from services.hero_service import HeroService
from models.hero_media import HeroMedia

logger = logging.getLogger(__name__)

class ModerationHandler:
    def __init__(self, hero_service: HeroService, moderator_ids: List[str]):
        self.hero_service = hero_service
        self.moderator_ids = set(moderator_ids)  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ set –¥–ª—è —à–≤–∏–¥—à–æ–≥–æ –ø–æ—à—É–∫—É
        self.pending_media: Dict[str, List[HeroMedia]] = {}
        self.ITEMS_PER_PAGE = 10

    def is_moderator(self, user_id: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id in self.moderator_ids

    async def moderation_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–∞–Ω–µ–ª—ñ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó"""
        try:
            user_id = str(update.effective_user.id)
            if not self.is_moderator(user_id):
                await update.message.reply_text(
                    "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞."
                )
                return

            # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
            stats = await self.hero_service.get_moderation_stats()
            pending_media_list = await self.hero_service.get_pending_media(
                limit=self.ITEMS_PER_PAGE
            )

            if not pending_media_list:
                stats_text = (
                    "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó:\n"
                    f"‚úÖ –°—Ö–≤–∞–ª–µ–Ω–æ —Å—å–æ–≥–æ–¥–Ω—ñ: {stats['approved_today']}\n"
                    f"‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–æ —Å—å–æ–≥–æ–¥–Ω—ñ: {stats['rejected_today']}\n"
                    f"‚è≥ –û—á—ñ–∫—É—é—Ç—å –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {stats['pending_total']}\n\n"
                    "–ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–º–∞—î –º–µ–¥—ñ–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó."
                )
                await update.message.reply_text(stats_text)
                return

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º–µ–¥—ñ–∞ –≤ –∫–µ—à
            self.pending_media[user_id] = pending_media_list
            context.user_data['moderation_index'] = 0
            context.user_data['moderation_start_time'] = datetime.utcnow()

            await self._show_current_media(update, context, user_id)

        except Exception as e:
            logger.error(f"Error in moderation panel: {e}")
            await update.message.reply_text(
                "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ø–∞–Ω–µ–ª—ñ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó."
            )

    async def handle_moderation_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –¥—ñ–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
        try:
            query = update.callback_query
            user_id = str(update.effective_user.id)

            if not self.is_moderator(user_id):
                await query.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.")
                return

            action = query.data.split('_')[1]
            index = context.user_data.get('moderation_index', 0)
            media_list = self.pending_media.get(user_id, [])

            if not media_list:
                await query.answer("–°–ø–∏—Å–æ–∫ –º–µ–¥—ñ–∞ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
                return

            media = media_list[index]

            if action in ["approve", "reject"]:
                reason = None
                if action == "reject":
                    # –ó–∞–ø–∏—Ç—É—î–º–æ –ø—Ä–∏—á–∏–Ω—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
                    context.user_data['awaiting_rejection_reason'] = media.id
                    keyboard = [
                        [InlineKeyboardButton(reason, callback_data=f"reason_{i}")]
                        for i, reason in enumerate([
                            "–ù–µ—è–∫—ñ—Å–Ω–µ —Ñ–æ—Ç–æ", "–ù–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç",
                            "–ü–æ—Ä—É—à–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª", "–°–ø–∞–º"
                        ])
                    ]
                    await query.edit_message_reply_markup(
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                    return

                result = await self._process_moderation(
                    media_id=media.id,
                    action=action,
                    moderator_id=user_id,
                    reason=reason
                )
                
                if result:
                    # –í–∏–¥–∞–ª—è—î–º–æ –æ–±—Ä–æ–±–ª–µ–Ω–µ –º–µ–¥—ñ–∞ –∑ –∫–µ—à—É
                    media_list.pop(index)
                    if not media_list:
                        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–æ–≤—É –ø–æ—Ä—Ü—ñ—é –º–µ–¥—ñ–∞
                        new_media = await self.hero_service.get_pending_media(
                            limit=self.ITEMS_PER_PAGE
                        )
                        if new_media:
                            self.pending_media[user_id] = new_media
                            context.user_data['moderation_index'] = 0
                        else:
                            await query.edit_message_text("–ú–æ–¥–µ—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                            return

            elif action == "next":
                if index < len(media_list) - 1:
                    context.user_data['moderation_index'] += 1
                else:
                    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω—É –ø–æ—Ä—Ü—ñ—é –º–µ–¥—ñ–∞
                    new_media = await self.hero_service.get_pending_media(
                        limit=self.ITEMS_PER_PAGE,
                        offset=len(media_list)
                    )
                    if new_media:
                        self.pending_media[user_id].extend(new_media)
                        context.user_data['moderation_index'] += 1
                    else:
                        await query.answer("–¶–µ –æ—Å—Ç–∞–Ω–Ω—î –º–µ–¥—ñ–∞.")
                        return

            elif action == "prev":
                if index > 0:
                    context.user_data['moderation_index'] -= 1
                else:
                    await query.answer("–¶–µ –ø–µ—Ä—à–µ –º–µ–¥—ñ–∞.")
                    return

            await self._show_current_media(update, context, user_id)

        except Exception as e:
            logger.error(f"Error in moderation action: {e}")
            await query.answer("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥—ñ—ó.")

    async def _process_moderation(self, 
                                media_id: str, 
                                action: str, 
                                moderator_id: str,
                                reason: Optional[str] = None) -> bool:
        """–û–±—Ä–æ–±–∫–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ–π–Ω–æ—ó –¥—ñ—ó"""
        try:
            if action == "approve":
                result = await self.hero_service.approve_media(
                    media_id=media_id,
                    moderator_id=moderator_id
                )
            else:
                result = await self.hero_service.reject_media(
                    media_id=media_id,
                    moderator_id=moderator_id,
                    reason=reason
                )
            return result
        except Exception as e:
            logger.error(f"Error processing moderation action: {e}")
            return False

    async def _show_current_media(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: str):
        """–ü–æ–∫–∞–∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º–µ–¥—ñ–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó"""
        try:
            index = context.user_data.get('moderation_index', 0)
            media_list = self.pending_media.get(user_id, [])

            if not media_list:
                if update.callback_query:
                    await update.callback_query.edit_message_text("–°–ø–∏—Å–æ–∫ –º–µ–¥—ñ–∞ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
                else:
                    await update.message.reply_text("–°–ø–∏—Å–æ–∫ –º–µ–¥—ñ–∞ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
                return

            media = media_list[index]

            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏", callback_data="mod_approve"),
                    InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data="mod_reject"),
                ],
                [
                    InlineKeyboardButton("‚¨ÖÔ∏è", callback_data="mod_prev"),
                    InlineKeyboardButton(f"{index + 1}/{len(media_list)}", 
                                       callback_data="mod_count"),
                    InlineKeyboardButton("‚û°Ô∏è", callback_data="mod_next"),
                ],
            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            caption = (
                f"üì∏ –ê–≤—Ç–æ—Ä: @{media.author_nickname}\n"
                f"üóì –î–æ–¥–∞–Ω–æ: {media.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"üìù –¢–∏–ø: {media.media_type}\n"
                f"üÜî Media ID: {media.id}\n\n"
                f"‚ÑπÔ∏è –ú–µ—Ç–∞–¥–∞–Ω—ñ:\n{self._format_metadata(media.metadata)}"
            )

            try:
                if update.callback_query:
                    await update.callback_query.edit_message_media(
                        media=InputMediaPhoto(
                            media=media.url,
                            caption=caption
                        ),
                        reply_markup=reply_markup
                    )
                else:
                    await context.bot.send_photo(
                        chat_id=update.effective_chat.id,
                        photo=media.url,
                        caption=caption,
                        reply_markup=reply_markup
                    )
            except TelegramError as e:
                logger.error(f"Telegram error showing media: {e}")
                # –°–ø—Ä–æ–±—É—î–º–æ –ø–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –º–µ–¥—ñ–∞
                media_list.pop(index)
                await self._show_current_media(update, context, user_id)

        except Exception as e:
            logger.error(f"Error showing media: {e}")
            if update.callback_query:
                await update.callback_query.answer("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ –º–µ–¥—ñ–∞.")

    def _format_metadata(self, metadata: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        return '\n'.join(f"- {k}: {v}" for k, v in metadata.items())

    def get_handlers(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó"""
        return [
            CommandHandler('moderation', self.moderation_panel),
            CallbackQueryHandler(self.handle_moderation_action, pattern='^mod_'),
            CallbackQueryHandler(self.handle_moderation_action, pattern='^reason_'),
        ]
