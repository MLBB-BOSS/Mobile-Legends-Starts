from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import Optional
import logging

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–∞—à—ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
from keyboards.main_menu import MainMenu
from keyboards.navigation import (
    HeroesMenu,
    BuildsMenu,
    GuidesMenu,
    StatisticsMenu
)
from keyboards.cabinet import (
    ProfileMenu,
    SettingsMenu,
    AchievementsMenu
)

logger = logging.getLogger(__name__)

router = Router(name="menu_router")

class MenuStates(StatesGroup):
    main = State()
    heroes = State()
    builds = State()
    guides = State()
    statistics = State()
    profile = State()
    settings = State()
    achievements = State()

class MenuNavigator:
    def __init__(self):
        self.menus = {
            'main': MainMenu(),
            'heroes': HeroesMenu(),
            'builds': BuildsMenu(),
            'guides': GuidesMenu(),
            'statistics': StatisticsMenu(),
            'profile': ProfileMenu(),
            'settings': SettingsMenu(),
            'achievements': AchievementsMenu()
        }

    async def get_menu(self, menu_name: str, user_id: Optional[int] = None) -> tuple:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É —Ç–∞ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ–Ω—é"""
        menu = self.menus.get(menu_name)
        if not menu:
            raise ValueError(f"–ù–µ–≤—ñ–¥–æ–º–µ –º–µ–Ω—é: {menu_name}")
        
        keyboard = await menu.get_keyboard(user_id)
        text = await menu.get_text(user_id)
        return keyboard, text

menu_navigator = MenuNavigator()

@router.message(Command("menu"))
@router.message(F.text == "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
async def show_main_menu(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
    try:
        keyboard, text = await menu_navigator.get_menu('main')
        await state.set_state(MenuStates.main)
        await message.answer(text, reply_markup=keyboard)
        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {message.from_user.id}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@router.callback_query(F.data.startswith("menu_"))
async def handle_menu_navigation(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ –º–µ–Ω—é"""
    try:
        action = callback.data.split('_')[1]
        user_id = callback.from_user.id
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ç–∞–∫–∏–π –ø—É–Ω–∫—Ç –º–µ–Ω—é
        if action not in menu_navigator.menus:
            await callback.answer("–¶–µ–π —Ä–æ–∑–¥—ñ–ª –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ!")
            return

        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É —Ç–∞ —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –º–µ–Ω—é
        keyboard, text = await menu_navigator.get_menu(action, user_id)
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –º–µ–Ω—é
        await state.set_state(getattr(MenuStates, action))
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–æ–≤–∏–º –º–µ–Ω—é
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –ø–µ—Ä–µ–π—à–æ–≤ –¥–æ –º–µ–Ω—é {action}")
    
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ –º–µ–Ω—é: {e}")
        await callback.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", show_alert=True)

@router.callback_query(F.data == "menu_back")
async def handle_menu_back(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –º–µ–Ω—é"""
    try:
        current_state = await state.get_state()
        user_id = callback.from_user.id

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –º–µ–Ω—é
        previous_menu = 'main'  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É —Ç–∞ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –º–µ–Ω—é
        keyboard, text = await menu_navigator.get_menu(previous_menu, user_id)
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞–Ω
        await state.set_state(MenuStates.main)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –º–µ–Ω—é")
    
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –º–µ–Ω—é: {e}")
        await callback.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", show_alert=True)

# –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –¥—ñ–π –≤ –º–µ–Ω—é
@router.callback_query(F.data.startswith("hero_"))
async def handle_hero_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –≥–µ—Ä–æ—è"""
    try:
        hero_id = callback.data.split('_')[1]
        # –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –ø–æ–∫–∞–∑—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≥–µ—Ä–æ—è
        await callback.answer(f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≥–µ—Ä–æ—è {hero_id} –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ!")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –≥–µ—Ä–æ—è: {e}")
        await callback.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", show_alert=True)

@router.callback_query(F.data.startswith("build_"))
async def handle_build_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –±—ñ–ª–¥–∞"""
    try:
        build_id = callback.data.split('_')[1]
        # –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –ø–æ–∫–∞–∑—É –±—ñ–ª–¥–∞
        await callback.answer(f"–ë—ñ–ª–¥ {build_id} –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ!")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –±—ñ–ª–¥–∞: {e}")
        await callback.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", show_alert=True)
