# File: keyboards/profile_menu.py

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from utils.localization import loc
import logging

logger = logging.getLogger(__name__)

class ProfileMenu:
    def get_profile_menu(self) -> ReplyKeyboardMarkup:
        """
        Creates and returns the profile menu keyboard markup.
        Returns a simplified fallback keyboard if there's an error.
        """
        try:
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text=loc.get_message("buttons.statistics") or "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
                        KeyboardButton(text=loc.get_message("buttons.achievements") or "üèÜ –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è")
                    ],
                    [
                        KeyboardButton(text=loc.get_message("buttons.settings") or "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"),
                        KeyboardButton(text=loc.get_message("buttons.feedback") or "üìù –ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫")
                    ],
                    [
                        KeyboardButton(text=loc.get_message("buttons.back") or "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
                    ]
                ],
                resize_keyboard=True
            )
            return keyboard
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—å–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
            # Fallback keyboard with just the back button
            return ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )

    def get_statistics_menu(self) -> ReplyKeyboardMarkup:
        """
        Creates and returns the statistics submenu keyboard markup.
        """
        try:
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text=loc.get_message("buttons.personal_stats") or "üë§ –û—Å–æ–±–∏—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
                        KeyboardButton(text=loc.get_message("buttons.global_stats") or "üåê –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                    ],
                    [
                        KeyboardButton(text=loc.get_message("buttons.back") or "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
                    ]
                ],
                resize_keyboard=True
            )
            return keyboard
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )

    def get_achievements_menu(self) -> ReplyKeyboardMarkup:
        """
        Creates and returns the achievements submenu keyboard markup.
        """
        try:
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text=loc.get_message("buttons.my_achievements") or "üèÜ –ú–æ—ó –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è"),
                        KeyboardButton(text=loc.get_message("buttons.leaderboard") or "üèÖ –†–µ–π—Ç–∏–Ω–≥")
                    ],
                    [
                        KeyboardButton(text=loc.get_message("buttons.back") or "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
                    ]
                ],
                resize_keyboard=True
            )
            return keyboard
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–µ–Ω—é –¥–æ—Å—è–≥–Ω–µ–Ω—å: {e}")
            return ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
