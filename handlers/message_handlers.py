from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from services.keyboard_service import get_class_keyboard
import logging

logger = logging.getLogger(__name__)
router = Router(name="message_router")

@router.message(F.text == "ü¶∏‚Äç‚ôÇÔ∏è –ì–µ—Ä–æ—ó")
async def handle_heroes_button(message: Message):
    try:
        await message.answer(
            "–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å –≥–µ—Ä–æ—è:",
            reply_markup=get_class_keyboard()
        )
        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–æ –º–µ–Ω—é –≥–µ—Ä–æ—ó–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ –º–µ–Ω—é –≥–µ—Ä–æ—ó–≤: {e}")
        await message.answer("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@router.message(F.text == "üéØ –ú–µ—Ç–∞")
async def handle_meta_button(message: Message):
    try:
        await message.answer(
            "*–ê–∫—Ç—É–∞–ª—å–Ω–∏–π –º–µ—Ç–∞-–∑–≤—ñ—Ç:*\n\n"
            "ü•á *–¢–æ–ø –¢—ñ—Ä:*\n"
            "‚Ä¢ Tank: Tigreal, Franco\n"
            "‚Ä¢ Fighter: Alucard, Zilong\n"
            "‚Ä¢ Assassin: Saber, Karina\n"
            "‚Ä¢ Mage: Eudora, Aurora\n"
            "‚Ä¢ Marksman: Layla, Bruno\n"
            "‚Ä¢ Support: Rafaela, Angela",
            parse_mode="Markdown"
        )
        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–æ –º–µ—Ç–∞-–∑–≤—ñ—Ç –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ –º–µ—Ç–∞-–∑–≤—ñ—Ç—É: {e}")
        await message.answer("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@router.message(F.text == "üõ†Ô∏è –ë—ñ–ª–¥–∏")
async def handle_builds_button(message: Message):
    try:
        await message.answer(
            "–û–±–µ—Ä—ñ—Ç—å –≥–µ—Ä–æ—è –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –±—ñ–ª–¥—ñ–≤:\n"
            "(–§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)",
        )
        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–æ –º–µ–Ω—é –±—ñ–ª–¥—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ –º–µ–Ω—é –±—ñ–ª–¥—ñ–≤: {e}")
        await message.answer("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@router.message(F.text == "‚ùì –î–æ–ø–æ–º–æ–≥–∞")
async def handle_help_button(message: Message):
    try:
        help_text = '''
*–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º:*

‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –µ–∫—Ä–∞–Ω—É –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
‚Ä¢ –£ —Ä–æ–∑–¥—ñ–ª—ñ "–ì–µ—Ä–æ—ó" –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—Å—ñ—Ö –≥–µ—Ä–æ—ó–≤
‚Ä¢ "–ú–µ—Ç–∞" –ø–æ–∫–∞–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π tier list
‚Ä¢ "–ë—ñ–ª–¥–∏" –º—ñ—Å—Ç–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –∑–±—ñ—Ä–∫–∏ –¥–ª—è –≥–µ—Ä–æ—ó–≤

*–î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏:*
/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞
/help - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

*–ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∞ –¥–æ–ø–æ–º–æ–≥–∞?*
–ù–∞–ø–∏—à—ñ—Ç—å "–¥–æ–ø–æ–º–æ–≥–∞" –≤ —á–∞—Ç
'''
        await message.answer(help_text, parse_mode="Markdown")
        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–æ –¥–æ–≤—ñ–¥–∫—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ –¥–æ–≤—ñ–¥–∫–∏: {e}")
        await message.answer("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
