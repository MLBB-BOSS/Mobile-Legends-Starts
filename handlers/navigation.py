# handlers/navigation.py
from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
import logging

from interface_messages import InterfaceMessages
from navigation_state_manager import NavigationStateManager
from navigation_config import NavigationConfig
from states.menu_states import MenuStates
from keyboards.menus import get_navigation_menu
from utils.message_utils import safe_delete_message, check_and_edit_message

router = Router()
logger = logging.getLogger(__name__)

async def update_interface_messages(
    bot, chat_id: int, old_message_id: int, 
    interactive_message_id: int, state: FSMContext
) -> tuple[int, int]:
    """
    –û–Ω–æ–≤–ª—é—î —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ü–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤—ñ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.
    """
    try:
        # –°–ø—Ä–æ–±—É—î–º–æ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —ñ—Å–Ω—É—é—á–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if old_message_id:
            success = await check_and_edit_message(
                bot=bot,
                chat_id=chat_id,
                message_id=old_message_id,
                text=NavigationConfig.Messages.NAVIGATION_MENU,
                keyboard=get_navigation_menu()
            )
            if success:
                return old_message_id, interactive_message_id

        # –Ø–∫—â–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è, –≤–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—ñ
        await safe_delete_message(bot, chat_id, old_message_id)
        await safe_delete_message(bot, chat_id, interactive_message_id)

        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        new_message = await bot.send_message(
            chat_id=chat_id,
            text=NavigationConfig.Messages.NAVIGATION_MENU,
            reply_markup=get_navigation_menu()
        )

        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        new_interactive_message = await bot.send_message(
            chat_id=chat_id,
            text=NavigationConfig.Messages.NAVIGATION_INTERACTIVE,
            reply_markup=get_generic_inline_keyboard()
        )

        return new_message.message_id, new_interactive_message.message_id

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É: {e}")
        return None, None

async def handle_navigation_error(bot, chat_id: int, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î –ø–æ–º–∏–ª–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó.
    """
    try:
        await bot.send_message(
            chat_id=chat_id,
            text="–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_navigation_menu()
        )
        await state.set_state(MenuStates.MAIN_MENU)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–º–∏–ª–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó: {e}")

@router.message(MenuStates.MAIN_MENU, F.text == "üß≠ –ù–∞–≤—ñ–≥–∞—Ü—ñ—è")
async def handle_navigation_transition(message: Message, state: FSMContext, bot):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–æ–≥–æ –º–µ–Ω—é.
    """
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –ø–µ—Ä–µ–π—à–æ–≤ –¥–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–æ–≥–æ –º–µ–Ω—é")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ç–∞–Ω—ñ–≤
    state_manager = NavigationStateManager(state)
    await state_manager.load_state()

    try:
        # –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await safe_delete_message(bot, message.chat.id, message.message_id)

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        new_message_id, new_interactive_id = await update_interface_messages(
            bot=bot,
            chat_id=message.chat.id,
            old_message_id=state_manager.messages.bot_message_id,
            interactive_message_id=state_manager.messages.interactive_message_id,
            state=state
        )

        if new_message_id and new_interactive_id:
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            await state_manager.messages.update(
                bot=bot,
                chat_id=message.chat.id,
                new_message_id=new_message_id,
                new_interactive_id=new_interactive_id,
                text=NavigationConfig.Messages.NAVIGATION_MENU,
                keyboard=get_navigation_menu()
            )
            
            # –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É
            await state_manager.transition_to(MenuStates.NAVIGATION_MENU)
            logger.info(f"–£—Å–ø—ñ—à–Ω–∏–π –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
        else:
            raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥—ñ –¥–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        await handle_navigation_error(bot, message.chat.id, state)

@router.message(MenuStates.NAVIGATION_MENU)
async def handle_navigation_menu_selection(message: Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –æ–ø—Ü—ñ–π –≤ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–æ–º—É –º–µ–Ω—é.
    """
    try:
        text = message.text
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –≤–∏–±—Ä–∞–≤ –æ–ø—Ü—ñ—é: {text}")

        # –ú–∞–ø–ø—ñ–Ω–≥ –æ–ø—Ü—ñ–π –º–µ–Ω—é –¥–æ —Å—Ç–∞–Ω—ñ–≤
        menu_options = {
            "ü•∑ –ü–µ—Ä—Å–æ–Ω–∞–∂—ñ": MenuStates.HEROES_MENU,
            "üèÜ –¢—É—Ä–Ω—ñ—Ä–∏": MenuStates.TOURNAMENTS_MENU,
            "üìö –ì–∞–π–¥–∏": MenuStates.GUIDES_MENU,
            "üõ°Ô∏è –ë—ñ–ª–¥–∏": MenuStates.BUILDS_MENU,
            "üßë‚Äçü§ù‚Äçüßë –ö–æ–º–∞–Ω–¥–∏": MenuStates.TEAMS_MENU,
            "üß© –ß–µ–ª–µ–Ω–¥–∂": MenuStates.CHALLENGES_MENU,
            "üöÄ –ë—É—Å—Ç": MenuStates.BUST_MENU,
            "üí∞ –¢–æ—Ä–≥—ñ–≤–ª—è": MenuStates.TRADING_MENU,
            "üîô –ù–∞–∑–∞–¥": MenuStates.MAIN_MENU
        }

        if text in menu_options:
            await state.set_state(menu_options[text])
            await message.answer(f"–í–∏ –ø–µ—Ä–µ–π—à–ª–∏ –¥–æ —Ä–æ–∑–¥—ñ–ª—É {text}")
            logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –≤—Å—Ç–∞–Ω–æ–≤–∏–≤ —Å—Ç–∞–Ω {menu_options[text]}")
        else:
            await message.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –æ–ø—Ü—ñ—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é.")
            logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –≤–∏–±—Ä–∞–≤ –Ω–µ–≤—ñ–¥–æ–º—É –æ–ø—Ü—ñ—é: {text}")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∏–±–æ—Ä—É –≤ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–æ–º—É –º–µ–Ω—é: {e}")
        await handle_navigation_error(message.bot, message.chat.id, state)