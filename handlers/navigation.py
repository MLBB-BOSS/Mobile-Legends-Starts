# handlers/navigation.py
# UTC:22:00
# 2024-11-25
# Author: MLBB-BOSS
# Description: Navigation menu handlers
# The era of artificial intelligence.

from aiogram import Router, F
from aiogram.types import Message
from keyboards.navigation_menu import get_navigation_keyboard
from keyboards.main_menu import get_main_keyboard
from keyboards.characters_menu import get_characters_keyboard
import logging

logger = logging.getLogger(__name__)
router = Router()

@router.message(F.text == "üõ°Ô∏è –ü–µ—Ä—Å–æ–Ω–∞–∂—ñ")
async def show_characters_menu(message: Message):
    try:
        logger.info(f"User {message.from_user.id} selected '–ü–µ—Ä—Å–æ–Ω–∞–∂—ñ'")
        await message.answer(
            "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –≥–µ—Ä–æ—è:",
            reply_markup=get_characters_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in characters menu handler: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@router.message(F.text == "üìö –ì–∞–π–¥–∏")
async def show_guides(message: Message):
    try:
        logger.info(f"User {message.from_user.id} selected '–ì–∞–π–¥–∏'")
        await message.answer(
            "üìö –†–æ–∑–¥—ñ–ª –≥–∞–π–¥—ñ–≤ —É —Ä–æ–∑—Ä–æ–±—Ü—ñ.\n–¢—É—Ç –±—É–¥—É—Ç—å –∫–æ—Ä–∏—Å–Ω—ñ –ø–æ—Ä–∞–¥–∏ —Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –≥—Ä–∏.",
            reply_markup=get_navigation_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in guides handler: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@router.message(F.text == "‚öñÔ∏è –ö–æ–Ω—Ç—Ä-–ø—ñ–∫–∏")
async def show_counterpicks(message: Message):
    try:
        logger.info(f"User {message.from_user.id} selected '–ö–æ–Ω—Ç—Ä-–ø—ñ–∫–∏'")
        await message.answer(
            "‚öñÔ∏è –†–æ–∑–¥—ñ–ª –∫–æ–Ω—Ç—Ä-–ø—ñ–∫—ñ–≤ —É —Ä–æ–∑—Ä–æ–±—Ü—ñ.\n–¢—É—Ç –≤–∏ –∑–º–æ–∂–µ—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø—Ä–æ –Ω–∞–π–∫—Ä–∞—â—ñ –∫–æ–Ω—Ç—Ä-–ø—ñ–∫–∏ –ø—Ä–æ—Ç–∏ –∫–æ–∂–Ω–æ–≥–æ –≥–µ—Ä–æ—è.",
            reply_markup=get_navigation_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in counterpicks handler: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@router.message(F.text == "‚öúÔ∏è –ë—ñ–ª–¥–∏")
async def show_builds(message: Message):
    try:
        logger.info(f"User {message.from_user.id} selected '–ë—ñ–ª–¥–∏'")
        await message.answer(
            "‚öúÔ∏è –†–æ–∑–¥—ñ–ª –±—ñ–ª–¥—ñ–≤ —É —Ä–æ–∑—Ä–æ–±—Ü—ñ.\n–¢—É—Ç –±—É–¥—É—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ñ –Ω–∞–π–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—à—ñ –±—ñ–ª–¥–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –≥–µ—Ä–æ—è.",
            reply_markup=get_navigation_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in builds handler: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@router.message(F.text == "üìä –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è")
async def show_voting(message: Message):
    try:
        logger.info(f"User {message.from_user.id} selected '–ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è'")
        await message.answer(
            "üìä –†–æ–∑–¥—ñ–ª –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è —É —Ä–æ–∑—Ä–æ–±—Ü—ñ.\n–¢—É—Ç –≤–∏ –∑–º–æ–∂–µ—Ç–µ –±—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å —É —Ä—ñ–∑–Ω–∏—Ö –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è—Ö.",
            reply_markup=get_navigation_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in voting handler: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@router.message(F.text.in_({"üîô –ù–∞–∑–∞–¥ –¥–æ –ì–æ–ª–æ–≤–Ω–æ–≥–æ", "üîô –ù–∞–∑–∞–¥"}))
async def return_to_main_menu(message: Message):
    try:
        logger.info(f"User {message.from_user.id} returned to main menu")
        await message.answer(
            "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in return to main menu handler: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –¥–æ –ù–∞–≤—ñ–≥–∞—Ü—ñ—ó")
async def return_to_navigation(message: Message):
    try:
        logger.info(f"User {message.from_user.id} returned to navigation menu")
        await message.answer(
            "–ú–µ–Ω—é –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó:",
            reply_markup=get_navigation_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in return to navigation handler: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Ç–∏–ø—ñ–≤ –≥–µ—Ä–æ—ó–≤
@router.message(F.text.in_({"üó°Ô∏è –ë—ñ–π—Ü—ñ", "üèπ –°—Ç—Ä—ñ–ª—å—Ü—ñ", "üîÆ –ú–∞–≥–∏", "üõ°Ô∏è –¢–∞–Ω–∫–∏", "üè• –°–∞–ø–ø–æ—Ä—Ç–∏", "üó≤ –ì—ñ–±—Ä–∏–¥–∏"}))
async def show_heroes_by_type(message: Message):
    try:
        hero_type = message.text
        logger.info(f"User {message.from_user.id} selected hero type: {hero_type}")
        
        # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –≤–∏–±–æ—Ä—É –≥–µ—Ä–æ—ó–≤ –∑–∞ —Ç–∏–ø–æ–º
        await message.answer(
            f"–†–æ–∑–¥—ñ–ª {hero_type} —É —Ä–æ–∑—Ä–æ–±—Ü—ñ.\n–¢—É—Ç –±—É–¥–µ —Å–ø–∏—Å–æ–∫ –≥–µ—Ä–æ—ó–≤ —Ü—å–æ–≥–æ —Ç–∏–ø—É.",
            reply_markup=get_characters_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in hero type handler: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
