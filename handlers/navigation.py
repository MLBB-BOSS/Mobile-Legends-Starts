from aiogram import Router, F
from aiogram.types import Message
from keyboards.navigation_menu import (
    get_navigation_keyboard,
    get_characters_keyboard,
    get_guides_keyboard,
    get_counterpicks_keyboard,
    get_builds_keyboard,
    get_voting_keyboard,
    get_help_keyboard
)
from keyboards.main_menu import get_main_keyboard
import logging

logger = logging.getLogger(__name__)
router = Router()

@router.message(F.text == "üß≠ –ù–∞–≤—ñ–≥–∞—Ü—ñ—è")
async def show_navigation(message: Message):
    logger.info(f"Entering show_navigation handler for user {message.from_user.id}")
    try:
        if not message or not message.from_user:
            raise ValueError("Invalid message or user data")
        logger.info(f"User {message.from_user.id} opened navigation menu")
        await message.answer(
            "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó:",
            reply_markup=get_navigation_keyboard()
        )
        logger.info(f"Navigation menu displayed for user {message.from_user.id}")
    except Exception as e:
        logger.error(f"Error in navigation menu handler: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@router.message(F.text == "üõ°Ô∏è –ü–µ—Ä—Å–æ–Ω–∞–∂—ñ")
async def show_characters_menu(message: Message):
    logger.info(f"Entering show_characters_menu handler for user {message.from_user.id}")
    try:
        if not message or not message.from_user:
            raise ValueError("Invalid message or user data")
        logger.info(f"User {message.from_user.id} selected '–ü–µ—Ä—Å–æ–Ω–∞–∂—ñ'")
        await message.answer(
            "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –≥–µ—Ä–æ—è:",
            reply_markup=get_characters_keyboard()
        )
        logger.info(f"Characters menu displayed for user {message.from_user.id}")
    except Exception as e:
        logger.error(f"Error in characters menu handler: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@router.message(F.text == "üìñ –ì–∞–π–¥–∏")
async def show_guides(message: Message):
    logger.info(f"Entering show_guides handler for user {message.from_user.id}")
    try:
        if not message or not message.from_user:
            raise ValueError("Invalid message or user data")
        logger.info(f"User {message.from_user.id} selected '–ì–∞–π–¥–∏'")
        await message.answer(
            "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –≥–∞–π–¥—ñ–≤:",
            reply_markup=get_guides_keyboard()
        )
        logger.info(f"Guides menu displayed for user {message.from_user.id}")
    except Exception as e:
        logger.error(f"Error in guides handler: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@router.message(F.text == "‚öîÔ∏è –ö–æ–Ω—Ç—Ä-–ø—ñ–∫–∏")
async def show_counterpicks(message: Message):
    logger.info(f"Entering show_counterpicks handler for user {message.from_user.id}")
    try:
        if not message or not message.from_user:
            raise ValueError("Invalid message or user data")
        logger.info(f"User {message.from_user.id} selected '–ö–æ–Ω—Ç—Ä-–ø—ñ–∫–∏'")
        await message.answer(
            "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∫–æ–Ω—Ç—Ä-–ø—ñ–∫—ñ–≤:",
            reply_markup=get_counterpicks_keyboard()
        )
        logger.info(f"Counterpicks menu displayed for user {message.from_user.id}")
    except Exception as e:
        logger.error(f"Error in counterpicks handler: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@router.message(F.text == "üõ†Ô∏è –ë—ñ–ª–¥–∏")
async def show_builds(message: Message):
    logger.info(f"Entering show_builds handler for user {message.from_user.id}")
    try:
        if not message or not message.from_user:
            raise ValueError("Invalid message or user data")
        logger.info(f"User {message.from_user.id} selected '–ë—ñ–ª–¥–∏'")
        await message.answer(
            "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –±—ñ–ª–¥—ñ–≤:",
            reply_markup=get_builds_keyboard()
        )
        logger.info(f"Builds menu displayed for user {message.from_user.id}")
    except Exception as e:
        logger.error(f"Error in builds handler: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@router.message(F.text == "üìä –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è")
async def show_voting(message: Message):
    logger.info(f"Entering show_voting handler for user {message.from_user.id}")
    try:
        if not message or not message.from_user:
            raise ValueError("Invalid message or user data")
        logger.info(f"User {message.from_user.id} selected '–ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è'")
        await message.answer(
            "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è:",
            reply_markup=get_voting_keyboard()
        )
        logger.info(f"Voting menu displayed for user {message.from_user.id}")
    except Exception as e:
        logger.error(f"Error in voting handler: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@router.message(F.text == "‚ùì –î–æ–ø–æ–º–æ–≥–∞")
async def show_help(message: Message):
    logger.info(f"Entering show_help handler for user {message.from_user.id}")
    try:
        if not message or not message.from_user:
            raise ValueError("Invalid message or user data")
        logger.info(f"User {message.from_user.id} selected '–î–æ–ø–æ–º–æ–≥–∞'")
        await message.answer(
            "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –¥–æ–ø–æ–º–æ–≥–∏:",
            reply_markup=get_help_keyboard()
        )
        logger.info(f"Help menu displayed for user {message.from_user.id}")
    except Exception as e:
        logger.error(f"Error in help handler: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@router.message(F.text.in_({"üîô –ù–∞–∑–∞–¥ –¥–æ –ì–æ–ª–æ–≤–Ω–æ–≥–æ", "üîô –ù–∞–∑–∞–¥"}))
async def return_to_main_menu(message: Message):
    logger.info(f"Entering return_to_main_menu handler for user {message.from_user.id}")
    try:
        if not message or not message.from_user:
            raise ValueError("Invalid message or user data")
        logger.info(f"User {message.from_user.id} returned to main menu")
        await message.answer(
            "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
            reply_markup=get_main_keyboard()
        )
        logger.info(f"Main menu displayed for user {message.from_user.id}")
    except Exception as e:
        logger.error(f"Error in return to main menu handler: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@router.message(F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ù–∞–≤—ñ–≥–∞—Ü—ñ—ó")
async def return_to_navigation(message: Message):
    logger.info(f"Entering return_to_navigation handler for user {message.from_user.id}")
    try:
        if not message or not message.from_user:
            raise ValueError("Invalid message or user data")
        logger.info(f"User {message.from_user.id} returned to navigation menu")
        await message.answer(
            "–ú–µ–Ω—é –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó:",
            reply_markup=get_navigation_keyboard()
        )
        logger.info(f"Navigation menu displayed for user {message.from_user.id}")
    except Exception as e:
        logger.error(f"Error in return to navigation handler: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@router.message(F.text == "üéµ MP3 –ü–ª–µ—î—Ä")
async def show_mp3_player(message: Message):
    logger.info(f"Entering show_mp3_player handler for user {message.from_user.id}")
    try:
        if not message or not message.from_user:
            raise ValueError("Invalid message or user data")
        logger.info(f"User {message.from_user.id} selected 'MP3 –ü–ª–µ—î—Ä'")
        await message.answer(
            "MP3 –ü–ª–µ—î—Ä —É —Ä–æ–∑—Ä–æ–±—Ü—ñ.\n–¢—É—Ç –±—É–¥–µ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –¥–ª—è –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—É–∑–∏–∫–∏.",
            reply_markup=get_navigation_keyboard()
        )
        logger.info(f"MP3 player menu displayed for user {message.from_user.id}")
    except Exception as e:
        logger.error(f"Error in MP3 player handler: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –ø—ñ–¥–º–µ–Ω—é –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤
@router.message(F.text.in_({
    "üó°Ô∏è –ë—ñ–π—Ü—ñ", "üèπ –°—Ç—Ä—ñ–ª—å—Ü—ñ", "üîÆ –ú–∞–≥–∏",
    "üõ°Ô∏è –¢–∞–Ω–∫–∏", "üè• –°–∞–ø–ø–æ—Ä—Ç–∏", "‚öîÔ∏è –ì—ñ–±—Ä–∏–¥–∏",
    "üî• –ú–µ—Ç–æ–≤—ñ"
}))
async def handle_character_type(message: Message):
    logger.info(f"Entering handle_character_type handler for user {message.from_user.id}")
    try:
        if not message or not message.from_user:
            raise ValueError("Invalid message or user data")
        hero_type = message.text
        logger.info(f"User {message.from_user.id} selected hero type: {hero_type}")
        
        # –¢—É—Ç –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É –≥–µ—Ä–æ—ó–≤
        await message.answer(
            f"–†–æ–∑–¥—ñ–ª {hero_type} —É —Ä–æ–∑—Ä–æ–±—Ü—ñ.\n–¢—É—Ç –±—É–¥–µ —Å–ø–∏—Å–æ–∫ –≥–µ—Ä–æ—ó–≤ —Ü—å–æ–≥–æ —Ç–∏–ø—É.",
            reply_markup=get_characters_keyboard()
        )
        logger.info(f"Character type {hero_type} menu displayed for user {message.from_user.id}")
    except Exception as e:
        logger.error(f"Error in hero type handler: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –ø—ñ–¥–º–µ–Ω—é –≥–∞–π–¥—ñ–≤
@router.message(F.text.in_({
    "üÜï –ù–æ–≤—ñ –≥–∞–π–¥–∏", "üåü –ü–æ–ø—É–ª—è—Ä–Ω—ñ –≥–∞–π–¥–∏",
    "üìò –î–ª—è –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—ñ–≤", "üßô –ü—Ä–æ—Å—É–Ω—É—Ç—ñ —Ç–µ—Ö–Ω—ñ–∫–∏",
    "üõ°Ô∏è –ö–æ–º–∞–Ω–¥–Ω—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó"
}))
async def handle_guide_type(message: Message):
    logger.info(f"Entering handle_guide_type handler for user {message.from_user.id}")
    try:
        if not message or not message.from_user:
            raise ValueError("Invalid message or user data")
        guide_type = message.text
        logger.info(f"User {message.from_user.id} selected guide type: {guide_type}")
        
        await message.answer(
            f"–†–æ–∑–¥—ñ–ª {guide_type} —É —Ä–æ–∑—Ä–æ–±—Ü—ñ.\n–¢—É—Ç –±—É–¥—É—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –≥–∞–π–¥–∏.",
            reply_markup=get_guides_keyboard()
        )
        logger.info(f"Guide type {guide_type} menu displayed for user {message.from_user.id}")
    except Exception as e:
        logger.error(f"Error in guide type handler: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

# –î–æ–¥–∞–º–æ —ñ–Ω—à—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –ø—ñ–¥–º–µ–Ω—é –ø–æ –º—ñ—Ä—ñ —ó—Ö —Ä–æ–∑—Ä–æ–±–∫–∏...
