import logging
from io import BytesIO
from typing import Optional

from aiogram import Router, Bot
from aiogram.filters import Command
from aiogram.types import Message, BufferedInputFile
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

from sqlalchemy import Column, Integer, String, Float
from sqlalchemy.orm import declarative_base

from PIL import Image, ImageDraw, ImageFont
import matplotlib.pyplot as plt

from config import settings  # –í–∞—à —Ñ–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
from database import get_db  # –í–∞—à —Ñ–∞–π–ª –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –±–∞–∑–∏ –¥–∞–Ω–∏—Ö

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
Base = declarative_base()

class User(Base):
    __tablename__ = 'users'

    id = Column(Integer, primary_key=True, index=True)
    telegram_id = Column(Integer, unique=True, index=True, nullable=False)
    username = Column(String, index=True)
    fullname = Column(String)
    level = Column(Integer, default=1)
    activity = Column(Float, default=0.0)
    rating = Column(Integer, default=0)
    matches = Column(Integer, default=0)
    wins = Column(Integer, default=0)
    losses = Column(Integer, default=0)
    screenshot_count = Column(Integer, default=0)
    mission_count = Column(Integer, default=0)
    quiz_count = Column(Integer, default=0)
    active_days = Column(Integer, default=0)
    messages_sent = Column(Integer, default=0)
    rating_rank = Column(String, default="Bronze")
    achievements_count = Column(Integer, default=0)
    # –î–æ–¥–∞–π—Ç–µ —ñ–Ω—à—ñ –ø–æ–ª—è –∑–∞ –ø–æ—Ç—Ä–µ–±–æ—é

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
profile_router = Router()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–∞–Ω–≥—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–µ–π—Ç–∏–Ω–≥—É
def get_rank(rating: int) -> (str, str):
    if rating < 1000:
        return ("Bronze", "#CD7F32")
    elif 1000 <= rating < 2000:
        return ("Silver", "#C0C0C0")
    elif 2000 <= rating < 3000:
        return ("Gold", "#FFD700")
    elif 3000 <= rating < 4000:
        return ("Platinum", "#E5E4E2")
    elif 4000 <= rating < 5000:
        return ("Diamond", "#B9F2FF")
    else:
        return ("Master", "#FF4500")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
async def generate_detailed_profile(user: User) -> BytesIO:
    # –†–æ–∑–º—ñ—Ä–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    width, height = 1080, 1920
    img = Image.new("RGB", (width, height), "#1C1C1C")  # –¢–µ–º–Ω–∏–π —Ñ–æ–Ω
    draw = ImageDraw.Draw(img)

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —à—Ä–∏—Ñ—Ç—ñ–≤
    try:
        title_font = ImageFont.truetype("arial.ttf", 60)
        header_font = ImageFont.truetype("arial.ttf", 50)
        content_font = ImageFont.truetype("arial.ttf", 40)
        small_font = ImageFont.truetype("arial.ttf", 30)
    except IOError:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö —à—Ä–∏—Ñ—Ç—ñ–≤, —è–∫—â–æ arial –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
        title_font = ImageFont.load_default()
        header_font = ImageFont.load_default()
        content_font = ImageFont.load_default()
        small_font = ImageFont.load_default()

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    draw.text((width // 2 - 200, 30), "üéÆ –ü—Ä–æ—Ñ—ñ–ª—å –ì—Ä–∞–≤—Ü—è", fill="#FFD700", font=title_font)

    # –ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
    info_box_coords = [50, 120, width - 50, 400]
    draw.rectangle(info_box_coords, outline="#007BFF", width=5, fill="#2E2E3E")
    draw.text((70, 150), f"üë§ –ù—ñ–∫–Ω–µ–π–º: @{user.username}", fill="#00CFFF", font=content_font)
    draw.text((70, 220), f"üìù –Ü–º'—è: {user.fullname}", fill="#FFFFFF", font=content_font)
    draw.text((70, 290), f"‚≠ê –†—ñ–≤–µ–Ω—å: {user.level}", fill="#FFD700", font=content_font)
    draw.text((500, 290), f"üî• –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {user.activity}%", fill="#FFD700", font=content_font)

    # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    win_rate = (user.wins / user.matches) * 100 if user.matches > 0 else 0
    draw.text((70, 360), f"üèÖ –†–µ–π—Ç–∏–Ω–≥: {user.rating}", fill="#FFD700", font=content_font)
    draw.text((70, 430), f"üéÆ –ú–∞—Ç—á—ñ: {user.matches}", fill="#FFFFFF", font=content_font)
    draw.text((500, 430), f"üèÜ –ü–µ—Ä–µ–º–æ–≥–∏: {user.wins}", fill="#28A745", font=content_font)
    draw.text((800, 430), f"‚ùå –ü–æ—Ä–∞–∑–∫–∏: {user.losses}", fill="#DC3545", font=content_font)
    draw.text((500, 360), f"üìà Win Rate: {win_rate:.2f}%", fill="#28A745", font=content_font)

    # –°–∏—Å—Ç–µ–º–∞ –†–µ–π—Ç–∏–Ω–≥—ñ–≤
    rank, color = get_rank(user.rating)
    rank_text = f"üèÖ –†–∞–Ω–≥: {rank}"
    text_width, _ = draw.textsize(rank_text, font=header_font)
    draw.text((width // 2 - text_width // 2, 150), rank_text, fill=color, font=header_font)

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≥—Ä–∞—Ñ—ñ–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    fig, ax = plt.subplots(figsize=(8, 4.5), facecolor="#1C1C1C")
    days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–ù–¥']
    # –ó–∞–º—ñ–Ω—ñ—Ç—å —Ü—ñ –¥–∞–Ω—ñ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    activity_data = [user.activity, 50, 60, 70, 80, 65, 75]
    ax.plot(days, activity_data, color="#00CFFF", linewidth=4, marker="o")
    ax.set_title("üìà –ì—Ä–∞—Ñ—ñ–∫ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ", fontsize=20, color="white")
    ax.set_facecolor("#1C1C1C")
    ax.tick_params(colors="white")
    for spine in ax.spines.values():
        spine.set_edgecolor("#444444")
    ax.grid(color="#333333")

    buf = BytesIO()
    plt.savefig(buf, format="PNG", transparent=True)
    plt.close(fig)

    # –í—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞
    graph = Image.open(buf).resize((900, 500))
    img.paste(graph, (90, 500), mask=graph)

    # –ü—Ä–æ–≥—Ä–µ—Å
    draw.text((50, 1050), "üéØ –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å –∑—Ä–æ—Å—Ç–∞—î! –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –≤ —Ç–æ–º—É –∂ –¥—É—Å—ñ!", fill="#FFFFFF", font=small_font)

    # –†–µ–π—Ç–∏–Ω–≥–æ–≤—ñ –ø—ñ–∫—Ç–æ–≥—Ä–∞–º–∏
    try:
        rank_icon = Image.open(f"icons/{rank.lower()}.png").resize((100, 100))
        img.paste(rank_icon, (width - 150, 120), mask=rank_icon)
    except IOError:
        logging.warning(f"–ü—ñ–∫—Ç–æ–≥—Ä–∞–º–∞ –¥–ª—è —Ä–∞–Ω–≥—É {rank} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
    
    # –ê–≤–∞—Ç–∞—Ä–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    try:
        # –Ø–∫—â–æ —É –≤–∞—Å —î –∞–≤–∞—Ç–∞—Ä–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —ó—ó –∑ Telegram
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∑–∞–≥–ª—É—à–∫–∞
        avatar = Image.open("default_avatar.png").resize((200, 200))
        img.paste(avatar, (width // 2 - 100, 300), mask=avatar)
    except IOError:
        logging.warning("–ê–≤–∞—Ç–∞—Ä–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∑–∞–≥–ª—É—à–∫–∞.")
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É –±—É—Ñ–µ—Ä
    output = BytesIO()
    img.save(output, format="PNG")
    output.seek(0)
    return output

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /profile
@profile_router.message(Command("profile"))
async def show_profile(message: Message, session: AsyncSession, bot: Bot):
    try:
        telegram_id = message.from_user.id
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        stmt = select(User).where(User.telegram_id == telegram_id)
        result = await session.execute(stmt)
        user: Optional[User] = result.scalar_one_or_none()

        if not user:
            # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö, —Å—Ç–≤–æ—Ä—ñ—Ç—å –π–æ–≥–æ –∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            user = User(
                telegram_id=telegram_id,
                username=message.from_user.username or "Unknown",
                fullname=f"{message.from_user.first_name} {message.from_user.last_name or ''}".strip(),
                level=1,
                activity=0.0,
                rating=0,
                matches=0,
                wins=0,
                losses=0,
                screenshot_count=0,
                mission_count=0,
                quiz_count=0,
                active_days=0,
                messages_sent=0,
                rating_rank="Bronze",
                achievements_count=0
            )
            session.add(user)
            await session.commit()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ—Ñ—ñ–ª—é
        profile_image = await generate_detailed_profile(user)
        input_file = BufferedInputFile(profile_image.read(), filename="profile.png")
        
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        await message.answer_photo(photo=input_file, caption="üñº –í–∞—à –î–µ—Ç–∞–ª—å–Ω–∏–π –ü—Ä–æ—Ñ—ñ–ª—å")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é: {e}")
        await message.answer("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é.")