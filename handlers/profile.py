# handlers/profile.py
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import F

from keyboards.menus import get_profile_menu
from texts import PROFILE_MENU_TEXT, PROFILE_INTERACTIVE_TEXT, UNKNOWN_COMMAND_TEXT
from states import MenuStates
from utils.message_utils import safe_delete_message, check_and_edit_message, handle_error
from utils.db import get_user_profile
from utils.text_formatter import format_profile_text
from models.user import User
from models.user_stats import UserStats

router = Router()

@router.message(F.text == "ü™™ –ú—ñ–π –ü—Ä–æ—Ñ—ñ–ª—å")
async def handle_my_profile_handler(message: Message, state: FSMContext, db: AsyncSession, bot: Bot) -> None:
    """
    –û–±—Ä–æ–±—á–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "ü™™ –ú—ñ–π –ü—Ä–æ—Ñ—ñ–ª—å".
    """
    await safe_delete_message(bot, message.chat.id, message.message_id)
    await process_my_profile(message, state, db, bot)

async def process_my_profile(message: Message, state: FSMContext, db: AsyncSession, bot: Bot) -> None:
    """
    –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    user_id = message.from_user.id
    profile_data = await get_user_profile(db, user_id)

    if profile_data:
        profile_info = {
            "username": profile_data.get('username', 'N/A'),
            "level": profile_data.get('level', 'N/A'),
            "rating": profile_data.get('rating', 'N/A'),
            "achievements_count": profile_data.get('achievements_count', 'N/A'),
            "screenshots_count": profile_data.get('screenshots_count', 'N/A'),
            "missions_count": profile_data.get('missions_count', 'N/A'),
            "quizzes_count": profile_data.get('quizzes_count', 'N/A'),
            "total_matches": profile_data.get('total_matches', 'N/A'),
            "total_wins": profile_data.get('total_wins', 'N/A'),
            "total_losses": profile_data.get('total_losses', 'N/A'),
            "tournament_participations": profile_data.get('tournament_participations', 'N/A'),
            "badges_count": profile_data.get('badges_count', 'N/A'),
            "last_update": profile_data.get('last_update').strftime('%d.%m.%Y %H:%M') if profile_data.get('last_update') else 'N/A'
        }
        try:
            formatted_profile_text = format_profile_text(PROFILE_INTERACTIVE_TEXT, profile_info)
        except ValueError as e:
            logger.error(f"Error formatting profile text: {e}")
            await bot.send_message(chat_id=message.chat.id, text=GENERIC_ERROR_MESSAGE_TEXT)
            return

        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª—é
        try:
            overall_activity_bytes = create_overall_activity_graph()
            rating_bytes = create_rating_graph()
            game_stats_bytes = create_game_stats_graph()
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –ø—Ä–æ—Ñ—ñ–ª—é: {e}")
            overall_activity_bytes = rating_bytes = game_stats_bytes = None

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º–±—ñ–Ω–æ–≤–∞–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
        combined_image_bytes = None
        if overall_activity_bytes and rating_bytes and game_stats_bytes:
            try:
                # –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –∑–æ–±—Ä–∞–∂–µ–Ω—å
                img1 = Image.open(io.BytesIO(overall_activity_bytes))
                img2 = Image.open(io.BytesIO(rating_bytes))
                img3 = Image.open(io.BytesIO(game_stats_bytes))

                # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
                img1 = img1.resize((600, 400))
                img2 = img2.resize((600, 400))
                img3 = img3.resize((600, 400))

                # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –æ–±'—î–¥–Ω–∞–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
                combined_width = max(img1.width, img2.width, img3.width)
                combined_height = img1.height + img2.height + img3.height
                combined_image = Image.new('RGB', (combined_width, combined_height), (255, 255, 255))

                # –í—Å—Ç–∞–≤–∫–∞ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
                combined_image.paste(img1, (0, 0))
                combined_image.paste(img2, (0, img1.height))
                combined_image.paste(img3, (0, img1.height + img2.height))

                # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–º–±—ñ–Ω–æ–≤–∞–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –±–∞–π—Ç–æ–≤–∏–π –±—É—Ñ–µ—Ä
                buffer = io.BytesIO()
                combined_image.save(buffer, format="PNG")
                combined_image_bytes = buffer.getvalue()
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±'—î–¥–Ω–∞–Ω–Ω—ñ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤: {e}")

        # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –ø—Ä–æ—Ñ—ñ–ª—é —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
        if combined_image_bytes:
            try:
                await bot.send_photo(
                    chat_id=message.chat.id,
                    photo=io.BytesIO(combined_image_bytes),
                    caption=formatted_profile_text,
                    parse_mode=ParseMode.HTML,
                    reply_markup=get_generic_inline_keyboard()
                )
                logger.info(f"–ü—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∑ –≥—Ä–∞—Ñ—ñ–∫–∞–º–∏.")
            except Exception as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫–∏ –ø—Ä–æ—Ñ—ñ–ª—é: {e}")
                await handle_error(bot, message.chat.id, GENERIC_ERROR_MESSAGE_TEXT, logger)
        else:
            try:
                await bot.send_message(
                    chat_id=message.chat.id,
                    text=formatted_profile_text,
                    parse_mode=ParseMode.HTML,
                    reply_markup=get_generic_inline_keyboard()
                )
                logger.info(f"–¢–µ–∫—Å—Ç–æ–≤–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
            except Exception as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –ø—Ä–æ—Ñ—ñ–ª—å: {e}")
                await handle_error(bot, message.chat.id, GENERIC_ERROR_MESSAGE_TEXT, logger)

        # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–µ–∫—Å—Ç–æ–º ¬´ü™™ –ú—ñ–π –ü—Ä–æ—Ñ—ñ–ª—å¬ª
        try:
            my_profile_message = await bot.send_message(
                chat_id=message.chat.id,
                text="ü™™ –ú—ñ–π –ü—Ä–æ—Ñ—ñ–ª—å\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:",
                reply_markup=get_profile_menu()
            )
            await state.update_data(bot_message_id=my_profile_message.message_id)
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é: {e}")
            await handle_error(bot, message.chat.id, GENERIC_ERROR_MESSAGE_TEXT, logger)
            return

        # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –¥–æ PROFILE_MENU
        await state.set_state(MenuStates.PROFILE_MENU)
    ```

**–û—Å–Ω–æ–≤–Ω—ñ –∑–º—ñ–Ω–∏:**

1. **–î–µ–∫–æ—Ä–∞—Ç–æ—Ä–∏:** –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤—Å—ñ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å `@router.message()` –∞–±–æ `@dp.message()` –∑–∞–º—ñ—Å—Ç—å –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –≤–µ—Ä—Å—ñ–π.

2. **–í–∫–ª—é—á–µ–Ω–Ω—è –†–æ—É—Ç–µ—Ä–∞:** –£ –≤–∞—à–æ–º—É –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ñ–∞–π–ª—ñ `bot.py` –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∏ –≤–∫–ª—é—á–∞—î—Ç–µ —Ä–æ—É—Ç–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.

## 6. –û–Ω–æ–≤–ª–µ–Ω–Ω—è –û—Å–Ω–æ–≤–Ω–æ–≥–æ –§–∞–π–ª—É `bot.py`

–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∏ –≤–∫–ª—é—á–∏–ª–∏ –≤—Å—ñ —Ä–æ—É—Ç–µ—Ä–∏ —É –≤–∞—à–æ–º—É –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ñ–∞–π–ª—ñ `bot.py`. –û—Å—å –ø—Ä–∏–∫–ª–∞–¥ –æ–Ω–æ–≤–ª–µ–Ω–æ–≥–æ —Ñ–∞–π–ª—É:

```python
# bot.py
import os
import asyncio
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
import logging

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ä–æ—É—Ç–µ—Ä–∏
from handlers.base import router as base_router
from handlers.main_menu import router as main_menu_router
from handlers.profile import router as profile_router
# –Ü–º–ø–æ—Ä—Ç—É–π—Ç–µ —ñ–Ω—à—ñ —Ä–æ—É—Ç–µ—Ä–∏ –∑–∞ –ø–æ—Ç—Ä–µ–±–æ—é

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ .env —Ñ–∞–π–ª—É
load_dotenv()

# –û—Ç—Ä–∏–º–∞–π—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∑ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

if not TELEGRAM_BOT_TOKEN:
    logger.critical("–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ TELEGRAM_BOT_TOKEN")
    exit(1)

# –°—Ç–≤–æ—Ä—ñ—Ç—å –µ–∫–∑–µ–º–ø–ª—è—Ä–∏ –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN, parse_mode='HTML')
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –í–∫–ª—é—á—ñ—Ç—å –≤—Å—ñ —Ä–æ—É—Ç–µ—Ä–∏ –¥–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp.include_router(base_router)
dp.include_router(main_menu_router)
dp.include_router(profile_router)
# –í–∫–ª—é—á—ñ—Ç—å —ñ–Ω—à—ñ —Ä–æ—É—Ç–µ—Ä–∏ –∑–∞ –ø–æ—Ç—Ä–µ–±–æ—é

async def main():
    try:
        # –ó–∞–ø—É—Å—Ç—ñ—Ç—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        await dp.start_polling(bot)
    finally:
        await bot.close()

if __name__ == '__main__':
    asyncio.run(main())
