# handlers/profile.py

import logging
from io import BytesIO
from typing import Optional
import os

from aiogram import Router, Bot
from aiogram.filters import Command
from aiogram.types import Message, BufferedInputFile
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

from PIL import Image, ImageDraw, ImageFont, ImageOps
import matplotlib.pyplot as plt
import aiohttp

from config import settings  # –í–∞—à —Ñ–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
from models.user import User  # –ú–æ–¥–µ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
from models.user_stats import UserStats  # –ú–æ–¥–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
from utils.db import AsyncSessionLocal  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ AsyncSessionLocal

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
profile_router = Router()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)

# –Ü–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞ –æ–±—Ä–æ–±–Ω–∏–∫–∏...

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /profile
@profile_router.message(Command("profile"))
async def show_profile(message: Message, bot: Bot):
    try:
        async with AsyncSessionLocal() as db:
            telegram_id = message.from_user.id
            username = message.from_user.username or "–ù–µ–≤—ñ–¥–æ–º–æ"
            fullname = f"{message.from_user.first_name} {message.from_user.last_name or ''}".strip() or "–ù–µ–≤—ñ–¥–æ–º–æ"

            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
            stmt = select(User).where(User.telegram_id == telegram_id)
            result = await db.execute(stmt)
            user: Optional[User] = result.scalar_one_or_none()

            if not user:
                # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö, —Å—Ç–≤–æ—Ä—ñ—Ç—å –π–æ–≥–æ
                user = User(
                    telegram_id=telegram_id,
                    username=username,
                    fullname=fullname
                )
                db.add(user)
                await db.commit()
                await db.refresh(user)

            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            stmt = select(UserStats).where(UserStats.user_id == user.id)
            result = await db.execute(stmt)
            stats: Optional[UserStats] = result.scalar_one_or_none()

            if not stats:
                stats = UserStats(user_id=user.id)
                db.add(stats)
                await db.commit()
                await db.refresh(stats)

            # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ—Ñ—ñ–ª—é
            profile_image = await generate_detailed_profile(user, stats, bot)
            input_file = BufferedInputFile(profile_image.read(), filename="profile.png")

            # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è HTML-—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
            profile_text = (
                f"<b>üîé –í–∞—à –ü—Ä–æ—Ñ—ñ–ª—å:</b>\n\n"
                f"üèÖ <b>–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:</b> @{user.username or '–ù–µ–≤—ñ–¥–æ–º–æ'}\n"
                f"üöÄ <b>–†—ñ–≤–µ–Ω—å:</b> {user.level}\n"
                f"üìà <b>–†–µ–π—Ç–∏–Ω–≥:</b> {stats.rating}\n"
                f"üéØ <b>–î–æ—Å—è–≥–Ω–µ–Ω–Ω—è:</b> {stats.achievements_count} –¥–æ—Å—è–≥–Ω–µ–Ω—å\n"
                f"üéÆ <b>–ú–∞—Ç—á—ñ:</b> {stats.total_matches}\n"
                f"üèÜ <b>–ü–µ—Ä–µ–º–æ–≥–∏:</b> {stats.total_wins}\n"
                f"‚ùå <b>–ü–æ—Ä–∞–∑–∫–∏:</b> {stats.total_losses}\n"
                f"\nüìÖ <i>–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:</i> {stats.last_update.strftime('%Y-%m-%d %H:%M:%S')}"
            )

            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ —Ç–µ–∫—Å—Ç—É
            await message.answer_photo(photo=input_file, caption=profile_text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é: {e}")
        await message.answer("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é.")