# file: handlers/profile.py

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, BufferedInputFile
from io import BytesIO
from PIL import Image, ImageDraw, ImageFont
import matplotlib.pyplot as plt
import logging

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
profile_router = Router()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é
async def generate_custom_profile(username: str, rating: int, matches: int, wins: int, losses: int):
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±—ñ–ª–æ–≥–æ —Ñ–æ–Ω—É
    img = Image.new("RGB", (800, 1000), "white")
    draw = ImageDraw.Draw(img)

    # –®—Ä–∏—Ñ—Ç–∏
    try:
        title_font = ImageFont.truetype("arial.ttf", 40)
        content_font = ImageFont.truetype("arial.ttf", 28)
    except:
        title_font = content_font = ImageFont.load_default()

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—É
    draw.text((50, 30), "üîç –ü—Ä–æ—Ñ—ñ–ª—å –ì—Ä–∞–≤—Ü—è", fill="black", font=title_font)

    # –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
    draw.text((50, 150), f"üë§ –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: @{username}", fill="blue", font=content_font)
    draw.text((50, 220), f"üöÄ –†–µ–π—Ç–∏–Ω–≥: {rating}", fill="black", font=content_font)
    draw.text((50, 290), f"üéÆ –ú–∞—Ç—á—ñ: {matches}", fill="black", font=content_font)
    draw.text((50, 360), f"üèÜ –ü–µ—Ä–µ–º–æ–≥–∏: {wins}", fill="green", font=content_font)
    draw.text((50, 430), f"‚ùå –ü–æ—Ä–∞–∑–∫–∏: {losses}", fill="red", font=content_font)

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≥—Ä–∞—Ñ—ñ–∫—É
    fig, ax = plt.subplots(figsize=(4, 2))
    ax.plot([10, 20, 30, 40, 50], [5, 15, 25, 10, 30], color="blue", linewidth=2, marker="o")
    ax.set_facecolor("white")
    ax.grid(True)
    buf = BytesIO()
    plt.savefig(buf, format="PNG", transparent=True)
    plt.close(fig)
    graph = Image.open(buf).resize((400, 200))
    img.paste(graph, (350, 500))

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É –±—É—Ñ–µ—Ä
    output = BytesIO()
    img.save(output, format="PNG")
    output.seek(0)
    return output

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /profile
@profile_router.message(Command("profile"))
async def show_profile(message: Message):
    try:
        username = message.from_user.username or "Unknown"
        profile_image = await generate_custom_profile(username, 100, 20, 15, 5)

        input_file = BufferedInputFile(profile_image.read(), filename="profile.png")
        await message.answer_photo(photo=input_file, caption="üñº –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é: {e}")
        await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é.")
