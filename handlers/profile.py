# handlers/profile.py

import logging
from io import BytesIO
from typing import Optional

from aiogram import Router, Bot
from aiogram.filters import Command
from aiogram.types import Message, BufferedInputFile
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

from PIL import Image, ImageDraw, ImageFont, ImageOps
import matplotlib.pyplot as plt
import aiohttp

from config import settings  # –í–∞—à —Ñ–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
from database import get_db  # –í–∞—à —Ñ–∞–π–ª –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
from models.user import User  # –ú–æ–¥–µ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
from models.user_stats import UserStats  # –ú–æ–¥–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
profile_router = Router()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–∞–Ω–≥—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–µ–π—Ç–∏–Ω–≥—É
def get_rank(rating: int) -> (str, str):
    if rating < 1000:
        return ("Bronze", "#CD7F32")
    elif 1000 <= rating < 2000:
        return ("Silver", "#C0C0C0")
    elif 2000 <= rating < 3000:
        return ("Gold", "#FFD700")
    elif 3000 <= rating < 4000:
        return ("Platinum", "#E5E4E2")
    elif 4000 <= rating < 5000:
        return ("Diamond", "#B9F2FF")
    else:
        return ("Master", "#FF4500")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–≤–∞—Ç–∞—Ä–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Telegram
async def get_user_avatar(bot: Bot, telegram_id: int) -> Optional[Image.Image]:
    try:
        user_photos = await bot.get_user_profile_photos(user_id=telegram_id, limit=1)
        if user_photos.total_count > 0:
            photo = user_photos.photos[0][-1]  # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–π–≤–∏—â—É —Ä–æ–∑–¥—ñ–ª—å–Ω—É –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å
            file_info = await bot.get_file(photo.file_id)
            file_path = file_info.file_path
            async with aiohttp.ClientSession() as session:
                async with session.get(f'https://api.telegram.org/file/bot{settings.TELEGRAM_BOT_TOKEN}/{file_path}') as resp:
                    if resp.status == 200:
                        img_bytes = await resp.read()
                        avatar = Image.open(BytesIO(img_bytes)).convert("RGBA").resize((200, 200))
                        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫—Ä—É–≥–ª–æ–≥–æ –º–∞—Å–∫—É–≤–∞–Ω–Ω—è
                        mask = Image.new("L", avatar.size, 0)
                        draw = ImageDraw.Draw(mask)
                        draw.ellipse((0, 0) + avatar.size, fill=255)
                        avatar.putalpha(mask)
                        return avatar
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∞–≤–∞—Ç–∞—Ä–∫–∏: {e}")
    return None

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
async def generate_detailed_profile(user: User, stats: UserStats, bot: Bot) -> BytesIO:
    # –†–æ–∑–º—ñ—Ä–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    width, height = 1080, 1920
    img = Image.new("RGB", (width, height), "#0F0F0F")  # –¢–µ–º–Ω–∏–π —Ñ–æ–Ω
    draw = ImageDraw.Draw(img)

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —à—Ä–∏—Ñ—Ç—ñ–≤
    try:
        title_font = ImageFont.truetype("fonts/Arial-Bold.ttf", 60)
        header_font = ImageFont.truetype("fonts/Arial-Bold.ttf", 50)
        content_font = ImageFont.truetype("fonts/Arial.ttf", 40)
        small_font = ImageFont.truetype("fonts/Arial.ttf", 30)
    except IOError:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö —à—Ä–∏—Ñ—Ç—ñ–≤, —è–∫—â–æ arial –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
        title_font = ImageFont.load_default()
        header_font = ImageFont.load_default()
        content_font = ImageFont.load_default()
        small_font = ImageFont.load_default()

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    draw.text((50, 30), "üéÆ –ü—Ä–æ—Ñ—ñ–ª—å –ì—Ä–∞–≤—Ü—è", fill="#FFD700", font=title_font)

    # –ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
    info_box_coords = [50, 120, width - 50, 400]
    draw.rectangle(info_box_coords, outline="#007BFF", width=5, fill="#1E1E2E")
    draw.text((70, 150), f"üë§ –ù—ñ–∫–Ω–µ–π–º: @{user.username or '–ù–µ–≤—ñ–¥–æ–º–æ'}", fill="#00CFFF", font=content_font)
    draw.text((70, 220), f"üìù –Ü–º'—è: {user.fullname or '–ù–µ–≤—ñ–¥–æ–º–æ'}", fill="#FFFFFF", font=content_font)
    draw.text((70, 290), f"‚≠ê –†—ñ–≤–µ–Ω—å: {user.level}   üî• –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {stats.activity}%", fill="#FFD700", font=content_font)

    # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    win_rate = (stats.wins / stats.matches) * 100 if stats.matches > 0 else 0
    draw.text((70, 360), f"üèÖ –†–µ–π—Ç–∏–Ω–≥: {stats.rating}", fill="#FFD700", font=content_font)
    draw.text((70, 430), f"üéÆ –ú–∞—Ç—á—ñ: {stats.matches}", fill="#FFFFFF", font=content_font)
    draw.text((500, 430), f"üèÜ –ü–µ—Ä–µ–º–æ–≥–∏: {stats.wins}", fill="#28A745", font=content_font)
    draw.text((800, 430), f"‚ùå –ü–æ—Ä–∞–∑–∫–∏: {stats.losses}", fill="#DC3545", font=content_font)
    draw.text((500, 360), f"üìà Win Rate: {win_rate:.2f}%", fill="#28A745", font=content_font)

    # –°–∏—Å—Ç–µ–º–∞ –†–µ–π—Ç–∏–Ω–≥—ñ–≤
    rank, color = get_rank(stats.rating)
    rank_text = f"üèÖ –†–∞–Ω–≥: {rank}"
    text_width, _ = draw.textsize(rank_text, font=header_font)
    draw.text((width // 2 - text_width // 2, 150), rank_text, fill=color, font=header_font)

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≥—Ä–∞—Ñ—ñ–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    fig, ax = plt.subplots(figsize=(8, 4.5), facecolor="#0F0F0F")
    days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–ù–¥']
    # –ü—Ä–∏–ø—É—Å—Ç–∏–º–æ, —â–æ —É UserStats —î –ø–æ–ª–µ activity_history, —è–∫–µ —î —Å–ø–∏—Å–∫–æ–º –∑–Ω–∞—á–µ–Ω—å
    # –ù–∞–ø—Ä–∏–∫–ª–∞–¥: "activity_history" = "70,75,80,85,90,95,100"
    if stats.activity_history:
        activity_data = list(map(float, stats.activity_history.split(',')))
    else:
        activity_data = [50, 60, 70, 80, 65, 75, 85]
    ax.plot(days, activity_data, color="#00CFFF", linewidth=4, marker="o", markersize=10, markerfacecolor="#FFD700")
    ax.set_title("üìà –ì—Ä–∞—Ñ—ñ–∫ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ", fontsize=20, color="white")
    ax.set_facecolor("#0F0F0F")
    ax.tick_params(colors="white")
    for spine in ax.spines.values():
        spine.set_edgecolor("#444444")
    ax.grid(color="#333333")

    buf = BytesIO()
    plt.savefig(buf, format="PNG", transparent=True)
    plt.close(fig)

    # –í—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞
    graph = Image.open(buf).resize((900, 500))
    img.paste(graph, (90, 750), mask=graph)

    # –ê–≤–∞—Ç–∞—Ä–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    avatar = await get_user_avatar(bot, user.telegram_id)
    if avatar:
        img.paste(avatar, (width // 2 - 100, 300), mask=avatar)
    else:
        try:
            default_avatar = Image.open("default_avatar.png").convert("RGBA").resize((200, 200))
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫—Ä—É–≥–ª–æ–≥–æ –º–∞—Å–∫—É–≤–∞–Ω–Ω—è –¥–ª—è –∑–∞–≥–ª—É—à–∫–∏
            mask = Image.new("L", default_avatar.size, 0)
            draw_mask = ImageDraw.Draw(mask)
            draw_mask.ellipse((0, 0) + default_avatar.size, fill=255)
            default_avatar.putalpha(mask)
            img.paste(default_avatar, (width // 2 - 100, 300), mask=default_avatar)
        except IOError:
            logger.warning("–ê–≤–∞—Ç–∞—Ä–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∑–∞–≥–ª—É—à–∫–∞.")

    # –†–µ–π—Ç–∏–Ω–≥–æ–≤—ñ –ø—ñ–∫—Ç–æ–≥—Ä–∞–º–∏
    try:
        rank_icon = Image.open(f"icons/{rank.lower()}.png").convert("RGBA").resize((100, 100))
        img.paste(rank_icon, (width - 150, 120), mask=rank_icon)
    except IOError:
        logger.warning(f"–ü—ñ–∫—Ç–æ–≥—Ä–∞–º–∞ –¥–ª—è —Ä–∞–Ω–≥—É {rank} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")

    # –ü—Ä–æ–≥—Ä–µ—Å
    draw.text((50, 1300), "üéØ –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å –∑—Ä–æ—Å—Ç–∞—î! –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –≤ —Ç–æ–º—É –∂ –¥—É—Å—ñ!", fill="#FFFFFF", font=small_font)

    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
    # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –¥–æ–¥–∞—Ç–∏ –ª—ñ–Ω—ñ—ó, —ñ–∫–æ–Ω–∫–∏ –∞–±–æ —ñ–Ω—à—ñ –≥—Ä–∞—Ñ—ñ—á–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –≤–∏–≥–ª—è–¥—É

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É –±—É—Ñ–µ—Ä
    output = BytesIO()
    img.save(output, format="PNG")
    output.seek(0)
    return output

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /profile
@profile_router.message(Command("profile"))
async def show_profile(message: Message, session: AsyncSession, bot: Bot):
    try:
        telegram_id = message.from_user.id
        username = message.from_user.username or "–ù–µ–≤—ñ–¥–æ–º–æ"
        fullname = f"{message.from_user.first_name} {message.from_user.last_name or ''}".strip() or "–ù–µ–≤—ñ–¥–æ–º–æ"

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        stmt = select(User).where(User.telegram_id == telegram_id)
        result = await session.execute(stmt)
        user: Optional[User] = result.scalar_one_or_none()

        if not user:
            # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö, —Å—Ç–≤–æ—Ä—ñ—Ç—å –π–æ–≥–æ
            user = User(
                telegram_id=telegram_id,
                username=username,
                fullname=fullname
            )
            session.add(user)
            await session.commit()
            await session.refresh(user)

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        stmt = select(UserStats).where(UserStats.user_id == user.id)
        result = await session.execute(stmt)
        stats: Optional[UserStats] = result.scalar_one_or_none()

        if not stats:
            stats = UserStats(user_id=user.id)
            session.add(stats)
            await session.commit()
            await session.refresh(stats)

        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ—Ñ—ñ–ª—é
        profile_image = await generate_detailed_profile(user, stats, bot)
        input_file = BufferedInputFile(profile_image.read(), filename="profile.png")

        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è HTML-—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
        profile_text = (
            f"<b>üîé –í–∞—à –ü—Ä–æ—Ñ—ñ–ª—å:</b>\n\n"
            f"üèÖ <b>–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:</b> @{user.username or '–ù–µ–≤—ñ–¥–æ–º–æ'}\n"
            f"üöÄ <b>–†—ñ–≤–µ–Ω—å:</b> {stats.rating // 100}\n"
            f"üìà <b>–†–µ–π—Ç–∏–Ω–≥:</b> {stats.rating}\n"
            f"üéØ <b>–î–æ—Å—è–≥–Ω–µ–Ω–Ω—è:</b> {stats.achievements_count} –¥–æ—Å—è–≥–Ω–µ–Ω—å\n"
            f"üéÆ <b>–ú–∞—Ç—á—ñ:</b> {stats.total_matches}\n"
            f"üèÜ <b>–ü–µ—Ä–µ–º–æ–≥–∏:</b> {stats.total_wins}\n"
            f"‚ùå <b>–ü–æ—Ä–∞–∑–∫–∏:</b> {stats.total_losses}\n"
            f"\nüìÖ <i>–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:</i> {stats.last_update.strftime('%Y-%m-%d %H:%M:%S')}"
        )

        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ —Ç–µ–∫—Å—Ç—É
        await message.answer_photo(photo=input_file, caption=profile_text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é: {e}")
        await message.answer("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é.")