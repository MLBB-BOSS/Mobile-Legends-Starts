# handlers/profile.py
import logging
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
from utils.db import get_all_badges, get_user_by_telegram_id
from sqlalchemy.ext.asyncio import AsyncSession
from services.user_service import get_user_profile_text, get_user_rating_history
from utils.charts import generate_rating_chart

logger = logging.getLogger(__name__)
profile_router = Router()

@profile_router.message(Command("profile"))
async def show_profile(message: types.Message, db: AsyncSession):
    user_id = message.from_user.id
    user = await get_user_by_telegram_id(db, user_id)

    if not user:
        await message.answer("–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.")
        return

    try:
        logger.info(f"–û–±—Ä–æ–±–∫–∞ –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø—Ä–æ—Ñ—ñ–ª—å, –≤–∫–ª—é—á–∞—é—á–∏ –±–µ–π–¥–∂—ñ
        profile_text = await get_user_profile_text(db, user_id, user.username or "")

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–µ–π—Ç–∏–Ω–≥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        rating_history = await get_user_rating_history(db, user_id)
        if not rating_history:
            # –Ø–∫—â–æ —ñ—Å—Ç–æ—Ä—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ –±–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ
            rating_history = [100, 120, 140, 180, 210, 230]

        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≥—Ä–∞—Ñ—ñ–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥—É
        chart_bytes = generate_rating_chart(rating_history)
        chart_bytes.seek(0)
        input_file = BufferedInputFile(chart_bytes.read(), filename='rating_chart.png')

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
        inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏ –ë–µ–π–¥–∂—ñ", callback_data="update_badges"),
                InlineKeyboardButton(text="üéñ –î–æ—à–∫–∞ –ù–∞–≥–æ—Ä–æ–¥", callback_data="show_award_board")
            ],
            [
                InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏ ID", callback_data="update_player_id"),
                InlineKeyboardButton(text="üìú –Ü—Å—Ç–æ—Ä—ñ—è", callback_data="show_activity_history")
            ],
            [
                InlineKeyboardButton(text="üíå –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –î—Ä—É–∑—ñ–≤", callback_data="invite_friends"),
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]
        ])

        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –∑ –≥—Ä–∞—Ñ—ñ–∫–æ–º —Ç–∞ —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–æ—Ñ—ñ–ª—é
        await message.answer_photo(
            photo=input_file,
            caption=profile_text,
            parse_mode="HTML",
            reply_markup=inline_keyboard
        )
        logger.info(f"–ü—Ä–æ—Ñ—ñ–ª—å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")

    except Exception as e:
        logger.error(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")
        await message.reply("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")