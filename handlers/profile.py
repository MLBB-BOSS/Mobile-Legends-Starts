import logging
from io import BytesIO
from typing import Optional

from aiogram import Router, Bot
from aiogram.filters import Command
from aiogram.types import Message, BufferedInputFile
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy import Column, Integer, String, Float
from sqlalchemy.orm import declarative_base

from PIL import Image, ImageDraw, ImageFont
import matplotlib.pyplot as plt

from database import get_db  # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
profile_router = Router()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ORM –º–æ–¥–µ–ª—ñ
Base = declarative_base()

class User(Base):
    __tablename__ = 'users'

    id = Column(Integer, primary_key=True, index=True)
    telegram_id = Column(Integer, unique=True, index=True, nullable=False)
    username = Column(String, index=True)
    fullname = Column(String)
    level = Column(Integer, default=1)
    activity = Column(Float, default=0.0)
    rating = Column(Integer, default=0)
    matches = Column(Integer, default=0)
    wins = Column(Integer, default=0)
    losses = Column(Integer, default=0)
    messages_sent = Column(Integer, default=0)
    rating_rank = Column(String, default="Bronze")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–∞–Ω–≥—É
def get_rank(rating: int) -> (str, str):
    if rating < 1000:
        return ("Bronze", "#CD7F32")
    elif 1000 <= rating < 2000:
        return ("Silver", "#C0C0C0")
    elif 2000 <= rating < 3000:
        return ("Gold", "#FFD700")
    elif 3000 <= rating < 4000:
        return ("Platinum", "#E5E4E2")
    elif 4000 <= rating < 5000:
        return ("Diamond", "#B9F2FF")
    else:
        return ("Master", "#FF4500")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é
async def generate_profile_image(user: User) -> BytesIO:
    width, height = 1080, 1920
    img = Image.new("RGB", (width, height), "#1C1C1C")
    draw = ImageDraw.Draw(img)

    # –®—Ä–∏—Ñ—Ç–∏
    try:
        title_font = ImageFont.truetype("arial.ttf", 60)
        content_font = ImageFont.truetype("arial.ttf", 40)
    except:
        title_font = content_font = ImageFont.load_default()

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    draw.text((width // 2 - 200, 30), "üéÆ –ü—Ä–æ—Ñ—ñ–ª—å –ì—Ä–∞–≤—Ü—è", fill="#FFD700", font=title_font)

    # –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
    draw.text((70, 150), f"üë§ –ù—ñ–∫–Ω–µ–π–º: @{user.username}", fill="#00CFFF", font=content_font)
    draw.text((70, 220), f"üìù –Ü–º'—è: {user.fullname}", fill="#FFFFFF", font=content_font)
    draw.text((70, 290), f"‚≠ê –†—ñ–≤–µ–Ω—å: {user.level}", fill="#FFD700", font=content_font)
    draw.text((70, 360), f"üî• –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {user.activity}%", fill="#FFD700", font=content_font)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    draw.text((70, 450), f"üöÄ –†–µ–π—Ç–∏–Ω–≥: {user.rating}", fill="#FFD700", font=content_font)
    draw.text((70, 520), f"üéÆ –ú–∞—Ç—á—ñ: {user.matches}", fill="#FFFFFF", font=content_font)
    draw.text((70, 590), f"üèÜ –ü–µ—Ä–µ–º–æ–≥–∏: {user.wins}", fill="#28A745", font=content_font)
    draw.text((70, 660), f"‚ùå –ü–æ—Ä–∞–∑–∫–∏: {user.losses}", fill="#DC3545", font=content_font)

    # –ì—Ä–∞—Ñ—ñ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    fig, ax = plt.subplots(figsize=(8, 4), facecolor="#1C1C1C")
    activity_data = [user.activity, 50, 60, 70, 80, 65, 75]
    days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–ù–¥"]
    ax.plot(days, activity_data, color="#00CFFF", linewidth=4, marker="o")
    ax.set_title("üìà –ì—Ä–∞—Ñ—ñ–∫ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ", fontsize=16, color="white")
    ax.tick_params(colors="white")
    ax.grid(color="#333333")
    for spine in ax.spines.values():
        spine.set_edgecolor("#444444")
    buf = BytesIO()
    plt.savefig(buf, format="PNG", transparent=True)
    plt.close(fig)

    # –í—Å—Ç–∞–≤–∫–∞ –≥—Ä–∞—Ñ—ñ–∫–∞
    graph = Image.open(buf).resize((900, 500))
    img.paste(graph, (90, 750), mask=graph)

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    output = BytesIO()
    img.save(output, format="PNG")
    output.seek(0)
    return output

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /profile
@profile_router.message(Command("profile"))
async def show_profile(message: Message, bot: Bot):
    try:
        telegram_id = message.from_user.id

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Å—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        async for session in get_db():
            stmt = select(User).where(User.telegram_id == telegram_id)
            result = await session.execute(stmt)
            user: Optional[User] = result.scalar_one_or_none()

            # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î
            if not user:
                user = User(
                    telegram_id=telegram_id,
                    username=message.from_user.username or "Unknown",
                    fullname=message.from_user.full_name,
                    level=1,
                    activity=0.0,
                    rating=0,
                    matches=0,
                    wins=0,
                    losses=0
                )
                session.add(user)
                await session.commit()

            # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ—Ñ—ñ–ª—é
            profile_image = await generate_profile_image(user)
            input_file = BufferedInputFile(profile_image.read(), filename="profile.png")
            await message.answer_photo(photo=input_file, caption="üñº –í–∞—à –ü—Ä–æ—Ñ—ñ–ª—å")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é: {e}")
        await message.answer("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é.")
