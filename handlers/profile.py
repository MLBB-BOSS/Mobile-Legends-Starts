from aiogram import Router, BaseMiddleware
from aiogram.filters import Command
from aiogram.types import Message, BufferedInputFile
from typing import Callable, Dict, Any, Awaitable
from sqlalchemy.ext.asyncio import AsyncSession
from io import BytesIO
from utils.db import get_db_session, get_user_badges
from services.user_service import get_user_profile_text
from utils.charts import generate_rating_chart


class DbSessionMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message,
        data: Dict[str, Any]
    ) -> Any:
        """
        Middleware –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è —Å–µ—Å—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
        """
        db_session = await get_db_session()
        data["db"] = db_session
        try:
            return await handler(event, data)
        finally:
            await db_session.close()


profile_router = Router()
profile_router.message.middleware(DbSessionMiddleware())


@profile_router.message(Command("profile"))
async def show_profile(message: Message, db: AsyncSession):
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –≤–∫–ª—é—á–∞—é—á–∏ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –æ–ø–∏—Å, –±–µ–π–¥–∂—ñ —Ç–∞ –≥—Ä–∞—Ñ—ñ–∫ —Ä–µ–π—Ç–∏–Ω–≥—É.
    """
    try:
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –ø—Ä–æ—Ñ—ñ–ª—é
        profile_data = await get_user_profile_text(
            db, message.from_user.id, message.from_user.username
        )

        # –ó–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é
        if not isinstance(profile_data, dict) or "text" not in profile_data:
            raise ValueError("–§—É–Ω–∫—Ü—ñ—è get_user_profile_text –ø–æ–≤–µ—Ä–Ω—É–ª–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ.")

        profile_text = profile_data["text"]
        rating_history = profile_data.get("rating_history", [])

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–µ–π–¥–∂—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        badges = await get_user_badges(db, message.from_user.id)
        badge_names = [badge.name for badge in badges]
        if badge_names:
            profile_text += f"\nüèÖ –ë–µ–π–¥–∂—ñ: {', '.join(badge_names)}"
        else:
            profile_text += "\nüèÖ –ë–µ–π–¥–∂—ñ: –ù–µ–º–∞—î"

        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≥—Ä–∞—Ñ—ñ–∫—É —Ä–µ–π—Ç–∏–Ω–≥—É
        if not rating_history:
            rating_history = [100]  # –ë–∞–∑–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è, —è–∫—â–æ —ñ—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è

        chart_bytes = generate_rating_chart(rating_history)
        chart_bytes.seek(0)

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è BufferedInputFile –∑ –≥—Ä–∞—Ñ—ñ–∫–æ–º
        input_file = BufferedInputFile(chart_bytes.read(), filename="chart.png")

        # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –ø—Ä–æ—Ñ—ñ–ª—é —Ç–∞ –≥—Ä–∞—Ñ—ñ–∫—É
        await message.answer_photo(photo=input_file, caption=profile_text)

    except Exception as e:
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        await message.answer("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤–∞—à–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        raise e
