# handlers/profile.py

import logging

# –Ø–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ aiogram 3.x, F —ñ–º–ø–æ—Ä—Ç—É—î—Ç—å—Å—è –∑ aiogram:
from aiogram import Router, F, Bot
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession  # –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è db
# –ê–±–æ: from typing import Annotated  # –ó–∞ –±–∞–∂–∞–Ω–Ω—è, —è–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ —ñ–Ω—à—ñ —Ñ—ñ—à–∫–∏

from utils.message_utils import safe_delete_message
from utils.db import get_user_profile
from utils.text_formatter import format_profile_text
from texts import PROFILE_INTERACTIVE_TEXT, GENERIC_ERROR_MESSAGE_TEXT

logger = logging.getLogger(__name__)
router = Router()

@router.message(F.text == "ü§™ –ú—ñ–π –ü—Ä–æ—Ñ—ñ–ª—å")
async def handle_my_profile_handler(message: Message, state: FSMContext, db: AsyncSession, bot: Bot) -> None:
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–µ–∫—Å—Ç–æ–º "ü§™ –ú—ñ–π –ü—Ä–æ—Ñ—ñ–ª—å".
    """
    await safe_delete_message(bot, message.chat.id, message.message_id)
    await process_my_profile(message, state, db, bot)

async def process_my_profile(message: Message, state: FSMContext, db: AsyncSession, bot: Bot) -> None:
    """
    –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
    - –î—ñ—Å—Ç–∞—î –¥–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é –∑ –±–∞–∑–∏
    - –§–æ—Ä–º–∞—Ç—É—î –ø—Ä–æ—Ñ—ñ–ª—å
    - –ù–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    """
    user_id = message.from_user.id
    profile_data = await get_user_profile(db, user_id)

    if profile_data:
        profile_info = {
            "username": profile_data.get('username', 'N/A'),
            "level": profile_data.get('level', 'N/A'),
            "rating": profile_data.get('rating', 'N/A'),
            "achievements_count": profile_data.get('achievements_count', 'N/A'),
            "screenshots_count": profile_data.get('screenshots_count', 'N/A'),
            "missions_count": profile_data.get('missions_count', 'N/A'),
            "quizzes_count": profile_data.get('quizzes_count', 'N/A'),
            "total_matches": profile_data.get('total_matches', 'N/A'),
            "total_wins": profile_data.get('total_wins', 'N/A'),
            "total_losses": profile_data.get('total_losses', 'N/A'),
            "tournament_participations": profile_data.get('tournament_participations', 'N/A'),
            "badges_count": profile_data.get('badges_count', 'N/A'),
            "last_update": (
                profile_data['last_update'].strftime('%d.%m.%Y %H:%M') 
                if profile_data.get('last_update') else 'N/A'
            )
        }
        try:
            formatted_profile_text = format_profile_text(PROFILE_INTERACTIVE_TEXT, profile_info)
        except ValueError as e:
            logger.error(f"Error formatting profile text: {e}")
            await bot.send_message(
                chat_id=message.chat.id,
                text=GENERIC_ERROR_MESSAGE_TEXT
            )
            return
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≥–æ—Ç–æ–≤–∏–º –ø—Ä–æ—Ñ—ñ–ª–µ–º
        await bot.send_message(chat_id=message.chat.id, text=formatted_profile_text)
    else:
        # –Ø–∫—â–æ –ø—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î
        await bot.send_message(chat_id=message.chat.id, text="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")