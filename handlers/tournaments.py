# handlers/tournaments.py

from aiogram import Router, types, Bot
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from keyboards.menus import get_tournaments_menu
from texts import TOURNAMENT_CREATED_TEXT, GENERIC_ERROR_MESSAGE_TEXT
import logging

logger = logging.getLogger(__name__)

router = Router()

class TournamentForm(StatesGroup):
    waiting_for_tournament_type = State()
    waiting_for_tournament_name = State()

@router.message(MenuStates.TOURNAMENTS_MENU)
async def handle_tournaments_menu_buttons(message: types.Message, state: FSMContext, bot: Bot):
    user_choice = message.text
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –æ–±—Ä–∞–≤ {user_choice} –≤ –º–µ–Ω—é –¢—É—Ä–Ω—ñ—Ä–∏")

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    try:
        await message.delete()
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")

    if user_choice == MenuButton.CREATE_TOURNAMENT.value:
        await TournamentForm.waiting_for_tournament_type.set()
        await bot.send_message(
            chat_id=message.chat.id,
            text="üèÜ <b>–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¢—É—Ä–Ω—ñ—Ä—É</b>\n\n–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç—É—Ä–Ω—ñ—Ä—É:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="5—Ö5"), KeyboardButton(text="2—Ö2")],
                    [KeyboardButton(text="1 –Ω–∞ 1")],
                    [KeyboardButton(text=MenuButton.BACK.value)]
                ],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
    elif user_choice == MenuButton.VIEW_TOURNAMENTS.value:
        # –õ–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–≥–ª—è–¥—É —Ç—É—Ä–Ω—ñ—Ä—ñ–≤
        await bot.send_message(
            chat_id=message.chat.id,
            text="üìã <b>–ê–∫—Ç–∏–≤–Ω—ñ –¢—É—Ä–Ω—ñ—Ä–∏</b>",
            reply_markup=get_tournaments_menu()
        )
    elif user_choice == MenuButton.BACK.value:
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–æ–≥–æ –º–µ–Ω—é
        await bot.send_message(
            chat_id=message.chat.id,
            text="üîô <b>–ù–∞–≤—ñ–≥–∞—Ü—ñ—è</b>",
            reply_markup=get_navigation_menu()
        )
        await state.set_state(MenuStates.NAVIGATION_MENU)
    else:
        await bot.send_message(
            chat_id=message.chat.id,
            text="‚ùó –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é.",
            reply_markup=get_tournaments_menu()
        )

@router.message(TournamentForm.waiting_for_tournament_type)
async def process_tournament_type(message: types.Message, state: FSMContext, bot: Bot):
    tournament_type = message.text.strip()
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –æ–±—Ä–∞–≤ —Ç–∏–ø —Ç—É—Ä–Ω—ñ—Ä—É: {tournament_type}")

    if tournament_type not in ["5—Ö5", "2—Ö2", "1 –Ω–∞ 1"]:
        await bot.send_message(
            chat_id=message.chat.id,
            text="‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ç–∏–ø —Ç—É—Ä–Ω—ñ—Ä—É.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="5—Ö5"), KeyboardButton(text="2—Ö2")],
                    [KeyboardButton(text="1 –Ω–∞ 1")],
                    [KeyboardButton(text=MenuButton.BACK.value)]
                ],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        return

    await state.update_data(tournament_type=tournament_type)
    await TournamentForm.next()

    await bot.send_message(
        chat_id=message.chat.id,
        text="üìù –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç—É—Ä–Ω—ñ—Ä—É:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=MenuButton.BACK.value)]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )

@router.message(TournamentForm.waiting_for_tournament_name)
async def process_tournament_name(message: types.Message, state: FSMContext, bot: Bot):
    tournament_name = message.text.strip()
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} —Å—Ç–≤–æ—Ä—é—î —Ç—É—Ä–Ω—ñ—Ä: {tournament_name}")

    if tournament_name == MenuButton.BACK.value:
        await TournamentForm.previous()
        await bot.send_message(
            chat_id=message.chat.id,
            text="üîô <b>–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¢—É—Ä–Ω—ñ—Ä—É</b>\n\n–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç—É—Ä–Ω—ñ—Ä—É:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="5—Ö5"), KeyboardButton(text="2—Ö2")],
                    [KeyboardButton(text="1 –Ω–∞ 1")],
                    [KeyboardButton(text=MenuButton.BACK.value)]
                ],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        return

    if not tournament_name:
        await bot.send_message(
            chat_id=message.chat.id,
            text="‚ùó –ù–∞–∑–≤–∞ —Ç—É—Ä–Ω—ñ—Ä—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç—É—Ä–Ω—ñ—Ä—É:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text=MenuButton.BACK.value)]
                ],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        return

    # –¢—É—Ç –¥–æ–¥–∞–π—Ç–µ –ª–æ–≥—ñ–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç—É—Ä–Ω—ñ—Ä—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, save_tournament(tournament_name, tournament_type)

    await bot.send_message(
        chat_id=message.chat.id,
        text=TOURNAMENT_CREATED_TEXT.format(tournament_name=tournament_name),
        reply_markup=get_tournaments_menu()
    )

    await state.finish()
