from aiogram import Router, types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from keyboards.menus import MenuButton, get_tournaments_menu, get_tournament_type_menu, get_active_tournaments_menu, get_navigation_menu
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import logging

# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—É—Ä–Ω—ñ—Ä—É
class TournamentCreation(StatesGroup):
    waiting_for_tournament_type = State()
    waiting_for_tournament_name = State()
    waiting_for_tournament_description = State()
    waiting_for_tournament_date_time = State()
    waiting_for_tournament_requirements = State()
    confirmation = State()

logger = logging.getLogger(__name__)

router = Router()

def register_handlers(dp: Dispatcher):
    # –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "üèÜ –¢—É—Ä–Ω—ñ—Ä–∏"
    @dp.message_handler(lambda message: message.text == MenuButton.TOURNAMENTS.value)
    async def tournaments_menu_handler(message: types.Message):
        await message.answer("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –¢—É—Ä–Ω—ñ—Ä–∞–º–∏:", reply_markup=get_tournaments_menu())

    # –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "üÜï –°—Ç–≤–æ—Ä–∏—Ç–∏ –¢—É—Ä–Ω—ñ—Ä"
    @dp.message_handler(lambda message: message.text == MenuButton.CREATE_TOURNAMENT.value)
    async def create_tournament_handler(message: types.Message):
        await TournamentCreation.waiting_for_tournament_type.set()
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç—É—Ä–Ω—ñ—Ä—É:", reply_markup=get_tournament_type_menu())

    # –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¢—É—Ä–Ω—ñ—Ä–∏"
    @dp.message_handler(lambda message: message.text == MenuButton.VIEW_TOURNAMENTS.value)
    async def view_tournaments_handler(message: types.Message):
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ç—É—Ä–Ω—ñ—Ä—ñ–≤
        await message.answer("–ü–µ—Ä–µ–≥–ª—è–¥ —Ç—É—Ä–Ω—ñ—Ä—ñ–≤ —â–µ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.", reply_markup=get_tournaments_menu())

    # –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É —Ç—É—Ä–Ω—ñ—Ä—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "5—Ö5", "2—Ö2", "1 –Ω–∞ 1")
    @dp.message_handler(lambda message: message.text in ["5—Ö5", "2—Ö2", "1 –Ω–∞ 1"], state=TournamentCreation.waiting_for_tournament_type)
    async def tournament_type_selected_handler(message: types.Message, state: FSMContext):
        await state.update_data(tournament_type=message.text)
        await TournamentCreation.next()
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç—É—Ä–Ω—ñ—Ä—É:")

    # –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ —Ç—É—Ä–Ω—ñ—Ä—É
    @dp.message_handler(state=TournamentCreation.waiting_for_tournament_name)
    async def tournament_name_handler(message: types.Message, state: FSMContext):
        await state.update_data(tournament_name=message.text)
        await TournamentCreation.next()
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å —Ç—É—Ä–Ω—ñ—Ä—É:")

    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ñ–æ—Ä–º–∞—Ç—É –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å—É
    def validate_datetime(date_text):
        from datetime import datetime
        try:
            datetime.strptime(date_text, '%Y-%m-%d %H:%M')
            return True
        except ValueError:
            return False

    # –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å—É
    @dp.message_handler(lambda message: not validate_datetime(message.text), state=TournamentCreation.waiting_for_tournament_date_time)
    async def invalid_datetime_handler(message: types.Message):
        await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD HH:MM.")

    # –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å—É
    @dp.message_handler(lambda message: validate_datetime(message.text), state=TournamentCreation.waiting_for_tournament_date_time)
    async def tournament_date_time_handler(message: types.Message, state: FSMContext):
        await state.update_data(tournament_date_time=message.text)
        await TournamentCreation.next()
        await message.answer("–í–∫–∞–∂—ñ—Ç—å —É–º–æ–≤–∏ —É—á–∞—Å—Ç—ñ:")

    # –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è —É–º–æ–≤ —É—á–∞—Å—Ç—ñ
    @dp.message_handler(state=TournamentCreation.waiting_for_tournament_requirements)
    async def tournament_requirements_handler(message: types.Message, state: FSMContext):
        await state.update_data(tournament_requirements=message.text)
        user_data = await state.get_data()

        # –§–æ—Ä–º—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        confirmation_text = (
            f"–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—É—Ä–Ω—ñ—Ä—É:\n\n"
            f"–¢–∏–ø: {user_data['tournament_type']}\n"
            f"–ù–∞–∑–≤–∞: {user_data['tournament_name']}\n"
            f"–û–ø–∏—Å: {user_data['tournament_description']}\n"
            f"–î–∞—Ç–∞ —Ç–∞ –ß–∞—Å: {user_data['tournament_date_time']}\n"
            f"–£–º–æ–≤–∏ –£—á–∞—Å—Ç—ñ: {user_data['tournament_requirements']}\n"
        )

        # –ö–Ω–æ–ø–∫–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        confirmation_buttons = [
            KeyboardButton(text="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏"),
            KeyboardButton(text="–í—ñ–¥—Ö–∏–ª–∏—Ç–∏")
        ]
        confirmation_keyboard = ReplyKeyboardMarkup(keyboard=[confirmation_buttons], resize_keyboard=True)

        await TournamentCreation.next()
        await message.answer(confirmation_text, reply_markup=confirmation_keyboard)

    # –û–±—Ä–æ–±–Ω–∏–∫ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—É—Ä–Ω—ñ—Ä—É
    @dp.message_handler(lambda message: message.text == "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", state=TournamentCreation.confirmation)
    async def tournament_confirm_handler(message: types.Message, state: FSMContext):
        user_data = await state.get_data()
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç—É—Ä–Ω—ñ—Ä—É
        await message.answer("–¢—É—Ä–Ω—ñ—Ä —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=get_navigation_menu())
        await state.finish()

    # –û–±—Ä–æ–±–Ω–∏–∫ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—É—Ä–Ω—ñ—Ä—É
    @dp.message_handler(lambda message: message.text == "–í—ñ–¥—Ö–∏–ª–∏—Ç–∏", state=TournamentCreation.confirmation)
    async def tournament_cancel_handler(message: types.Message, state: FSMContext):
        await message.answer("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—É—Ä–Ω—ñ—Ä—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.", reply_markup=get_tournaments_menu())
        await state.finish()

    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è —Ç—É—Ä–Ω—ñ—Ä—ñ–≤ (–∑–∞–≥–ª—É—à–∫–∏)
    from aiogram.dispatcher.filters import Text

    @dp.message_handler(Text(startswith="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –¢—É—Ä–Ω—ñ—Ä "), state=None)
    async def approve_tournament_handler(message: types.Message):
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç—É—Ä–Ω—ñ—Ä—É
        await message.answer("–¢—É—Ä–Ω—ñ—Ä –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ (–∑–∞–≥–ª—É—à–∫–∞).", reply_markup=get_navigation_menu())

    @dp.message_handler(Text(startswith="–í—ñ–¥—Ö–∏–ª–∏—Ç–∏ –¢—É—Ä–Ω—ñ—Ä "), state=None)
    async def reject_tournament_handler(message: types.Message):
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è —Ç—É—Ä–Ω—ñ—Ä—É
        await message.answer("–¢—É—Ä–Ω—ñ—Ä –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ (–∑–∞–≥–ª—É—à–∫–∞).", reply_markup=get_navigation_menu())

    # –û–±—Ä–æ–±–Ω–∏–∫ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–∞ —Ç—É—Ä–Ω—ñ—Ä (–∑–∞–≥–ª—É—à–∫–∞)
    @dp.message_handler(lambda message: message.text.startswith("–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è –Ω–∞ –¢—É—Ä–Ω—ñ—Ä "), state=None)
    async def register_tournament_handler(message: types.Message):
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–∞ —Ç—É—Ä–Ω—ñ—Ä
        await message.answer("–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—è –Ω–∞ —Ç—É—Ä–Ω—ñ—Ä (–∑–∞–≥–ª—É—à–∫–∞).", reply_markup=get_navigation_menu())