# handlers/tournaments.py

from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup  # –û–Ω–æ–≤–ª–µ–Ω–∏–π —ñ–º–ø–æ—Ä—Ç
from keyboards.menus import (
    MenuButton,
    get_tournaments_menu,
    get_tournament_type_menu,
    get_active_tournaments_menu,
    get_navigation_menu
)
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import logging
from datetime import datetime

# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—É—Ä–Ω—ñ—Ä—É
class TournamentCreation(StatesGroup):
    waiting_for_tournament_type = State()
    waiting_for_tournament_name = State()
    waiting_for_tournament_description = State()
    waiting_for_tournament_date_time = State()
    waiting_for_tournament_requirements = State()
    confirmation = State()

logger = logging.getLogger(__name__)

router = Router()

# –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ñ–æ—Ä–º–∞—Ç—É –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å—É
def validate_datetime(date_text: str) -> bool:
    try:
        datetime.strptime(date_text, '%Y-%m-%d %H:%M')
        return True
    except ValueError:
        return False

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "üèÜ –¢—É—Ä–Ω—ñ—Ä–∏"
@router.message(lambda message: message.text == MenuButton.TOURNAMENTS.value)
async def tournaments_menu_handler(message: types.Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –¢—É—Ä–Ω—ñ—Ä–∞–º–∏:", reply_markup=get_tournaments_menu())

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "üÜï –°—Ç–≤–æ—Ä–∏—Ç–∏ –¢—É—Ä–Ω—ñ—Ä"
@router.message(lambda message: message.text == MenuButton.CREATE_TOURNAMENT.value)
async def create_tournament_handler(message: types.Message, state: FSMContext):
    await state.set_state(TournamentCreation.waiting_for_tournament_type)
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç—É—Ä–Ω—ñ—Ä—É:", reply_markup=get_tournament_type_menu())

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¢—É—Ä–Ω—ñ—Ä–∏"
@router.message(lambda message: message.text == MenuButton.VIEW_TOURNAMENTS.value)
async def view_tournaments_handler(message: types.Message):
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ç—É—Ä–Ω—ñ—Ä—ñ–≤
    await message.answer("–ü–µ—Ä–µ–≥–ª—è–¥ —Ç—É—Ä–Ω—ñ—Ä—ñ–≤ —â–µ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.", reply_markup=get_tournaments_menu())

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É —Ç—É—Ä–Ω—ñ—Ä—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "5—Ö5", "2—Ö2", "1 –Ω–∞ 1")
@router.message(
    lambda message: message.text in ["5—Ö5", "2—Ö2", "1 –Ω–∞ 1"],
    TournamentCreation.waiting_for_tournament_type
)
async def tournament_type_selected_handler(message: types.Message, state: FSMContext):
    await state.update_data(tournament_type=message.text)
    await state.set_state(TournamentCreation.waiting_for_tournament_name)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç—É—Ä–Ω—ñ—Ä—É:")

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ —Ç—É—Ä–Ω—ñ—Ä—É
@router.message(TournamentCreation.waiting_for_tournament_name)
async def tournament_name_handler(message: types.Message, state: FSMContext):
    await state.update_data(tournament_name=message.text)
    await state.set_state(TournamentCreation.waiting_for_tournament_description)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å —Ç—É—Ä–Ω—ñ—Ä—É:")

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –æ–ø–∏—Å—É —Ç—É—Ä–Ω—ñ—Ä—É
@router.message(TournamentCreation.waiting_for_tournament_description)
async def tournament_description_handler(message: types.Message, state: FSMContext):
    await state.update_data(tournament_description=message.text)
    await state.set_state(TournamentCreation.waiting_for_tournament_date_time)
    await message.answer(
        "–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å —Ç—É—Ä–Ω—ñ—Ä—É —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD HH:MM:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å—É
@router.message(
    lambda message: not validate_datetime(message.text),
    TournamentCreation.waiting_for_tournament_date_time
)
async def invalid_datetime_handler(message: types.Message):
    await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD HH:MM.")

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å—É
@router.message(
    lambda message: validate_datetime(message.text),
    TournamentCreation.waiting_for_tournament_date_time
)
async def valid_datetime_handler(message: types.Message, state: FSMContext):
    await state.update_data(tournament_date_time=message.text)
    await state.set_state(TournamentCreation.waiting_for_tournament_requirements)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∏–º–æ–≥–∏ –¥–æ —Ç—É—Ä–Ω—ñ—Ä—É:")

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –≤–∏–º–æ–≥ –¥–æ —Ç—É—Ä–Ω—ñ—Ä—É
@router.message(TournamentCreation.waiting_for_tournament_requirements)
async def tournament_requirements_handler(message: types.Message, state: FSMContext):
    await state.update_data(tournament_requirements=message.text)
    await state.set_state(TournamentCreation.confirmation)
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö –∑ FSM
    data = await state.get_data()
    tournament_info = (
        f"**–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¢—É—Ä–Ω—ñ—Ä—É:**\n\n"
        f"**–¢–∏–ø:** {data.get('tournament_type')}\n"
        f"**–ù–∞–∑–≤–∞:** {data.get('tournament_name')}\n"
        f"**–û–ø–∏—Å:** {data.get('tournament_description')}\n"
        f"**–î–∞—Ç–∞ —Ç–∞ –ß–∞—Å:** {data.get('tournament_date_time')}\n"
        f"**–í–∏–º–æ–≥–∏:** {data.get('tournament_requirements')}\n\n"
        f"–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î—Ç–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—É—Ä–Ω—ñ—Ä—É?"
    )
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    confirmation_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –¢–∞–∫"), KeyboardButton(text="‚ùå –ù—ñ")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(tournament_info, reply_markup=confirmation_keyboard)

# –û–±—Ä–æ–±–Ω–∏–∫ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—É—Ä–Ω—ñ—Ä—É
@router.message(
    lambda message: message.text == "‚úÖ –¢–∞–∫",
    TournamentCreation.confirmation
)
async def confirm_tournament_creation_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    
    # –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç—É—Ä–Ω—ñ—Ä—É –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    # –ù–∞–ø—Ä–∏–∫–ª–∞–¥:
    # await save_tournament_to_db(data)
    
    await message.answer("–¢—É—Ä–Ω—ñ—Ä —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!", reply_markup=get_tournaments_menu())
    await state.clear()

# –û–±—Ä–æ–±–Ω–∏–∫ –≤—ñ–¥–º—ñ–Ω–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—É—Ä–Ω—ñ—Ä—É
@router.message(
    lambda message: message.text == "‚ùå –ù—ñ",
    TournamentCreation.confirmation
)
async def cancel_tournament_creation_handler(message: types.Message, state: FSMContext):
    await message.answer("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—É—Ä–Ω—ñ—Ä—É –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ.", reply_markup=get_tournaments_menu())
    await state.clear()

def setup_handlers(router: Router):
    # –†–µ—î—Å—Ç—Ä—É—î–º–æ –≤—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    pass  # –£ aiogram 3.x –æ–±—Ä–æ–±–Ω–∏–∫–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —á–µ—Ä–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∏