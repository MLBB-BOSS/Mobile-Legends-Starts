# File: handlers/profile_handlers.py

from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command, Text
from keyboards.profile_menu import ProfileMenu
from utils.localization import loc
import logging

logger = logging.getLogger(__name__)
router = Router()
profile_menu = ProfileMenu()

@router.message(Command("profile"))
async def show_profile_menu(message: Message):
    """Handler for the /profile command"""
    try:
        await message.answer(
            text=loc.get_message("messages.profile.main_menu") or "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –ø—Ä–æ—Ñ—ñ–ª—é:",
            reply_markup=profile_menu.get_profile_menu()
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –ø—Ä–æ—Ñ—ñ–ª—å–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@router.message(F.text == loc.get_message("buttons.statistics") or F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics_menu(message: Message):
    """Handler for statistics button"""
    try:
        await message.answer(
            text=loc.get_message("messages.profile.statistics_menu") or "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            reply_markup=profile_menu.get_statistics_menu()
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@router.message(F.text == loc.get_message("buttons.achievements") or F.text == "üèÜ –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è")
async def show_achievements_menu(message: Message):
    """Handler for achievements button"""
    try:
        await message.answer(
            text=loc.get_message("messages.profile.achievements_menu") or "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –¥–æ—Å—è–≥–Ω–µ–Ω—å:",
            reply_markup=profile_menu.get_achievements_menu()
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –º–µ–Ω—é –¥–æ—Å—è–≥–Ω–µ–Ω—å: {e}")
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@router.message(F.text == loc.get_message("buttons.personal_stats") or F.text == "üë§ –û—Å–æ–±–∏—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_personal_stats(message: Message):
    """Handler for personal statistics button"""
    try:
        # Here you would implement the logic to fetch and display personal statistics
        stats_text = "–í–∞—à–∞ –æ—Å–æ–±–∏—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n" # Placeholder text
        await message.answer(
            text=stats_text,
            reply_markup=profile_menu.get_statistics_menu()
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –æ—Å–æ–±–∏—Å—Ç–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

@router.message(F.text == loc.get_message("buttons.global_stats") or F.text == "üåê –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_global_stats(message: Message):
    """Handler for global statistics button"""
    try:
        # Here you would implement the logic to fetch and display global statistics
        stats_text = "–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—É—Ä–Ω—ñ—Ä—ñ–≤:\n" # Placeholder text
        await message.answer(
            text=stats_text,
            reply_markup=profile_menu.get_statistics_menu()
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

@router.message(F.text == loc.get_message("buttons.back") or F.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
async def handle_back_button(message: Message):
    """Handler for back button"""
    try:
        await show_profile_menu(message)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥: {e}")
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
