# handlers/menu_profile.py

import logging
from aiogram import Router, F, Bot
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

from handlers.states import MenuStates  # –Ü–º–ø–æ—Ä—Ç MenuStates
from keyboards.menus import (
    MenuButton, get_profile_menu, get_statistics_menu,
    get_achievements_menu, get_settings_menu, get_feedback_menu,
    get_help_menu, get_main_menu, get_generic_inline_keyboard
)
from texts import (
    MAIN_MENU_ERROR_TEXT, PROFILE_MENU_TEXT,
    UNKNOWN_COMMAND_TEXT, CHANGE_USERNAME_RESPONSE_TEXT, FEEDBACK_RECEIVED_TEXT,
    BUG_REPORT_RECEIVED_TEXT, GENERIC_ERROR_MESSAGE_TEXT,
    MAIN_MENU_TEXT, MAIN_MENU_DESCRIPTION
)

from utils.db import get_user_profile  # –ü—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)

profile_router = Router()

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "ü™™ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å"
@profile_router.message(F.text == "ü™™ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å")
async def open_profile_menu(message: Message, state: FSMContext, db: AsyncSession, bot: Bot):
    logger.info(f"User {message.from_user.id} clicked 'ü™™ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å'")
    user_id = message.from_user.id

    # –û—Ç—Ä–∏–º–∞–π—Ç–µ –¥–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    profile_data = await get_user_profile(db=db, user_id=user_id)

    if profile_data:
        profile_message = (
            f"üîç <b>–í–∞—à –ü—Ä–æ—Ñ—ñ–ª—å:</b>\n\n"
            f"‚Ä¢ üèÖ –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {profile_data['username']}\n"
            f"‚Ä¢ üß¨ –†—ñ–≤–µ–Ω—å: {profile_data['level']}\n"
            f"‚Ä¢ üìà –†–µ–π—Ç–∏–Ω–≥: {profile_data['rating']}\n"
            f"‚Ä¢ üéØ –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è: {profile_data['achievements_count']} –¥–æ—Å—è–≥–Ω–µ–Ω—å\n"
            f"‚Ä¢ üì∏ –°–∫—Ä—ñ–Ω—à–æ—Ç–∏: {profile_data['screenshots_count']}\n"
            f"‚Ä¢ üéØ –ú—ñ—Å—ñ—ó: {profile_data['missions_count']}\n"
            f"‚Ä¢ üß© –í—ñ–∫—Ç–æ—Ä–∏–Ω–∏: {profile_data['quizzes_count']}\n"
            f"‚Ä¢ üèÜ –ó–∞–≥–∞–ª—å–Ω—ñ –º–∞—Ç—á—ñ: {profile_data['total_matches']}\n"
            f"‚Ä¢ ü•á –í–∏–≥—Ä–∞—à—ñ: {profile_data['total_wins']}\n"
            f"‚Ä¢ ü•à –ü–æ—Ä–∞–∑–∫–∏: {profile_data['total_losses']}\n"
            f"‚Ä¢ üåü –¢—É—Ä–Ω—ñ—Ä–Ω—ñ –£—á–∞—Å—Ç—ñ: {profile_data['tournament_participations']}\n"
            f"‚Ä¢ üèÖ –ë–µ–π–¥–∂—ñ–≤: {profile_data['badges_count']}\n"
            f"‚Ä¢ üìÖ –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {profile_data['last_update'].strftime('%d.%m.%Y %H:%M')}\n\n"
            f"–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é, —â–æ–± —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å —á–∏ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."
        )
        reply_markup = get_profile_menu()
    else:
        profile_message = "‚ùå –î–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."
        reply_markup = get_generic_inline_keyboard()

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Ñ—ñ–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    try:
        profile_bot_message = await bot.send_message(
            chat_id=message.chat.id,
            text=profile_message,
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup
        )
        await state.update_data(bot_message_id=profile_bot_message.message_id)
        await state.set_state(MenuStates.PROFILE_MENU)
        logger.info("Sent PROFILE_MENU_TEXT")
    except Exception as e:
        logger.error(f"Failed to send profile menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Å—Ç–∞–Ω—É PROFILE_MENU —Ç–∞ —ñ–Ω—à–∏—Ö –ø—Ä–æ—Ñ—ñ–ª—å–Ω–∏—Ö —Å—Ç–∞–Ω—ñ–≤
@profile_router.message(MenuStates.PROFILE_MENU)
async def handle_profile_menu_buttons(message: Message, state: FSMContext, db: AsyncSession, bot: Bot):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected {user_choice} in Profile Menu")
    await message.delete()
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        main_message = await bot.send_message(chat_id=message.chat.id, text=MAIN_MENU_ERROR_TEXT, reply_markup=get_main_menu())
        await state.update_data(bot_message_id=main_message.message_id)
        await state.set_state(MenuStates.MAIN_MENU)
        return

    new_main_text = ""
    new_main_keyboard = get_profile_menu()
    new_interactive_text = ""
    new_state = MenuStates.PROFILE_MENU

    if user_choice == MenuButton.STATISTICS.value:
        new_main_text = "üìä –ú–µ–Ω—é –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        new_main_keyboard = get_statistics_menu()
        new_interactive_text = "Statistics Menu"
        new_state = MenuStates.STATISTICS_MENU
    elif user_choice == MenuButton.ACHIEVEMENTS.value:
        new_main_text = "üèÖ –ú–µ–Ω—é –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è"
        new_main_keyboard = get_achievements_menu()
        new_interactive_text = "Achievements Menu"
        new_state = MenuStates.ACHIEVEMENTS_MENU
    elif user_choice == MenuButton.SETTINGS.value:
        new_main_text = "‚öôÔ∏è –ú–µ–Ω—é –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"
        new_main_keyboard = get_settings_menu()
        new_interactive_text = "Settings Menu"
        new_state = MenuStates.SETTINGS_MENU
    elif user_choice == MenuButton.FEEDBACK.value:
        new_main_text = "üìù –ú–µ–Ω—é –ó–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É"
        new_main_keyboard = get_feedback_menu()
        new_interactive_text = "Feedback Menu"
        new_state = MenuStates.FEEDBACK_MENU
    elif user_choice == MenuButton.HELP.value:
        new_main_text = "‚ùì –ú–µ–Ω—é –î–æ–ø–æ–º–æ–≥–∏"
        new_main_keyboard = get_help_menu()
        new_interactive_text = "Help Menu"
        new_state = MenuStates.HELP_MENU
    elif user_choice == MenuButton.BACK.value:
        new_main_text = MAIN_MENU_TEXT.format(user_first_name=message.from_user.first_name)
        new_main_keyboard = get_main_menu()
        new_interactive_text = MAIN_MENU_DESCRIPTION
        new_state = MenuStates.MAIN_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_interactive_text = "Unknown command"
        new_state = MenuStates.PROFILE_MENU

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—é –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
    try:
        main_message = await bot.send_message(chat_id=message.chat.id, text=new_main_text, reply_markup=new_main_keyboard)
        new_bot_message_id = main_message.message_id
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–æ–≤–µ –≥–æ–ª–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        return

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞
    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=bot_message_id)
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞: {e}")

    await state.update_data(bot_message_id=new_bot_message_id)

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è MLS
    try:
        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=interactive_message_id,
            text=new_interactive_text,
            parse_mode=ParseMode.HTML,
            reply_markup=get_generic_inline_keyboard()
        )
        logger.info("Successfully edited interactive message to new state description")
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        try:
            interactive_message = await bot.send_message(
                chat_id=message.chat.id,
                text=new_interactive_text,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(interactive_message_id=interactive_message.message_id)
            logger.info("Sent new interactive message for new state")
        except Exception as e2:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É: {e2}")

    await state.set_state(new_state)

# –Ü–Ω—à—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ (–∑–º—ñ–Ω–∞ —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –∑–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤'—è–∑–æ–∫, –∑–≤—ñ—Ç–∏ –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏) –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω
# –í–æ–Ω–∏ –≤–∂–µ –≤–∫–ª—é—á–µ–Ω—ñ —É –≤–∞—à `menu_profile.py`

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∑ Dispatcher
def setup_handlers(dp: Router):
    dp.include_router(profile_router)
