import logging
from aiogram import Router, F, Bot, Dispatcher
from aiogram.filters import Command
from aiogram.filters.text import Text  # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π —ñ–º–ø–æ—Ä—Ç
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, ParseMode  # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π —ñ–º–ø–æ—Ä—Ç
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

from utils.db import get_user_profile, search_hero, save_suggestion  # –Ü–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
import models.user
import models.user_stats
import models.hero  # –ü—Ä–∏–ø—É—Å—Ç–∏–º–æ, —î –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ—Ä–æ—ó–≤

from keyboards.menus import (
    MenuButton, get_main_menu, get_profile_menu, get_navigation_menu,
    get_heroes_menu, get_hero_class_menu, get_guides_menu,
    get_counter_picks_menu, get_builds_menu, get_voting_menu, get_statistics_menu,
    get_achievements_menu, get_settings_menu, get_feedback_menu, get_help_menu,
    get_tournaments_menu, get_meta_menu, get_m6_menu, get_gpt_menu
)
from keyboards.inline_menus import (
    get_generic_inline_keyboard,
    get_intro_page_1_keyboard,
    get_intro_page_2_keyboard,
    get_intro_page_3_keyboard
)
from texts import (
    INTRO_PAGE_1_TEXT, INTRO_PAGE_2_TEXT, INTRO_PAGE_3_TEXT, MAIN_MENU_TEXT,
    MAIN_MENU_DESCRIPTION, MAIN_MENU_ERROR_TEXT, NAVIGATION_MENU_TEXT,
    NAVIGATION_INTERACTIVE_TEXT, PROFILE_MENU_TEXT, PROFILE_INTERACTIVE_TEXT,
    UNKNOWN_COMMAND_TEXT, ERROR_MESSAGE_TEXT, HEROES_MENU_TEXT,
    HEROES_INTERACTIVE_TEXT, HERO_CLASS_MENU_TEXT, HERO_CLASS_INTERACTIVE_TEXT,
    GUIDES_MENU_TEXT, GUIDES_INTERACTIVE_TEXT, NEW_GUIDES_TEXT, POPULAR_GUIDES_TEXT,
    BEGINNER_GUIDES_TEXT, ADVANCED_TECHNIQUES_TEXT, TEAMPLAY_GUIDES_TEXT,
    COUNTER_PICKS_MENU_TEXT, COUNTER_PICKS_INTERACTIVE_TEXT, COUNTER_SEARCH_TEXT,
    COUNTER_LIST_TEXT, BUILDS_MENU_TEXT, BUILDS_INTERACTIVE_TEXT, CREATE_BUILD_TEXT,
    MY_BUILDS_TEXT, POPULAR_BUILDS_TEXT, VOTING_MENU_TEXT, VOTING_INTERACTIVE_TEXT,
    CURRENT_VOTES_TEXT, MY_VOTES_TEXT, SUGGEST_TOPIC_TEXT, SUGGESTION_RESPONSE_TEXT,
    STATISTICS_MENU_TEXT, STATISTICS_INTERACTIVE_TEXT, ACTIVITY_TEXT, RANKING_TEXT,
    GAME_STATS_TEXT, ACHIEVEMENTS_MENU_TEXT, ACHIEVEMENTS_INTERACTIVE_TEXT,
    BADGES_TEXT, PROGRESS_TEXT, TOURNAMENT_STATS_TEXT, AWARDS_TEXT,
    SETTINGS_MENU_TEXT, SETTINGS_INTERACTIVE_TEXT, LANGUAGE_TEXT,
    CHANGE_USERNAME_TEXT, UPDATE_ID_TEXT, NOTIFICATIONS_TEXT,
    FEEDBACK_MENU_TEXT, FEEDBACK_INTERACTIVE_TEXT, SEND_FEEDBACK_TEXT,
    REPORT_BUG_TEXT, FEEDBACK_RECEIVED_TEXT, BUG_REPORT_RECEIVED_TEXT,
    HELP_MENU_TEXT, HELP_INTERACTIVE_TEXT, INSTRUCTIONS_TEXT, FAQ_TEXT,
    HELP_SUPPORT_TEXT, GENERIC_ERROR_MESSAGE_TEXT, USE_BUTTON_NAVIGATION_TEXT,
    SEARCH_HERO_RESPONSE_TEXT, CHANGE_USERNAME_RESPONSE_TEXT, MLS_BUTTON_RESPONSE_TEXT,
    UNHANDLED_INLINE_BUTTON_TEXT, MAIN_MENU_BACK_TO_PROFILE_TEXT,
    TOURNAMENT_CREATE_TEXT, TOURNAMENT_VIEW_TEXT, META_HERO_LIST_TEXT,
    META_RECOMMENDATIONS_TEXT, META_UPDATES_TEXT, M6_INFO_TEXT, M6_STATS_TEXT,
    M6_NEWS_TEXT
)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()

# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤ –º–µ–Ω—é
class MenuStates(StatesGroup):
    INTRO_PAGE_1 = State()
    INTRO_PAGE_2 = State()
    INTRO_PAGE_3 = State()
    MAIN_MENU = State()
    PROFILE_MENU = State()
    NAVIGATION_MENU = State()
    HEROES_MENU = State()
    HERO_CLASS_MENU = State()
    GUIDES_MENU = State()
    COUNTER_PICKS_MENU = State()
    BUILDS_MENU = State()
    VOTING_MENU = State()
    STATISTICS_MENU = State()
    ACHIEVEMENTS_MENU = State()
    SETTINGS_MENU = State()
    FEEDBACK_MENU = State()
    HELP_MENU = State()
    SEARCH_HERO = State()
    SEARCH_TOPIC = State()
    CHANGE_USERNAME = State()
    RECEIVE_FEEDBACK = State()
    REPORT_BUG = State()
    TOURNAMENTS_MENU = State()
    META_MENU = State()
    M6_MENU = State()
    GPT_MENU = State()

# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å–ª–æ–≤–Ω–∏–∫–∞ –¥–ª—è –∫–ª–∞—Å—ñ–≤ –≥–µ—Ä–æ—ó–≤
menu_button_to_class = {
    "üõ°Ô∏è –¢–∞–Ω–∫": "–¢–∞–Ω–∫",
    "üßô‚Äç‚ôÇÔ∏è –ú–∞–≥": "–ú–∞–≥",
    "üèπ –°—Ç—Ä—ñ–ª–µ—Ü—å": "–ú–∞—Ä–∫—Å–º–µ–Ω",
    "‚öîÔ∏è –ê—Å–∞—Å—ñ–Ω": "–ê—Å–∞—Å—ñ–Ω",
    "‚ù§Ô∏è –ü—ñ–¥—Ç—Ä–∏–º–∫–∞": "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞",
    "üó°Ô∏è –ë–æ—î—Ü—å": "–§–∞–π—Ç–µ—Ä"
}

# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó

async def get_heroes_by_class(db: AsyncSession, hero_class: str) -> list:
    """
    –û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –≥–µ—Ä–æ—ó–≤ –¥–ª—è –∑–∞–¥–∞–Ω–æ–≥–æ –∫–ª–∞—Å—É.
    """
    result = await db.execute(select(models.hero.Hero).where(models.hero.Hero.class_ == hero_class))
    heroes = result.scalars().all()
    return [hero.name for hero in heroes]

async def search_hero(db: AsyncSession, hero_name: str) -> dict:
    """
    –®—É–∫–∞—î –≥–µ—Ä–æ—è –∑–∞ —ñ–º'—è–º.
    """
    result = await db.execute(select(models.hero.Hero).where(models.hero.Hero.name.ilike(f"%{hero_name}%")))
    hero = result.scalars().first()
    if hero:
        return {
            'name': hero.name,
            'class': hero.class_,
            'rating': hero.rating,
            'description': hero.description
        }
    return None

async def save_suggestion(topic: str, user_id: int):
    """
    –ó–±–µ—Ä—ñ–≥–∞—î –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é —Ç–µ–º–∏.
    """
    # –†–µ–∞–ª—ñ–∑—É–π—Ç–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –∞–±–æ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
    pass

async def send_or_update_interactive_message(
    bot: Bot,
    chat_id: int,
    text: str,
    keyboard,
    message_id: int = None,
    state: FSMContext = None,
    parse_mode: str = ParseMode.HTML
) -> int:
    """
    –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ.
    """
    if message_id:
        try:
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=text,
                reply_markup=keyboard,
                parse_mode=parse_mode
            )
            logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id} —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ.")
            return message_id
        except Exception as e:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id}: {e}")

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è –∞–±–æ message_id –≤—ñ–¥—Å—É—Ç–Ω—ñ–π
    try:
        new_message = await bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=keyboard,
            parse_mode=parse_mode
        )
        logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {new_message.message_id}.")
        if state:
            await state.update_data(interactive_message_id=new_message.message_id)
        return new_message.message_id
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        return message_id

async def safe_delete_message(bot: Bot, chat_id: int, message_id: int):
    """
    –ë–µ–∑–ø–µ—á–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –æ–±—Ä–æ–±–∫–æ—é –≤–∏–∫–ª—é—á–µ–Ω—å.
    """
    if message_id:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=message_id)
            logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id}: {e}")

async def check_and_edit_message(
    bot: Bot,
    chat_id: int,
    message_id: int,
    new_text: str,
    new_keyboard,
    state: FSMContext,
    parse_mode: str = ParseMode.HTML
):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–∏ —Ç–µ–∫—Å—Ç—É –∞–±–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
    """
    state_data = await state.get_data()
    last_text = state_data.get('last_text')
    last_keyboard = state_data.get('last_keyboard')

    if last_text != new_text or last_keyboard != new_keyboard:
        try:
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=new_text,
                reply_markup=new_keyboard,
                parse_mode=parse_mode
            )
            await state.update_data(last_text=new_text, last_keyboard=new_keyboard)
            logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id} —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.")
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id}: {e}")
            await bot.send_message(
                chat_id=chat_id,
                text=GENERIC_ERROR_MESSAGE_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )

async def transition_state(state: FSMContext, new_state: State):
    """
    –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É –±–µ–∑ –æ—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–∞–Ω—É.
    """
    await state.set_state(new_state)

# –£–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –º–µ–Ω—é
async def handle_menu(
    user_choice: str,
    state: FSMContext,
    db: AsyncSession,
    bot: Bot,
    chat_id: int,
    current_state: str,
    main_menu_error: str,
    main_menu_keyboard_func,
    main_menu_text: str,
    interactive_text: str,
    new_state: State
):
    logger.info(f"User selected '{user_choice}' in {current_state}")
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            main_message = await bot.send_message(chat_id=chat_id, text=main_menu_error, reply_markup=main_menu_keyboard_func())
            await state.update_data(bot_message_id=main_message.message_id)
            await state.set_state(MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        return

    # –õ–æ–≥—ñ–∫–∞ –¥–ª—è –≤–∏–±–æ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if user_choice == MenuButton.NAVIGATION.value:
        new_main_text = NAVIGATION_MENU_TEXT
        new_main_keyboard = get_navigation_menu()
        new_interactive_text = NAVIGATION_INTERACTIVE_TEXT
        new_state = MenuStates.NAVIGATION_MENU
    elif user_choice == MenuButton.PROFILE.value:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        profile_data = await get_user_profile(db, chat_id)
        if profile_data:
            # –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
            detailed_profile_message = (
                f"üîç <b>–í–∞—à –ü—Ä–æ—Ñ—ñ–ª—å:</b>\n\n"
                f"‚Ä¢ üèÖ –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {profile_data['username']}\n"
                f"‚Ä¢ üß¨ –†—ñ–≤–µ–Ω—å: {profile_data['level']}\n"
                f"‚Ä¢ üìà –†–µ–π—Ç–∏–Ω–≥: {profile_data['rating']}\n"
                f"‚Ä¢ üéØ –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è: {profile_data['achievements_count']} –¥–æ—Å—è–≥–Ω–µ–Ω—å\n"
                f"‚Ä¢ üì∏ –°–∫—Ä—ñ–Ω—à–æ—Ç–∏: {profile_data['screenshots_count']}\n"
                f"‚Ä¢ üéØ –ú—ñ—Å—ñ—ó: {profile_data['missions_count']}\n"
                f"‚Ä¢ üß© –í—ñ–∫—Ç–æ—Ä–∏–Ω–∏: {profile_data['quizzes_count']}\n"
                f"‚Ä¢ üèÜ –ó–∞–≥–∞–ª—å–Ω—ñ –º–∞—Ç—á—ñ: {profile_data['total_matches']}\n"
                f"‚Ä¢ ü•á –í–∏–≥—Ä–∞—à—ñ: {profile_data['total_wins']}\n"
                f"‚Ä¢ ü•à –ü–æ—Ä–∞–∑–∫–∏: {profile_data['total_losses']}\n"
                f"‚Ä¢ üåü –¢—É—Ä–Ω—ñ—Ä–Ω—ñ –£—á–∞—Å—Ç—ñ: {profile_data['tournament_participations']}\n"
                f"‚Ä¢ üèÖ –ë–µ–π–¥–∂—ñ–≤: {profile_data['badges_count']}\n"
                f"‚Ä¢ üìÖ –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {profile_data['last_update'].strftime('%d.%m.%Y %H:%M')}\n\n"
                f"–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é, —â–æ–± —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å —á–∏ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."
            )
            # –ö–æ—Ä–æ—Ç–∫–µ —Ä–µ–∑—é–º–µ —É –∑–≤–∏—á–∞–π–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
            short_summary = f"–í–∞—à —Ä—ñ–≤–µ–Ω—å: {profile_data['level']}\n–†–µ–π—Ç–∏–Ω–≥: {profile_data['rating']}"
            new_main_text = short_summary
            new_main_keyboard = get_profile_menu()
            new_interactive_text = detailed_profile_message
            new_state = MenuStates.PROFILE_MENU
        else:
            new_main_text = "‚ùå –î–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."
            new_main_keyboard = get_main_menu()
            new_interactive_text = "–ú–µ–Ω—é –ü—Ä–æ—Ñ—ñ–ª—å"
            new_state = MenuStates.PROFILE_MENU
    elif user_choice == MenuButton.TOURNAMENTS.value:
        new_main_text = TOURNAMENT_CREATE_TEXT
        new_main_keyboard = get_tournaments_menu()
        new_interactive_text = "–ú–µ–Ω—é –¢—É—Ä–Ω—ñ—Ä–∏"
        new_state = MenuStates.TOURNAMENTS_MENU
    elif user_choice == MenuButton.META.value:
        new_main_text = META_RECOMMENDATIONS_TEXT
        new_main_keyboard = get_meta_menu()
        new_interactive_text = "–ú–µ–Ω—é META"
        new_state = MenuStates.META_MENU
    elif user_choice == MenuButton.M6.value:
        new_main_text = M6_INFO_TEXT
        new_main_keyboard = get_m6_menu()
        new_interactive_text = "–ú–µ–Ω—é M6"
        new_state = MenuStates.M6_MENU
    elif user_choice == MenuButton.GPT.value:
        new_main_text = "ü§ñ –ú–µ–Ω—é GPT"
        new_main_keyboard = get_gpt_menu()
        new_interactive_text = "–ú–µ–Ω—é GPT"
        new_state = MenuStates.GPT_MENU
    else:
        # –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = main_menu_keyboard_func()
        new_interactive_text = "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞"
        new_state = MenuStates.MAIN_MENU

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    try:
        main_message = await bot.send_message(chat_id=chat_id, text=new_main_text, reply_markup=new_main_keyboard)
        new_bot_message_id = main_message.message_id
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        return

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await safe_delete_message(bot, chat_id, bot_message_id)

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await check_and_edit_message(
        bot=bot,
        chat_id=chat_id,
        message_id=interactive_message_id,
        new_text=new_interactive_text,
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∑ –Ω–æ–≤–∏–º–∏ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    await state.update_data(bot_message_id=new_bot_message_id)

    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É
    await state.set_state(new_state)

# –û–±—Ä–æ–±–Ω–∏–∫–∏

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start –∑ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—î—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext, db: AsyncSession, bot: Bot):
    user_id = message.from_user.id
    async with db.begin():
        user_result = await db.execute(select(models.user.User).where(models.user.User.telegram_id == user_id))
        user = user_result.scalars().first()
        if not user:
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            new_user = models.user.User(telegram_id=user_id, username=message.from_user.username)
            db.add(new_user)
            await db.flush()  # –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –ø–µ—Ä–µ–¥ commit
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            new_stats = models.user_stats.UserStats(user_id=new_user.id)
            db.add(new_stats)
            await db.commit()
            logger.info(f"Registered new user: {user_id}")
        else:
            logger.info(f"Existing user: {user_id}")

    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –Ω–∞ INTRO_PAGE_1
    await transition_state(state, MenuStates.INTRO_PAGE_1)

    try:
        interactive_message = await bot.send_message(
            chat_id=message.chat.id,
            text=INTRO_PAGE_1_TEXT,
            parse_mode=ParseMode.HTML,
            reply_markup=get_intro_page_1_keyboard()
        )
        await state.update_data(
            interactive_message_id=interactive_message.message_id,
            last_text=INTRO_PAGE_1_TEXT,
            last_keyboard=get_intro_page_1_keyboard()
        )
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—Å—Ç—É–ø–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É 1: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –≤—Å—Ç—É–ø–Ω–∏—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫
@router.callback_query(Text(equals="intro_next_1"))
async def handle_intro_next_1(callback: CallbackQuery, state: FSMContext, bot: Bot):
    current_state = await state.get_state()
    if current_state != MenuStates.INTRO_PAGE_1.state:
        logger.warning(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Å—Ç–∞–Ω –¥–ª—è 'intro_next_1': {current_state}")
        await bot.answer_callback_query(callback.id, text="–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥—ñ—è –¥–ª—è —Ü—å–æ–≥–æ —Å—Ç–∞–Ω—É.", show_alert=True)
        return

    state_data = await state.get_data()
    interactive_message_id = state_data.get('interactive_message_id')

    new_text = INTRO_PAGE_2_TEXT
    new_keyboard = get_intro_page_2_keyboard()
    new_state = MenuStates.INTRO_PAGE_2

    await check_and_edit_message(
        bot=bot,
        chat_id=callback.message.chat.id,
        message_id=interactive_message_id,
        new_text=new_text,
        new_keyboard=new_keyboard,
        state=state,
        parse_mode=ParseMode.HTML
    )
    await state.set_state(new_state)
    await callback.answer()

@router.callback_query(Text(equals="intro_next_2"))
async def handle_intro_next_2(callback: CallbackQuery, state: FSMContext, bot: Bot):
    current_state = await state.get_state()
    if current_state != MenuStates.INTRO_PAGE_2.state:
        logger.warning(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Å—Ç–∞–Ω –¥–ª—è 'intro_next_2': {current_state}")
        await bot.answer_callback_query(callback.id, text="–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥—ñ—è –¥–ª—è —Ü—å–æ–≥–æ —Å—Ç–∞–Ω—É.", show_alert=True)
        return

    state_data = await state.get_data()
    interactive_message_id = state_data.get('interactive_message_id')

    new_text = INTRO_PAGE_3_TEXT
    new_keyboard = get_intro_page_3_keyboard()
    new_state = MenuStates.INTRO_PAGE_3

    await check_and_edit_message(
        bot=bot,
        chat_id=callback.message.chat.id,
        message_id=interactive_message_id,
        new_text=new_text,
        new_keyboard=new_keyboard,
        state=state,
        parse_mode=ParseMode.HTML
    )
    await state.set_state(new_state)
    await callback.answer()

@router.callback_query(Text(equals="intro_start"))
async def handle_intro_start(callback: CallbackQuery, state: FSMContext, bot: Bot):
    current_state = await state.get_state()
    if current_state not in [MenuStates.INTRO_PAGE_1.state, MenuStates.INTRO_PAGE_2.state, MenuStates.INTRO_PAGE_3.state]:
        logger.warning(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Å—Ç–∞–Ω –¥–ª—è 'intro_start': {current_state}")
        await bot.answer_callback_query(callback.id, text="–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥—ñ—è –¥–ª—è —Ü—å–æ–≥–æ —Å—Ç–∞–Ω—É.", show_alert=True)
        return

    user_first_name = callback.from_user.first_name
    main_menu_text_formatted = MAIN_MENU_TEXT.format(user_first_name=user_first_name)

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    try:
        main_menu_message = await bot.send_message(
            chat_id=callback.message.chat.id,
            text=main_menu_text_formatted,
            reply_markup=get_main_menu()
        )
        await state.update_data(bot_message_id=main_menu_message.message_id)
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é: {e}")

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    state_data = await state.get_data()
    interactive_message_id = state_data.get('interactive_message_id')
    new_interactive_text = MAIN_MENU_DESCRIPTION
    new_interactive_keyboard = get_generic_inline_keyboard()

    interactive_message_id = await send_or_update_interactive_message(
        bot=bot,
        chat_id=callback.message.chat.id,
        text=new_interactive_text,
        keyboard=new_interactive_keyboard,
        message_id=interactive_message_id,
        state=state,
        parse_mode=ParseMode.HTML
    )

    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –Ω–∞ MAIN_MENU
    await state.set_state(MenuStates.MAIN_MENU)
    await callback.answer()

# –£–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(MenuStates.MAIN_MENU)
async def handle_main_menu_buttons(message: Message, state: FSMContext, db: AsyncSession, bot: Bot):
    user_choice = message.text
    current_state = await state.get_state()
    await safe_delete_message(bot, message.chat.id, message.message_id)

    await handle_menu(
        user_choice=user_choice,
        state=state,
        db=db,
        bot=bot,
        chat_id=message.chat.id,
        current_state=current_state,
        main_menu_error=MAIN_MENU_ERROR_TEXT,
        main_menu_keyboard_func=get_main_menu,
        main_menu_text=MAIN_MENU_TEXT,
        interactive_text=MAIN_MENU_DESCRIPTION,
        new_state=MenuStates.MAIN_MENU
    )

# –û–±—Ä–æ–±—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "ü™™ –ú—ñ–π –ü—Ä–æ—Ñ—ñ–ª—å"
@router.message(Text(equals="ü™™ –ú—ñ–π –ü—Ä–æ—Ñ—ñ–ª—å"))
async def handle_my_profile(message: Message, state: FSMContext, db: AsyncSession, bot: Bot):
    user_id = message.from_user.id
    profile_data = await get_user_profile(db, user_id)  # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∑ –ë–î

    await safe_delete_message(bot, message.chat.id, message.message_id)

    if profile_data:
        # –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
        detailed_profile_message = (
            f"üîç <b>–í–∞—à –ü—Ä–æ—Ñ—ñ–ª—å:</b>\n\n"
            f"‚Ä¢ üèÖ –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {profile_data['username']}\n"
            f"‚Ä¢ üß¨ –†—ñ–≤–µ–Ω—å: {profile_data['level']}\n"
            f"‚Ä¢ üìà –†–µ–π—Ç–∏–Ω–≥: {profile_data['rating']}\n"
            f"‚Ä¢ üéØ –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è: {profile_data['achievements_count']} –¥–æ—Å—è–≥–Ω–µ–Ω—å\n"
            f"‚Ä¢ üì∏ –°–∫—Ä—ñ–Ω—à–æ—Ç–∏: {profile_data['screenshots_count']}\n"
            f"‚Ä¢ üéØ –ú—ñ—Å—ñ—ó: {profile_data['missions_count']}\n"
            f"‚Ä¢ üß© –í—ñ–∫—Ç–æ—Ä–∏–Ω–∏: {profile_data['quizzes_count']}\n"
            f"‚Ä¢ üèÜ –ó–∞–≥–∞–ª—å–Ω—ñ –º–∞—Ç—á—ñ: {profile_data['total_matches']}\n"
            f"‚Ä¢ ü•á –í–∏–≥—Ä–∞—à—ñ: {profile_data['total_wins']}\n"
            f"‚Ä¢ ü•à –ü–æ—Ä–∞–∑–∫–∏: {profile_data['total_losses']}\n"
            f"‚Ä¢ üåü –¢—É—Ä–Ω—ñ—Ä–Ω—ñ –£—á–∞—Å—Ç—ñ: {profile_data['tournament_participations']}\n"
            f"‚Ä¢ üèÖ –ë–µ–π–¥–∂—ñ–≤: {profile_data['badges_count']}\n"
            f"‚Ä¢ üìÖ –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {profile_data['last_update'].strftime('%d.%m.%Y %H:%M')}\n\n"
            f"–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é, —â–æ–± —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å —á–∏ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."
        )
        # –ö–æ—Ä–æ—Ç–∫–µ —Ä–µ–∑—é–º–µ —É –∑–≤–∏—á–∞–π–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
        short_summary = f"–í–∞—à —Ä—ñ–≤–µ–Ω—å: {profile_data['level']}\n–†–µ–π—Ç–∏–Ω–≥: {profile_data['rating']}"
        new_main_text = short_summary
        new_main_keyboard = get_profile_menu()
        new_interactive_text = detailed_profile_message
        new_state = MenuStates.PROFILE_MENU
    else:
        new_main_text = "‚ùå –î–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."
        new_main_keyboard = get_main_menu()
        new_interactive_text = "–ú–µ–Ω—é –ü—Ä–æ—Ñ—ñ–ª—å"
        new_state = MenuStates.PROFILE_MENU

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è IDs –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ —Å—Ç–∞–Ω—É
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            main_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_main_menu()
            )
            await state.update_data(bot_message_id=main_message.message_id)
            await state.set_state(MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        return

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    try:
        main_message = await bot.send_message(
            chat_id=message.chat.id,
            text=new_main_text,
            reply_markup=new_main_keyboard
        )
        new_bot_message_id = main_message.message_id
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        return

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text=new_interactive_text,
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∑ –Ω–æ–≤–∏–º–∏ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    await state.update_data(bot_message_id=new_bot_message_id)

    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É
    await state.set_state(new_state)

# –û–±—Ä–æ–±—á–∏–∫ –º–µ–Ω—é "Feedback Menu"
@router.message(MenuStates.FEEDBACK_MENU)
async def handle_feedback_menu_buttons(message: Message, state: FSMContext, db: AsyncSession, bot: Bot):
    user_choice = message.text
    current_state = await state.get_state()
    await safe_delete_message(bot, message.chat.id, message.message_id)

    await handle_menu(
        user_choice=user_choice,
        state=state,
        db=db,
        bot=bot,
        chat_id=message.chat.id,
        current_state=current_state,
        main_menu_error=MAIN_MENU_ERROR_TEXT,
        main_menu_keyboard_func=get_main_menu,
        main_menu_text=MAIN_MENU_TEXT,
        interactive_text=MAIN_MENU_DESCRIPTION,
        new_state=MenuStates.FEEDBACK_MENU
    )

# –û–±—Ä–æ–±—á–∏–∫ –∑–º—ñ–Ω–∏ —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@router.message(MenuStates.CHANGE_USERNAME)
async def handle_change_username(message: Message, state: FSMContext, db: AsyncSession, bot: Bot):
    new_username = message.text.strip()
    user_id = message.from_user.id
    logger.info(f"User {user_id} is changing username to: {new_username}")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    if new_username:
        try:
            async with db.begin():
                user_result = await db.execute(select(models.user.User).where(models.user.User.telegram_id == user_id))
                user = user_result.scalars().first()
                if user:
                    user.username = new_username
                    await db.commit()
                    response_text = CHANGE_USERNAME_RESPONSE_TEXT.format(new_username=new_username)
                    logger.info(f"User {user_id} changed username to: {new_username}")
                else:
                    response_text = "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å, —â–æ–± –∑–º—ñ–Ω–∏—Ç–∏ —ñ–º'—è."
        except Exception as e:
            logger.error(f"Error updating username for user_id {user_id}: {e}")
            response_text = "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."
    else:
        response_text = "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π Username."

    try:
        await bot.send_message(chat_id=message.chat.id, text=response_text, reply_markup=get_generic_inline_keyboard())
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —ñ–º–µ–Ω—ñ: {e}")

    await state.set_state(MenuStates.SETTINGS_MENU)

# –û–±—Ä–æ–±—á–∏–∫ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É
@router.message(MenuStates.RECEIVE_FEEDBACK)
async def handle_receive_feedback(message: Message, state: FSMContext, db: AsyncSession, bot: Bot):
    feedback = message.text.strip()
    user_id = message.from_user.id
    logger.info(f"User {user_id} sent feedback: {feedback}")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    if feedback:
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –∞–±–æ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
        # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É —Ç–∞–±–ª–∏—Ü—ñ Feedback
        # from models.feedback import Feedback
        # new_feedback = Feedback(user_id=user_id, feedback=feedback)
        # db.add(new_feedback)
        # await db.commit()

        response_text = FEEDBACK_RECEIVED_TEXT
        logger.info(f"Feedback received from user {user_id}")
    else:
        response_text = "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ª–∏—à—Ç–µ —Å–≤—ñ–π –≤—ñ–¥–≥—É–∫."

    try:
        await bot.send_message(chat_id=message.chat.id, text=response_text, reply_markup=get_generic_inline_keyboard())
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É: {e}")

    await state.set_state(MenuStates.FEEDBACK_MENU)

# –û–±—Ä–æ–±—á–∏–∫ –∑–≤—ñ—Ç—É –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
@router.message(MenuStates.REPORT_BUG)
async def handle_report_bug(message: Message, state: FSMContext, db: AsyncSession, bot: Bot):
    bug_report = message.text.strip()
    user_id = message.from_user.id
    logger.info(f"User {user_id} reported a bug: {bug_report}")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    if bug_report:
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–≤—ñ—Ç—É –ø—Ä–æ –ø–æ–º–∏–ª–∫—É —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –∞–±–æ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
        # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É —Ç–∞–±–ª–∏—Ü—ñ BugReports
        # from models.bug_report import BugReport
        # new_bug = BugReport(user_id=user_id, report=bug_report)
        # db.add(new_bug)
        # await db.commit()

        response_text = BUG_REPORT_RECEIVED_TEXT
        logger.info(f"Bug report received from user {user_id}")
    else:
        response_text = "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à—ñ—Ç—å –ø–æ–º–∏–ª–∫—É, —è–∫—É –≤–∏ –∑—É—Å—Ç—Ä—ñ–ª–∏."

    try:
        await bot.send_message(chat_id=message.chat.id, text=response_text, reply_markup=get_generic_inline_keyboard())
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤—ñ—Ç—É –ø—Ä–æ –ø–æ–º–∏–ª–∫—É: {e}")

    await state.set_state(MenuStates.FEEDBACK_MENU)

# –û–±—Ä–æ–±—á–∏–∫ –º–µ–Ω—é "Navigation Menu"
@router.message(MenuStates.NAVIGATION_MENU)
async def handle_navigation_menu_buttons(message: Message, state: FSMContext, db: AsyncSession, bot: Bot):
    user_choice = message.text
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –æ–±—Ä–∞–≤ {user_choice} –≤ –º–µ–Ω—é –ù–∞–≤—ñ–≥–∞—Ü—ñ—è")

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await message.delete()

    # –û—Ç—Ä–∏–º—É—î–º–æ IDs –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ —Å—Ç–∞–Ω—É
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
        main_message = await bot.send_message(
            chat_id=message.chat.id,
            text=MAIN_MENU_ERROR_TEXT,
            reply_markup=get_main_menu()
        )
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞
        await state.update_data(bot_message_id=main_message.message_id)
        await state.set_state(MenuStates.MAIN_MENU)
        return

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç —Ç–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    new_main_text = ""
    new_main_keyboard = None
    new_interactive_text = ""
    new_interactive_keyboard = get_generic_inline_keyboard()
    new_state = None

    if user_choice == MenuButton.HEROES.value:
        new_main_text = HEROES_MENU_TEXT
        new_main_keyboard = get_heroes_menu()
        new_interactive_text = HEROES_INTERACTIVE_TEXT
        new_state = MenuStates.HEROES_MENU
    elif user_choice == MenuButton.GUIDES.value:
        new_main_text = GUIDES_MENU_TEXT
        new_main_keyboard = get_guides_menu()
        new_interactive_text = GUIDES_INTERACTIVE_TEXT
        new_state = MenuStates.GUIDES_MENU
    elif user_choice == MenuButton.COUNTER_PICKS.value:
        new_main_text = COUNTER_PICKS_MENU_TEXT
        new_main_keyboard = get_counter_picks_menu()
        new_interactive_text = COUNTER_PICKS_INTERACTIVE_TEXT
        new_state = MenuStates.COUNTER_PICKS_MENU
    elif user_choice == MenuButton.BUILDS.value:
        new_main_text = BUILDS_MENU_TEXT
        new_main_keyboard = get_builds_menu()
        new_interactive_text = BUILDS_INTERACTIVE_TEXT
        new_state = MenuStates.BUILDS_MENU
    elif user_choice == MenuButton.VOTING.value:
        new_main_text = VOTING_MENU_TEXT
        new_main_keyboard = get_voting_menu()
        new_interactive_text = VOTING_INTERACTIVE_TEXT
        new_state = MenuStates.VOTING_MENU
    elif user_choice == MenuButton.BACK.value:
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        user_first_name = message.from_user.first_name
        new_main_text = MAIN_MENU_TEXT.format(user_first_name=user_first_name)
        new_main_keyboard = get_main_menu()
        new_interactive_text = MAIN_MENU_DESCRIPTION
        new_state = MenuStates.MAIN_MENU
    else:
        # –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_navigation_menu()
        new_interactive_text = "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞"
        new_state = MenuStates.NAVIGATION_MENU

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    try:
        main_message = await bot.send_message(
            chat_id=message.chat.id,
            text=new_main_text,
            reply_markup=new_main_keyboard
        )
        new_bot_message_id = main_message.message_id
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        return

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text=new_interactive_text,
        new_keyboard=new_interactive_keyboard,
        state=state
    )

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∑ –Ω–æ–≤–∏–º–∏ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    await state.update_data(bot_message_id=new_bot_message_id)

    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É
    await state.set_state(new_state)

# –û–±—Ä–æ–±—á–∏–∫ –º–µ–Ω—é "Heroes Menu"
@router.message(MenuStates.HEROES_MENU)
async def handle_heroes_menu_buttons(message: Message, state: FSMContext, db: AsyncSession, bot: Bot):
    user_choice = message.text
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –æ–±—Ä–∞–≤ {user_choice} –≤ –º–µ–Ω—é –ü–µ—Ä—Å–æ–Ω–∞–∂—ñ")

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await message.delete()

    # –û—Ç—Ä–∏–º—É—î–º–æ IDs –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ —Å—Ç–∞–Ω—É
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
        try:
            main_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_main_menu()
            )
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞
            await state.update_data(bot_message_id=main_message.message_id)
            await state.set_state(MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        return

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç —Ç–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    new_main_text = ""
    new_main_keyboard = None
    new_interactive_text = ""
    new_state = None

    hero_classes = list(menu_button_to_class.keys())

    if user_choice in hero_classes:
        hero_class = menu_button_to_class.get(user_choice, '–¢–∞–Ω–∫')
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –≥–µ—Ä–æ—ó–≤ –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ –∫–ª–∞—Å—É
        heroes_list = await get_heroes_by_class(db, hero_class)
        new_main_text = HERO_CLASS_MENU_TEXT.format(hero_class=hero_class)
        new_main_keyboard = get_hero_class_menu(hero_class)
        new_interactive_text = HERO_CLASS_INTERACTIVE_TEXT.format(hero_class=hero_class, heroes_list=", ".join(heroes_list))
        new_state = MenuStates.HERO_CLASS_MENU
        await state.update_data(hero_class=hero_class, heroes_list=heroes_list)
    elif user_choice == MenuButton.SEARCH_HERO.value:
        new_main_text = "üîç –í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –≥–µ—Ä–æ—è –¥–ª—è –ø–æ—à—É–∫—É:"
        new_main_keyboard = ReplyKeyboardRemove()
        new_interactive_text = "–ü–æ—à—É–∫ –≥–µ—Ä–æ—è"
        new_state = MenuStates.SEARCH_HERO
    elif user_choice == MenuButton.COMPARISON.value:
        new_main_text = "–§—É–Ω–∫—Ü—ñ—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≥–µ—Ä–æ—ó–≤ —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
        new_main_keyboard = get_heroes_menu()
        new_interactive_text = "–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≥–µ—Ä–æ—ó–≤"
        new_state = MenuStates.HEROES_MENU
    elif user_choice == MenuButton.BACK.value:
        new_main_text = NAVIGATION_MENU_TEXT
        new_main_keyboard = get_navigation_menu()
        new_interactive_text = NAVIGATION_INTERACTIVE_TEXT
        new_state = MenuStates.NAVIGATION_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_hero_class_menu(data.get('hero_class', '–¢–∞–Ω–∫'))
        new_interactive_text = "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞"
        new_state = MenuStates.HEROES_MENU

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    try:
        main_message = await bot.send_message(
            chat_id=message.chat.id,
            text=new_main_text,
            reply_markup=new_main_keyboard
        )
        new_bot_message_id = main_message.message_id
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        return

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text=new_interactive_text,
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∑ –Ω–æ–≤–∏–º–∏ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    await state.update_data(bot_message_id=new_bot_message_id)

    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É
    await state.set_state(new_state)

# –û–±—Ä–æ–±—á–∏–∫ –¥–ª—è —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
@router.callback_query()
async def handle_inline_buttons(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = callback.data
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} –Ω–∞—Ç–∏—Å–Ω—É–≤ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É: {data}")

    # –û—Ç—Ä–∏–º—É—î–º–æ interactive_message_id –∑ —Å—Ç–∞–Ω—É
    state_data = await state.get_data()
    interactive_message_id = state_data.get('interactive_message_id')

    if interactive_message_id:
        # –û–±—Ä–æ–±–ª—è—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
        if data == "mls_button":
            await bot.answer_callback_query(callback.id, text=MLS_BUTTON_RESPONSE_TEXT)
        elif data == "menu_back":
            # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
            await state.set_state(MenuStates.MAIN_MENU)
            new_interactive_text = MAIN_MENU_DESCRIPTION
            new_interactive_keyboard = get_generic_inline_keyboard()

            # –†–µ–¥–∞–≥—É—î–º–æ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            try:
                await bot.edit_message_text(
                    chat_id=callback.message.chat.id,
                    message_id=interactive_message_id,
                    text=new_interactive_text,
                    reply_markup=new_interactive_keyboard
                )
            except Exception as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
            user_first_name = callback.from_user.first_name
            main_menu_text_formatted = MAIN_MENU_TEXT.format(user_first_name=user_first_name)
            try:
                main_message = await bot.send_message(
                    chat_id=callback.message.chat.id,
                    text=main_menu_text_formatted,
                    reply_markup=get_main_menu()
                )
                # –û–Ω–æ–≤–ª—é—î–º–æ bot_message_id
                await state.update_data(bot_message_id=main_message.message_id)
            except Exception as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é: {e}")

            # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
            old_bot_message_id = state_data.get('bot_message_id')
            if old_bot_message_id:
                try:
                    await bot.delete_message(chat_id=callback.message.chat.id, message_id=old_bot_message_id)
                except Exception as e:
                    logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞: {e}")
        else:
            # –î–æ–¥–∞–π—Ç–µ –æ–±—Ä–æ–±–∫—É —ñ–Ω—à–∏—Ö —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –∑–∞ –ø–æ—Ç—Ä–µ–±–æ—é
            await bot.answer_callback_query(callback.id, text=UNHANDLED_INLINE_BUTTON_TEXT)
    else:
        logger.error("interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        await bot.answer_callback_query(callback.id, text=GENERIC_ERROR_MESSAGE_TEXT)

    await callback.answer()

# –û–±—Ä–æ–±—á–∏–∫ –¥–ª—è –ø—Ä–∏–π–æ–º—É –ø–æ—à—É–∫—É –≥–µ—Ä–æ—è
@router.message(MenuStates.SEARCH_HERO)
async def handle_search_hero(message: Message, state: FSMContext, db: AsyncSession, bot: Bot):
    hero_name = message.text.strip()
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} —à—É–∫–∞—î –≥–µ—Ä–æ—è: {hero_name}")

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await message.delete()

    # –õ–æ–≥—ñ–∫–∞ –ø–æ—à—É–∫—É –≥–µ—Ä–æ—è
    if hero_name:
        hero_info = await search_hero(db, hero_name)
        if hero_info:
            response_text = (
                f"üîç <b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≥–µ—Ä–æ—è:</b>\n\n"
                f"‚Ä¢ üèÖ –Ü–º'—è: {hero_info['name']}\n"
                f"‚Ä¢ üõ°Ô∏è –ö–ª–∞—Å: {hero_info['class']}\n"
                f"‚Ä¢ üìà –†–µ–π—Ç–∏–Ω–≥: {hero_info['rating']}\n"
                f"‚Ä¢ –û–ø–∏—Å: {hero_info['description']}\n"
            )
        else:
            response_text = f"‚ùå –ì–µ—Ä–æ–π –∑ —ñ–º'—è–º '{hero_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    else:
        response_text = "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–º'—è –≥–µ—Ä–æ—è –¥–ª—è –ø–æ—à—É–∫—É."

    try:
        await bot.send_message(
            chat_id=message.chat.id,
            text=response_text,
            parse_mode=ParseMode.HTML,
            reply_markup=get_generic_inline_keyboard()
        )
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—à—É–∫ –≥–µ—Ä–æ—è: {e}")

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –º–µ–Ω—é –ü–µ—Ä—Å–æ–Ω–∞–∂—ñ
    await state.set_state(MenuStates.HEROES_MENU)

# –û–±—Ä–æ–±—á–∏–∫ –¥–ª—è –ø—Ä–∏–π–æ–º—É —Ç–µ–º–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó
@router.message(MenuStates.SEARCH_TOPIC)
async def handle_search_topic(message: Message, state: FSMContext, bot: Bot):
    topic = message.text.strip()
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –ø—Ä–æ–ø–æ–Ω—É—î —Ç–µ–º—É: {topic}")

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await message.delete()

    # –õ–æ–≥—ñ–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —Ç–µ–º–∏
    if topic:
        # –ü—Ä–∏–ø—É—Å—Ç–∏–º–æ, –º–∏ –º–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —Ç–µ–º–∏
        await save_suggestion(topic, message.from_user.id)
        response_text = SUGGESTION_RESPONSE_TEXT.format(topic=topic)
    else:
        response_text = "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–º—É –¥–ª—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó."

    try:
        await bot.send_message(
            chat_id=message.chat.id,
            text=response_text,
            reply_markup=get_generic_inline_keyboard()
        )
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é —Ç–µ–º–∏: {e}")

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –º–µ–Ω—é –ó–≤–æ—Ä–æ—Ç–Ω–∏–π –ó–≤'—è–∑–æ–∫
    await state.set_state(MenuStates.FEEDBACK_MENU)

# –û–±—Ä–æ–±—á–∏–∫ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@router.message()
async def unknown_command(message: Message, state: FSMContext, bot: Bot):
    logger.warning(f"–ù–µ–≤—ñ–¥–æ–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {message.from_user.id}: {message.text}")

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await message.delete()

    # –û—Ç—Ä–∏–º—É—î–º–æ IDs –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ —Å—Ç–∞–Ω—É
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
    current_state = await state.get_state()

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç —Ç–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å—Ç–∞–Ω—É
    if current_state == MenuStates.MAIN_MENU.state:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_main_menu()
        new_interactive_text = "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
        new_state = MenuStates.MAIN_MENU
    elif current_state == MenuStates.NAVIGATION_MENU.state:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_navigation_menu()
        new_interactive_text = "–ù–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–∏–π –µ–∫—Ä–∞–Ω"
        new_state = MenuStates.NAVIGATION_MENU
    elif current_state == MenuStates.HEROES_MENU.state:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_heroes_menu()
        new_interactive_text = "–ú–µ–Ω—é –ü–µ—Ä—Å–æ–Ω–∞–∂—ñ"
        new_state = MenuStates.HEROES_MENU
    elif current_state == MenuStates.HERO_CLASS_MENU.state:
        new_main_text = UNKNOWN_COMMAND_TEXT
        hero_class = data.get('hero_class', '–¢–∞–Ω–∫')
        heroes_list = data.get('heroes_list', [])
        new_main_keyboard = get_hero_class_menu(hero_class)
        new_interactive_text = f"–ú–µ–Ω—é –∫–ª–∞—Å—É {hero_class}\n–°–ø–∏—Å–æ–∫ –≥–µ—Ä–æ—ó–≤: {', '.join(heroes_list)}"
        new_state = MenuStates.HERO_CLASS_MENU
    elif current_state == MenuStates.GUIDES_MENU.state:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_guides_menu()
        new_interactive_text = "–ú–µ–Ω—é –ì–∞–π–¥–∏"
        new_state = MenuStates.GUIDES_MENU
    elif current_state == MenuStates.COUNTER_PICKS_MENU.state:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_counter_picks_menu()
        new_interactive_text = "–ú–µ–Ω—é –ö–æ–Ω—Ç—Ä-–ø—ñ–∫–∏"
        new_state = MenuStates.COUNTER_PICKS_MENU
    elif current_state == MenuStates.BUILDS_MENU.state:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_builds_menu()
        new_interactive_text = "–ú–µ–Ω—é –ë—ñ–ª–¥–∏"
        new_state = MenuStates.BUILDS_MENU
    elif current_state == MenuStates.VOTING_MENU.state:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_voting_menu()
        new_interactive_text = "–ú–µ–Ω—é –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è"
        new_state = MenuStates.VOTING_MENU
    elif current_state == MenuStates.PROFILE_MENU.state:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_profile_menu()
        new_interactive_text = "–ú–µ–Ω—é –ü—Ä–æ—Ñ—ñ–ª—å"
        new_state = MenuStates.PROFILE_MENU
    elif current_state == MenuStates.STATISTICS_MENU.state:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_statistics_menu()
        new_interactive_text = "–ú–µ–Ω—é –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        new_state = MenuStates.STATISTICS_MENU
    elif current_state == MenuStates.ACHIEVEMENTS_MENU.state:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_achievements_menu()
        new_interactive_text = "–ú–µ–Ω—é –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è"
        new_state = MenuStates.ACHIEVEMENTS_MENU
    elif current_state == MenuStates.SETTINGS_MENU.state:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_settings_menu()
        new_interactive_text = "–ú–µ–Ω—é –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"
        new_state = MenuStates.SETTINGS_MENU
    elif current_state in [
        MenuStates.SEARCH_HERO.state,
        MenuStates.SEARCH_TOPIC.state,
        MenuStates.CHANGE_USERNAME.state,
        MenuStates.RECEIVE_FEEDBACK.state,
        MenuStates.REPORT_BUG.state
    ]:
        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–µ—Ä–µ–±—É–≤–∞—î –≤ –ø—Ä–æ—Ü–µ—Å—ñ –≤–≤–µ–¥–µ–Ω–Ω—è, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ø—ñ–¥–∫–∞–∑–∫—É
        try:
            await bot.send_message(
                chat_id=message.chat.id,
                text=USE_BUTTON_NAVIGATION_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—ñ–¥–∫–∞–∑–∫—É: {e}")
        await state.set_state(current_state)
        return
    else:
        new_main_text = MAIN_MENU_TEXT.format(user_first_name=message.from_user.first_name)
        new_main_keyboard = get_main_menu()
        new_interactive_text = MAIN_MENU_DESCRIPTION
        new_state = MenuStates.MAIN_MENU

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    try:
        main_message = await bot.send_message(
            chat_id=message.chat.id,
            text=new_main_text,
            reply_markup=new_main_keyboard
        )
        new_bot_message_id = main_message.message_id
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        return

    # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if bot_message_id:
        await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –†–µ–¥–∞–≥—É—î–º–æ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if interactive_message_id:
        try:
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=interactive_message_id,
                text=new_interactive_text,
                parse_mode=ParseMode.HTML,
                reply_markup=get_generic_inline_keyboard()
            )
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            interactive_message_id = await send_or_update_interactive_message(
                bot=bot,
                chat_id=message.chat.id,
                text=new_interactive_text,
                keyboard=get_generic_inline_keyboard(),
                message_id=None,
                state=state,
                parse_mode=ParseMode.HTML
            )
    else:
        interactive_message_id = await send_or_update_interactive_message(
            bot=bot,
            chat_id=message.chat.id,
            text=new_interactive_text,
            keyboard=get_generic_inline_keyboard(),
            message_id=None,
            state=state,
            parse_mode=ParseMode.HTML
        )

    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await state.update_data(bot_message_id=new_bot_message_id)

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤–∏–π —Å—Ç–∞–Ω
    await state.set_state(new_state)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
def setup_handlers(dp: Dispatcher):
    dp.include_router(router)
    # –Ø–∫—â–æ —É –≤–∞—Å —î —ñ–Ω—à—ñ —Ä–æ—É—Ç–µ—Ä–∏, –≤–∫–ª—é—á—ñ—Ç—å —ó—Ö —Ç—É—Ç, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:
    # dp.include_router(profile_router)

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
async def main():
    bot = Bot(token='YOUR_BOT_TOKEN')  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
    dp = Dispatcher()
    setup_handlers(dp)
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())