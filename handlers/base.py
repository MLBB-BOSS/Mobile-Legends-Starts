import logging
from aiogram import Router, F, Bot, Dispatcher
from aiogram.types import (
    Message, ReplyKeyboardRemove, InlineKeyboardMarkup,
    InlineKeyboardButton, CallbackQuery
)
from aiogram.enums import ParseMode  # Updated import for ParseMode in v3.x
from aiogram.fsm.context import FSMContext
from aiogram.filters import Text
from typing import Optional
from datetime import datetime
import io

from states import MenuStates
from utils.state_utils import increment_step
from keyboards.menus import (
    MenuButton,
    get_generic_inline_keyboard,
    get_navigation_menu,
    get_challenges_menu,
    get_guides_menu,
    get_bust_menu,
    get_teams_menu,
    get_trading_menu,
    get_settings_menu,
    get_help_menu,
    get_my_team_menu,
    get_language_menu,
    get_profile_menu,
    get_main_menu,
    get_statistics_menu,
    get_achievements_menu,
    get_feedback_menu,
    get_gpt_menu,
    get_voting_menu  # Ensure this function exists in keyboards.menus
)
from texts import (
    MAIN_MENU_ERROR_TEXT, UNKNOWN_COMMAND_TEXT, GENERIC_ERROR_MESSAGE_TEXT,
    CHALLENGES_TEXT, GUIDES_TEXT, BUST_TEXT, TEAMS_TEXT, TRADING_TEXT,
    NEW_GUIDES_TEXT, M6_TEXT, POPULAR_GUIDES_TEXT, BEGINNER_GUIDES_TEXT,
    ADVANCED_TECHNIQUES_TEXT, TEAMPLAY_GUIDES_TEXT,
    LANGUAGE_SELECTION_TEXT, UPDATE_ID_SUCCESS_TEXT, NOTIFICATIONS_SETTINGS_TEXT,
    INSTRUCTIONS_TEXT, FAQ_TEXT, HELP_SUPPORT_TEXT,
    MY_TEAM_TEXT, VIEW_PROFILE_TEXT, EDIT_PROFILE_TEXT,
    STATISTICS_TEXT, ACHIEVEMENTS_TEXT, FEEDBACK_TEXT, GPT_TEXT,
    USE_BUTTON_NAVIGATION_TEXT, FEEDBACK_RECEIVED_TEXT, BUG_REPORT_RECEIVED_TEXT,
    SEARCH_HERO_RESPONSE_TEXT, SUGGESTION_RESPONSE_TEXT,
    MLS_BUTTON_RESPONSE_TEXT, UNHANDLED_INLINE_BUTTON_TEXT,
    MAIN_MENU_DESCRIPTION, MAIN_MENU_TEXT  # Ensure these texts are defined in texts.py
)
from handlers.graph_utils import create_comparison_graph  # Ensure this exists
# from models.feedback import Feedback  # Uncomment when models are implemented
# from models.bug_report import BugReport  # Uncomment when models are implemented

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–µ–Ω—é
NAVIGATION_MENU_TEXT = """
üß≠ –ù–∞–≤–∏–≥–∞—Ü—ñ–π–Ω–µ –º–µ–Ω—é

–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É:
- Challenges - –≤–∏–ø—Ä–æ–±—É–≤–∞–Ω–Ω—è —Ç–∞ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
- Guides - –∫–æ—Ä–∏—Å–Ω—ñ –≥–∞–π–¥–∏ —Ç–∞ –ø–æ—Ä–∞–¥–∏
- Bust - –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è
- Teams - —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∞–º–∏
- Trading - —Ç–æ—Ä–≥—ñ–≤–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
- Settings - –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
- Help - –¥–æ–ø–æ–º–æ–≥–∞
- Profile - –ø—Ä–æ—Ñ—ñ–ª—å
- GPT - GPT —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è
"""

NAVIGATION_INTERACTIVE_TEXT = """
üì± –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –ø–æ –±–æ—Ç—É

–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –º—ñ–∂ —Ä–æ–∑–¥—ñ–ª–∞–º–∏.
–ü–æ—Ç–æ—á–Ω–∏–π —Ä–æ–∑–¥—ñ–ª: –ù–∞–≤—ñ–≥–∞—Ü—ñ—è
"""

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def safe_delete_message(bot: Bot, chat_id: int, message_id: int):
    """–ë–µ–∑–ø–µ—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
        logger.debug(f"Deleted message {message_id} in chat {chat_id}")
    except Exception as e:
        logger.warning(f"Could not delete message {message_id} in chat {chat_id}: {e}")

async def check_and_edit_message(
    bot: Bot,
    chat_id: int,
    message_id: int,
    new_text: str,
    new_keyboard: Optional[InlineKeyboardMarkup],
    state: FSMContext,
    parse_mode: Optional[str] = None
):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∏"""
    try:
        current_message = await bot.get_message(chat_id=chat_id, message_id=message_id)
        if current_message.text != new_text or current_message.reply_markup != new_keyboard:
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=new_text,
                reply_markup=new_keyboard,
                parse_mode=parse_mode
            )
            logger.debug(f"Edited message {message_id} in chat {chat_id}")
    except Exception as e:
        logger.error(f"Failed to edit message {message_id} in chat {chat_id}: {e}")
        await handle_error(bot, chat_id, GENERIC_ERROR_MESSAGE_TEXT, logger)

async def handle_error(bot: Bot, chat_id: int, error_message: str, logger_instance: logging.Logger):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—É—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        await bot.send_message(
            chat_id=chat_id,
            text=error_message,
            reply_markup=get_generic_inline_keyboard()
        )
    except Exception as e:
        logger_instance.critical(f"Failed to send error message to chat {chat_id}: {e}")

async def update_interactive_screen(
    bot: Bot,
    chat_id: int,
    message_id: int,
    text: str,
    keyboard: Optional[InlineKeyboardMarkup] = None
) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞"""
    try:
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            reply_markup=keyboard or get_generic_inline_keyboard(),
            parse_mode=ParseMode.HTML
        )
        logger.debug(f"Updated interactive screen {message_id} in chat {chat_id}")
        return True
    except Exception as e:
        logger.error(f"Failed to update interactive screen: {e}")
        return False

async def verify_state_data(state: FSMContext) -> tuple[bool, dict]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏"""
    data = await state.get_data()
    required_fields = ['bot_message_id', 'interactive_message_id']
    
    missing_fields = [field for field in required_fields if field not in data]
    
    if missing_fields:
        logger.error(f"Missing required state fields: {missing_fields}")
        return False, data
        
    return True, data

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
async def transition_state(state: FSMContext, new_state: MenuStates):
    await state.set_state(new_state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(commands=["start"])
async def handle_start(message: Message, state: FSMContext, bot: Bot, db: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    user_first_name = message.from_user.first_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
    logger.info(f"User {user_id} started the bot.")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    # –ü—Ä–∏–º–µ—Ä:
    # user = await db.get(User, user_id)
    # if not user:
    #     user = User(id=user_id, first_name=user_first_name)
    #     db.add(user)
    #     await db.commit()
    
    main_menu_text = f"üè† –ü—Ä–∏–≤—ñ—Ç, {user_first_name}! –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –Ω–∞—à–æ–≥–æ –±–æ—Ç–∞."
    try:
        main_message = await bot.send_message(
            chat_id=message.chat.id,
            text=main_menu_text,
            reply_markup=get_main_menu()
        )
        interactive_message = await bot.send_message(
            chat_id=message.chat.id,
            text=MAIN_MENU_DESCRIPTION,  # –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –≤ texts.py
            reply_markup=get_generic_inline_keyboard()
        )
        await state.update_data(
            bot_message_id=main_message.message_id,
            interactive_message_id=interactive_message.message_id
        )
        await transition_state(state, MenuStates.MAIN_MENU)
    except Exception as e:
        logger.error(f"Failed to send start messages: {e}")
        await handle_error(bot, message.chat.id, GENERIC_ERROR_MESSAGE_TEXT, logger)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /example (–ø—Ä–∏–º–µ—Ä)
@router.message(commands=["example"])
async def handle_example(message: Message, state: FSMContext, bot: Bot):
    """–ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã"""
    logger.info(f"User {message.from_user.id} invoked /example command.")
    await safe_delete_message(bot, message.chat.id, message.message_id)
    
    try:
        example_message = await bot.send_message(
            chat_id=message.chat.id,
            text="–¶–µ –ø—Ä–∏–∫–ª–∞–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /example.",
            reply_markup=get_generic_inline_keyboard()
        )
        await state.update_data(bot_message_id=example_message.message_id)
        await transition_state(state, MenuStates.EXAMPLE_STATE)  # –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ EXAMPLE_STATE –≤ MenuStates
    except Exception as e:
        logger.error(f"Failed to send example message: {e}")
        await handle_error(bot, message.chat.id, GENERIC_ERROR_MESSAGE_TEXT, logger)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –æ–±—ã—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é –ù–∞–≤–∏–≥–∞—Ü–∏—è
@router.message(MenuStates.NAVIGATION_MENU)
async def handle_navigation_menu_buttons(message: Message, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é –ù–∞–≤–∏–≥–∞—Ü–∏—è.
    """
    user_choice = message.text
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –æ–±—Ä–∞–≤ '{user_choice}' –≤ –º–µ–Ω—é –ù–∞–≤–∏–≥–∞—Ü—ñ—è")

    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –ü–æ–ª—É—á–∞–µ–º IDs —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    is_valid, data = await verify_state_data(state)
    if not is_valid:
        try:
            await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        return

    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    new_main_text = ""
    new_main_keyboard = None
    new_interactive_text = ""
    new_state: Optional[MenuStates] = None

    if user_choice == MenuButton.CHALLENGES.value:
        new_main_text = CHALLENGES_TEXT
        new_main_keyboard = get_challenges_menu()
        new_interactive_text = "üéØ Challenges Menu"
        new_state = MenuStates.CHALLENGES_MENU
    elif user_choice == MenuButton.GUIDES.value:
        new_main_text = GUIDES_TEXT
        new_main_keyboard = get_guides_menu()
        new_interactive_text = "üìö Guides Menu"
        new_state = MenuStates.GUIDES_MENU
    elif user_choice == MenuButton.BUST.value:
        new_main_text = BUST_TEXT
        new_main_keyboard = get_bust_menu()
        new_interactive_text = "üí™ Bust Menu"
        new_state = MenuStates.BUST_MENU
    elif user_choice == MenuButton.TEAMS.value:
        new_main_text = TEAMS_TEXT
        new_main_keyboard = get_teams_menu()
        new_interactive_text = "üë• Teams Menu"
        new_state = MenuStates.TEAMS_MENU
    elif user_choice == MenuButton.TRADING.value:
        new_main_text = TRADING_TEXT
        new_main_keyboard = get_trading_menu()
        new_interactive_text = "üíº Trading Menu"
        new_state = MenuStates.TRADING_MENU
    elif user_choice == MenuButton.SETTINGS.value:
        new_main_text = "‚öôÔ∏è Settings"
        new_main_keyboard = get_settings_menu()
        new_interactive_text = "‚öôÔ∏è Settings Menu"
        new_state = MenuStates.SETTINGS_SUBMENU
    elif user_choice == MenuButton.HELP.value:
        new_main_text = "‚ùì Help"
        new_main_keyboard = get_help_menu()
        new_interactive_text = "‚ùì Help Menu"
        new_state = MenuStates.HELP_SUBMENU
    elif user_choice == MenuButton.MY_TEAM.value:
        new_main_text = MY_TEAM_TEXT
        new_main_keyboard = get_my_team_menu()
        new_interactive_text = "ü™™ My Team Menu"
        new_state = MenuStates.MY_TEAM_MENU
    elif user_choice == MenuButton.PROFILE.value:
        new_main_text = "ü™™ My Profile"
        new_main_keyboard = get_profile_menu()
        new_interactive_text = "ü™™ My Profile Menu"
        new_state = MenuStates.PROFILE_MENU
    elif user_choice == MenuButton.VOTING.value:
        new_main_text = "üìä Voting Menu"  # Define appropriate text in texts.py
        new_main_keyboard = get_voting_menu()  # Ensure get_voting_menu() is defined
        new_interactive_text = "üìä Voting Menu"
        new_state = MenuStates.VOTING_MENU
    elif user_choice == MenuButton.GPT.value:
        new_main_text = GPT_TEXT
        new_main_keyboard = get_gpt_menu()
        new_interactive_text = "üëæ GPT Menu"
        new_state = MenuStates.GPT_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_navigation_menu()
        new_interactive_text = "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞"
        new_state = MenuStates.NAVIGATION_MENU

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    try:
        main_message = await bot.send_message(
            chat_id=message.chat.id,
            text=new_main_text,
            reply_markup=new_main_keyboard
        )
        new_bot_message_id = main_message.message_id
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        await handle_error(bot, chat_id=message.chat.id, error_message=GENERIC_ERROR_MESSAGE_TEXT, logger=logger)
        return

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text=new_interactive_text,
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

# 1. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Back" –¥–ª—è –≤—Å–µ—Ö –º–µ–Ω—é
@router.message(F.text == MenuButton.BACK.value)
async def handle_back_button(message: Message, state: FSMContext, bot: Bot):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Back" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é"""
    logger.info(f"User {message.from_user.id} pressed Back button")
    
    current_state = await state.get_state()
    BACK_TRANSITIONS = {
        MenuStates.CHALLENGES_MENU: MenuStates.MAIN_MENU,
        MenuStates.GUIDES_MENU: MenuStates.MAIN_MENU,
        MenuStates.BUST_MENU: MenuStates.MAIN_MENU,
        MenuStates.TEAMS_MENU: MenuStates.MAIN_MENU,
        MenuStates.TRADING_MENU: MenuStates.MAIN_MENU,
        MenuStates.SETTINGS_SUBMENU: MenuStates.SETTINGS_MENU,
        MenuStates.SELECT_LANGUAGE: MenuStates.SETTINGS_SUBMENU,
        MenuStates.PROFILE_MENU: MenuStates.MAIN_MENU,
        MenuStates.STATISTICS_MENU: MenuStates.PROFILE_MENU,
        MenuStates.MY_TEAM_MENU: MenuStates.PROFILE_MENU,
        MenuStates.ACHIEVEMENTS_MENU: MenuStates.PROFILE_MENU,
        MenuStates.FEEDBACK_MENU: MenuStates.PROFILE_MENU,
        MenuStates.HELP_SUBMENU: MenuStates.HELP_MENU,
        MenuStates.SEARCH_HERO: MenuStates.HEROES_MENU,
        MenuStates.SEARCH_TOPIC: MenuStates.FEEDBACK_MENU,
        MenuStates.CHANGE_USERNAME: MenuStates.SETTINGS_SUBMENU,
        MenuStates.HELP_MENU: MenuStates.PROFILE_MENU,
        MenuStates.GPT_MENU: MenuStates.PROFILE_MENU,
        MenuStates.VOTING_MENU: MenuStates.MAIN_MENU
    }
    
    next_state = BACK_TRANSITIONS.get(current_state, MenuStates.MAIN_MENU)
    
    try:
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await safe_delete_message(bot, message.chat.id, message.message_id)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        old_bot_message_id = data.get('bot_message_id')
        interactive_message_id = data.get('interactive_message_id')
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
        if old_bot_message_id:
            await safe_delete_message(bot, message.chat.id, old_bot_message_id)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        MENU_TEXTS = {
            MenuStates.MAIN_MENU: "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
            MenuStates.SETTINGS_MENU: "‚öôÔ∏è Settings",
            MenuStates.PROFILE_MENU: "ü™™ My Profile",
            MenuStates.HELP_MENU: "‚ùì Help Menu",
            MenuStates.HELP_SUBMENU: "‚ùì Help Menu",
            MenuStates.STATISTICS_MENU: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            MenuStates.MY_TEAM_MENU: "ü™™ My Team Menu",
            MenuStates.ACHIEVEMENTS_MENU: "üèÜ –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è",
            MenuStates.FEEDBACK_MENU: "üíå –ó–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤'—è–∑–æ–∫",
            MenuStates.GPT_MENU: "üëæ GPT",
            MenuStates.CHALLENGES_MENU: "üéØ Challenges Menu",
            MenuStates.GUIDES_MENU: "üìö Guides Menu",
            MenuStates.BUST_MENU: "üí™ Bust Menu",
            MenuStates.TEAMS_MENU: "üë• Teams Menu",
            MenuStates.TRADING_MENU: "üíº Trading Menu",
            MenuStates.SETTINGS_SUBMENU: "‚öôÔ∏è Settings Submenu",
            MenuStates.NAVIGATION_MENU: NAVIGATION_MENU_TEXT,
            MenuStates.VOTING_MENU: "üìä Voting Menu"
        }
        
        MENU_KEYBOARDS = {
            MenuStates.MAIN_MENU: get_main_menu(),
            MenuStates.SETTINGS_MENU: get_settings_menu(),
            MenuStates.PROFILE_MENU: get_profile_menu(),
            MenuStates.HELP_MENU: get_help_menu(),
            MenuStates.HELP_SUBMENU: get_help_menu(),
            MenuStates.STATISTICS_MENU: get_statistics_menu(),
            MenuStates.MY_TEAM_MENU: get_my_team_menu(),
            MenuStates.ACHIEVEMENTS_MENU: get_achievements_menu(),
            MenuStates.FEEDBACK_MENU: get_feedback_menu(),
            MenuStates.GPT_MENU: get_gpt_menu(),
            MenuStates.CHALLENGES_MENU: get_challenges_menu(),
            MenuStates.GUIDES_MENU: get_guides_menu(),
            MenuStates.BUST_MENU: get_bust_menu(),
            MenuStates.TEAMS_MENU: get_teams_menu(),
            MenuStates.TRADING_MENU: get_trading_menu(),
            MenuStates.SETTINGS_SUBMENU: get_settings_menu(),
            MenuStates.NAVIGATION_MENU: get_navigation_menu(),
            MenuStates.VOTING_MENU: get_voting_menu()
        }
        
        new_text = MENU_TEXTS.get(next_state, "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
        new_keyboard = MENU_KEYBOARDS.get(next_state, get_main_menu())
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        new_message = await bot.send_message(
            chat_id=message.chat.id,
            text=new_text,
            reply_markup=new_keyboard
        )
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        new_interactive_text = ""
        if next_state in MENU_TEXTS:
            if next_state == MenuStates.NAVIGATION_MENU:
                new_interactive_text = "üì± –ù–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–∏–π –µ–∫—Ä–∞–Ω"
            else:
                new_interactive_text = f"{new_text} Menu"
        
        if interactive_message_id and new_interactive_text:
            await update_interactive_screen(
                bot=bot,
                chat_id=message.chat.id,
                message_id=interactive_message_id,
                text=new_interactive_text,
                keyboard=get_generic_inline_keyboard()
            )
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(
            bot_message_id=new_message.message_id,
            last_state=next_state.state,
            last_text=new_text,
            last_keyboard=new_keyboard,
            last_update=datetime.now().isoformat()
        )
        await transition_state(state, next_state)
        
    except Exception as e:
        logger.error(f"Error in back button handler: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )

# 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ –∏—Ö –ø–æ–¥–º–µ–Ω—é

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Challenges"
@router.message(F.text == MenuButton.CHALLENGES.value, MenuStates.MAIN_MENU)
async def handle_challenges(message: Message, state: FSMContext, bot: Bot, db: AsyncSession):
    logger.info(f"User {message.from_user.id} selected Challenges")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    is_valid, data = await verify_state_data(state)
    if not is_valid:
        try:
            await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"Failed to send main menu error message: {e}")
        return

    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é Challenges
    try:
        challenges_message = await bot.send_message(
            chat_id=message.chat.id,
            text=CHALLENGES_TEXT,
            reply_markup=get_challenges_menu()
        )
        new_bot_message_id = challenges_message.message_id
    except Exception as e:
        logger.error(f"Failed to send Challenges menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        return

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    await update_interactive_screen(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        text="üéØ Challenges Menu",
        keyboard=get_generic_inline_keyboard()
    )

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, MenuStates.CHALLENGES_MENU)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é "Challenges Menu"
@router.message(MenuStates.CHALLENGES_MENU)
async def handle_challenges_menu_buttons(message: Message, state: FSMContext, bot: Bot, db: AsyncSession):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected {user_choice} in Challenges Menu")

    await safe_delete_message(bot, message.chat.id, message.message_id)

    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            error_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=error_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"Failed to send main menu error message: {e}")
        return

    new_main_text = ""
    new_main_keyboard = get_challenges_menu()
    new_interactive_text = "üéØ Challenges Menu"
    new_state = MenuStates.CHALLENGES_MENU

    if user_choice == MenuButton.ADD_CHALLENGE.value:
        new_main_text = "–§—É–Ω–∫—Ü—ñ—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —á–µ–ª–µ–Ω–¥–∂—ñ–≤ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
        new_main_keyboard = get_main_menu()
        new_interactive_text = "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é"
        new_state = MenuStates.MAIN_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_challenges_menu()

    try:
        main_message = await bot.send_message(
            chat_id=message.chat.id,
            text=new_main_text,
            reply_markup=new_main_keyboard
        )
        new_bot_message_id = main_message.message_id
    except Exception as e:
        logger.error(f"Failed to send new Challenges menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        return

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    await update_interactive_screen(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        text=new_interactive_text,
        keyboard=get_generic_inline_keyboard()
    )

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Guides"
@router.message(F.text == MenuButton.GUIDES.value, MenuStates.MAIN_MENU)
async def handle_guides(message: Message, state: FSMContext, bot: Bot, db: AsyncSession):
    logger.info(f"User {message.from_user.id} selected Guides")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    is_valid, data = await verify_state_data(state)
    if not is_valid:
        try:
            await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"Failed to send main menu error message: {e}")
        return

    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é Guides
    try:
        guides_message = await bot.send_message(
            chat_id=message.chat.id,
            text=GUIDES_TEXT,
            reply_markup=get_guides_menu()
        )
        new_bot_message_id = guides_message.message_id
    except Exception as e:
        logger.error(f"Failed to send Guides menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        return

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    await update_interactive_screen(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        text="üìö Guides Menu",
        keyboard=get_generic_inline_keyboard()
    )

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, MenuStates.GUIDES_MENU)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é "Guides Menu"
@router.message(MenuStates.GUIDES_MENU)
async def handle_guides_menu_buttons(message: Message, state: FSMContext, bot: Bot, db: AsyncSession):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected {user_choice} in Guides Menu")

    await safe_delete_message(bot, message.chat.id, message.message_id)

    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            error_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=error_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"Failed to send main menu error message: {e}")
        return

    new_main_text = ""
    new_main_keyboard = get_guides_menu()
    new_interactive_text = "üìö Guides Menu"
    new_state = MenuStates.GUIDES_MENU

    if user_choice == "üìÑ –ù–æ–≤—ñ –≥–∞–π–¥–∏":
        new_main_text = NEW_GUIDES_TEXT
    elif user_choice == "‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω—ñ –≥–∞–π–¥–∏":
        new_main_text = POPULAR_GUIDES_TEXT
    elif user_choice == "üë∂ –ì–∞–π–¥–∏ –¥–ª—è –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—ñ–≤":
        new_main_text = BEGINNER_GUIDES_TEXT
    elif user_choice == MenuButton.ADVANCED_TECHNIQUES.value:
        new_main_text = ADVANCED_TECHNIQUES_TEXT
    elif user_choice == "üë• Teamplay Guides":
        new_main_text = TEAMPLAY_GUIDES_TEXT
    elif user_choice == MenuButton.M6.value:
        new_main_text = M6_TEXT
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
        new_main_keyboard = get_main_menu()
        new_interactive_text = "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é"
        new_state = MenuStates.MAIN_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_guides_menu()

    try:
        main_message = await bot.send_message(
            chat_id=message.chat.id,
            text=new_main_text,
            reply_markup=new_main_keyboard
        )
        new_bot_message_id = main_message.message_id
    except Exception as e:
        logger.error(f"Failed to send new Guides menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        return

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    await update_interactive_screen(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        text=new_interactive_text,
        keyboard=get_generic_inline_keyboard()
    )

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Bust"
@router.message(F.text == MenuButton.BUST.value, MenuStates.MAIN_MENU)
async def handle_bust(message: Message, state: FSMContext, bot: Bot, db: AsyncSession):
    logger.info(f"User {message.from_user.id} selected Bust")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    is_valid, data = await verify_state_data(state)
    if not is_valid:
        try:
            await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"Failed to send main menu error message: {e}")
        return

    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é Bust
    try:
        bust_message = await bot.send_message(
            chat_id=message.chat.id,
            text=BUST_TEXT,
            reply_markup=get_bust_menu()
        )
        new_bot_message_id = bust_message.message_id
    except Exception as e:
        logger.error(f"Failed to send Bust menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        return

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    await update_interactive_screen(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        text="üí™ Bust Menu",
        keyboard=get_generic_inline_keyboard()
    )

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, MenuStates.BUST_MENU)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é "Bust Menu"
@router.message(MenuStates.BUST_MENU)
async def handle_bust_menu_buttons(message: Message, state: FSMContext, bot: Bot, db: AsyncSession):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected {user_choice} in Bust Menu")

    await safe_delete_message(bot, message.chat.id, message.message_id)

    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            error_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=error_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"Failed to send main menu error message: {e}")
        return

    new_main_text = ""
    new_main_keyboard = get_bust_menu()
    new_interactive_text = "üí™ Bust Menu"
    new_state = MenuStates.BUST_MENU

    if user_choice == "üî• –ü—ñ–¥–≤–∏—â–∏—Ç–∏ –ë—É—Å—Ç":
        new_main_text = "–§—É–Ω–∫—Ü—ñ—è –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –±—É—Å—Ç–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
        new_main_keyboard = get_main_menu()
        new_interactive_text = "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é"
        new_state = MenuStates.MAIN_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_bust_menu()

    try:
        main_message = await bot.send_message(
            chat_id=message.chat.id,
            text=new_main_text,
            reply_markup=new_main_keyboard
        )
        new_bot_message_id = main_message.message_id
    except Exception as e:
        logger.error(f"Failed to send new Bust menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        return

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    await update_interactive_screen(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        text=new_interactive_text,
        keyboard=get_generic_inline_keyboard()
    )

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Teams"
@router.message(F.text == MenuButton.TEAMS.value, MenuStates.MAIN_MENU)
async def handle_teams(message: Message, state: FSMContext, bot: Bot, db: AsyncSession):
    logger.info(f"User {message.from_user.id} selected Teams")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    is_valid, data = await verify_state_data(state)
    if not is_valid:
        try:
            await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"Failed to send main menu error message: {e}")
        return

    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é Teams
    try:
        teams_message = await bot.send_message(
            chat_id=message.chat.id,
            text=TEAMS_TEXT,
            reply_markup=get_teams_menu()
        )
        new_bot_message_id = teams_message.message_id
    except Exception as e:
        logger.error(f"Failed to send Teams menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        return

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    await update_interactive_screen(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        text="üë• Teams Menu",
        keyboard=get_generic_inline_keyboard()
    )

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, MenuStates.TEAMS_MENU)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é "Teams Menu"
@router.message(MenuStates.TEAMS_MENU)
async def handle_teams_menu_buttons(message: Message, state: FSMContext, bot: Bot, db: AsyncSession):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected {user_choice} in Teams Menu")

    await safe_delete_message(bot, message.chat.id, message.message_id)

    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            error_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=error_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"Failed to send main menu error message: {e}")
        return

    new_main_text = ""
    new_main_keyboard = get_teams_menu()
    new_interactive_text = "üë• Teams Menu"
    new_state = MenuStates.TEAMS_MENU

    if user_choice == MenuButton.CREATE_TEAM.value:
        new_main_text = "–§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
    elif user_choice == MenuButton.VIEW_TEAMS.value:
        new_main_text = "–§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–æ–º–∞–Ω–¥ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
        new_main_keyboard = get_main_menu()
        new_interactive_text = "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é"
        new_state = MenuStates.MAIN_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_teams_menu()

    try:
        main_message = await bot.send_message(
            chat_id=message.chat.id,
            text=new_main_text,
            reply_markup=new_main_keyboard
        )
        new_bot_message_id = main_message.message_id
    except Exception as e:
        logger.error(f"Failed to send new Teams menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        return

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    await update_interactive_screen(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        text=new_interactive_text,
        keyboard=get_generic_inline_keyboard()
    )

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –æ–±—ã—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é Trading
@router.message(MenuStates.TRADING_MENU)
async def handle_trading_menu_buttons(message: Message, state: FSMContext, bot: Bot, db: AsyncSession):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected {user_choice} in Trading Menu")

    await safe_delete_message(bot, message.chat.id, message.message_id)

    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            error_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=error_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"Failed to send main menu error message: {e}")
        return

    new_main_text = ""
    new_main_keyboard = get_trading_menu()
    new_interactive_text = "üíº Trading Menu"
    new_state = MenuStates.TRADING_MENU

    if user_choice == MenuButton.CREATE_TRADE.value:
        new_main_text = "–§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ!"
    elif user_choice == MenuButton.VIEW_TRADES.value:
        new_main_text = "–û—Å—å –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç–æ—Ä–≥—ñ–≤–ª—ñ:"
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤
    elif user_choice == MenuButton.MANAGE_TRADES.value:
        new_main_text = "–§—É–Ω–∫—Ü—ñ—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–æ—Ä–≥—ñ–≤–ª—è–º–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ!"
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
        new_main_keyboard = get_main_menu()
        new_interactive_text = "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é"
        new_state = MenuStates.MAIN_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_trading_menu()

    try:
        main_message = await bot.send_message(
            chat_id=message.chat.id,
            text=new_main_text,
            reply_markup=new_main_keyboard
        )
        new_bot_message_id = main_message.message_id
    except Exception as e:
        logger.error(f"Failed to send new Trading menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        return

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    await update_interactive_screen(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        text=new_interactive_text,
        keyboard=get_generic_inline_keyboard()
    )

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –æ–±—ã—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é Settings Submenu
@router.message(MenuStates.SETTINGS_SUBMENU)
async def handle_settings_menu_buttons(message: Message, state: FSMContext, bot: Bot, db: AsyncSession):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected {user_choice} in Settings Menu")

    await safe_delete_message(bot, message.chat.id, message.message_id)

    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            error_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=error_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"Failed to send main menu error message: {e}")
        return

    new_main_text = ""
    new_main_keyboard = get_settings_menu()
    new_interactive_text = "‚öôÔ∏è Settings Menu"
    new_state = MenuStates.SETTINGS_SUBMENU

    if user_choice == MenuButton.LANGUAGE.value:
        new_main_text = LANGUAGE_SELECTION_TEXT
        new_main_keyboard = get_language_menu()
        new_state = MenuStates.SELECT_LANGUAGE
    elif user_choice == MenuButton.CHANGE_USERNAME.value:
        new_main_text = "‚ÑπÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π Username:"
        new_main_keyboard = ReplyKeyboardRemove()
        await increment_step(state)
        await state.set_state(MenuStates.CHANGE_USERNAME)
        try:
            await bot.send_message(chat_id=message.chat.id, text=new_main_text, reply_markup=new_main_keyboard)
        except Exception as e:
            logger.error(f"Failed to send Change Username prompt: {e}")
        return
    elif user_choice == MenuButton.UPDATE_ID.value:
        new_main_text = UPDATE_ID_SUCCESS_TEXT
    elif user_choice == MenuButton.NOTIFICATIONS.value:
        new_main_text = NOTIFICATIONS_SETTINGS_TEXT
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "ü™™ My Profile"
        new_main_keyboard = get_profile_menu()
        new_interactive_text = "ü™™ My Profile Menu"
        new_state = MenuStates.PROFILE_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_settings_menu()

    try:
        main_message = await bot.send_message(
            chat_id=message.chat.id,
            text=new_main_text,
            reply_markup=new_main_keyboard
        )
        new_bot_message_id = main_message.message_id
    except Exception as e:
        logger.error(f"Failed to send new Settings menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        return

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    await update_interactive_screen(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        text=new_interactive_text,
        keyboard=get_generic_inline_keyboard()
    )

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@router.message(MenuStates.SELECT_LANGUAGE)
async def handle_select_language(message: Message, state: FSMContext, bot: Bot, db: AsyncSession):
    selected_language = message.text
    logger.info(f"User {message.from_user.id} selected language: {selected_language}")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    # –ü—Ä–∏–º–µ—Ä:
    # user_id = message.from_user.id
    # await update_user_language(db, user_id, selected_language)

    try:
        response_text = f"–Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {selected_language}."
        await bot.send_message(
            chat_id=message.chat.id,
            text=response_text,
            reply_markup=get_generic_inline_keyboard()
        )
    except Exception as e:
        logger.error(f"Failed to send language change confirmation: {e}")
        await handle_error(bot, chat_id=message.chat.id, error_message=GENERIC_ERROR_MESSAGE_TEXT, logger=logger)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é Settings Submenu
    try:
        settings_message = await bot.send_message(
            chat_id=message.chat.id,
            text="‚öôÔ∏è Settings",
            reply_markup=get_settings_menu()
        )
        await state.update_data(bot_message_id=settings_message.message_id)
        await increment_step(state)
        await transition_state(state, MenuStates.SETTINGS_SUBMENU)
    except Exception as e:
        logger.error(f"Failed to send Settings menu after language change: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(MenuStates.CHANGE_USERNAME)
async def handle_change_username(message: Message, state: FSMContext, bot: Bot, db: AsyncSession):
    current_state = await state.get_state()
    if current_state != MenuStates.CHANGE_USERNAME.state:
        return

    new_username = message.text.strip()
    logger.info(f"User {message.from_user.id} is changing username to: {new_username}")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É —Å–º–µ–Ω—ã –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    # –ü—Ä–∏–º–µ—Ä:
    # user_id = message.from_user.id
    # await update_user_username(db, user_id, new_username)

    try:
        response_text = f"Username –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {new_username}."
        await bot.send_message(
            chat_id=message.chat.id,
            text=response_text,
            reply_markup=get_generic_inline_keyboard()
        )
    except Exception as e:
        logger.error(f"Failed to send username change confirmation: {e}")
        await handle_error(bot, chat_id=message.chat.id, error_message=GENERIC_ERROR_MESSAGE_TEXT, logger=logger)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é Settings Submenu
    try:
        settings_message = await bot.send_message(
            chat_id=message.chat.id,
            text="‚öôÔ∏è Settings",
            reply_markup=get_settings_menu()
        )
        await state.update_data(bot_message_id=settings_message.message_id)
        await increment_step(state)
        await transition_state(state, MenuStates.SETTINGS_SUBMENU)
    except Exception as e:
        logger.error(f"Failed to send Settings menu after changing username: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Help"
@router.message(F.text == MenuButton.HELP.value, MenuStates.MAIN_MENU)
async def handle_help(message: Message, state: FSMContext, bot: Bot, db: AsyncSession):
    logger.info(f"User {message.from_user.id} selected Help")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    is_valid, data = await verify_state_data(state)
    if not is_valid:
        try:
            await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"Failed to send main menu error message: {e}")
        return

    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é Help
    try:
        help_message = await bot.send_message(
            chat_id=message.chat.id,
            text="‚ùì Help",
            reply_markup=get_help_menu()
        )
        new_bot_message_id = help_message.message_id
    except Exception as e:
        logger.error(f"Failed to send Help menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        return

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    await update_interactive_screen(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        text="‚ùì Help Menu",
        keyboard=get_generic_inline_keyboard()
    )

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, MenuStates.HELP_SUBMENU)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é "Help Submenu"
@router.message(MenuStates.HELP_SUBMENU)
async def handle_help_menu_buttons(message: Message, state: FSMContext, bot: Bot, db: AsyncSession):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected {user_choice} in Help Menu")

    await safe_delete_message(bot, message.chat.id, message.message_id)

    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            error_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=error_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"Failed to send main menu error message: {e}")
        return

    new_main_text = ""
    new_main_keyboard = get_help_menu()
    new_interactive_text = "‚ùì Help Menu"
    new_state = MenuStates.HELP_SUBMENU

    if user_choice == MenuButton.INSTRUCTIONS.value:
        new_main_text = INSTRUCTIONS_TEXT  # –î–æ–±–∞–≤—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–µ–∫—Å—Ç –≤ `texts.py`
    elif user_choice == MenuButton.FAQ.value:
        new_main_text = FAQ_TEXT  # –î–æ–±–∞–≤—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–µ–∫—Å—Ç –≤ `texts.py`
    elif user_choice == MenuButton.HELP_SUPPORT.value:
        new_main_text = HELP_SUPPORT_TEXT  # –î–æ–±–∞–≤—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–µ–∫—Å—Ç –≤ `texts.py`
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "ü™™ My Profile"
        new_main_keyboard = get_profile_menu()
        new_interactive_text = "ü™™ My Profile Menu"
        new_state = MenuStates.PROFILE_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_help_menu()

    try:
        main_message = await bot.send_message(
            chat_id=message.chat.id,
            text=new_main_text,
            reply_markup=new_main_keyboard
        )
        new_bot_message_id = main_message.message_id
    except Exception as e:
        logger.error(f"Failed to send new Help menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        return

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    await update_interactive_screen(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        text=new_interactive_text,
        keyboard=get_generic_inline_keyboard()
    )

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "My Team"
@router.message(F.text == MenuButton.MY_TEAM.value, MenuStates.MAIN_MENU)
async def handle_my_team(message: Message, state: FSMContext, bot: Bot, db: AsyncSession):
    logger.info(f"User {message.from_user.id} selected My Team")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    is_valid, data = await verify_state_data(state)
    if not is_valid:
        try:
            await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"Failed to send main menu error message: {e}")
        return

    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é My Team
    try:
        my_team_message = await bot.send_message(
            chat_id=message.chat.id,
            text=MY_TEAM_TEXT,
            reply_markup=get_my_team_menu()
        )
        new_bot_message_id = my_team_message.message_id
    except Exception as e:
        logger.error(f"Failed to send My Team menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        return

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    await update_interactive_screen(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        text="ü™™ My Team Menu",
        keyboard=get_generic_inline_keyboard()
    )

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, MenuStates.MY_TEAM_MENU)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é "My Team Menu"
@router.message(MenuStates.MY_TEAM_MENU)
async def handle_my_team_menu_buttons(message: Message, state: FSMContext, bot: Bot, db: AsyncSession):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected {user_choice} in My Team Menu")

    await safe_delete_message(bot, message.chat.id, message.message_id)

    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            error_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=error_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"Failed to send main menu error message: {e}")
        return

    new_main_text = ""
    new_main_keyboard = get_my_team_menu()
    new_interactive_text = "ü™™ My Team Menu"
    new_state = MenuStates.MY_TEAM_MENU

    if user_choice == "‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ö–æ–º–∞–Ω–¥—É":
        new_main_text = "–§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
    elif user_choice == "üëÄ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ö–æ–º–∞–Ω–¥–∏":
        new_main_text = "–§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–æ–º–∞–Ω–¥ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
        new_main_keyboard = get_main_menu()
        new_interactive_text = "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é"
        new_state = MenuStates.MAIN_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_my_team_menu()

    try:
        main_message = await bot.send_message(
            chat_id=message.chat.id,
            text=new_main_text,
            reply_markup=new_main_keyboard
        )
        new_bot_message_id = main_message.message_id
    except Exception as e:
        logger.error(f"Failed to send new My Team menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        return

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    await update_interactive_screen(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        text=new_interactive_text,
        keyboard=get_generic_inline_keyboard()
    )

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Advanced Techniques"
@router.message(F.text == MenuButton.ADVANCED_TECHNIQUES.value)
async def handle_advanced_techniques(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected Advanced Techniques")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è Advanced Techniques
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–¥–º–µ–Ω—é
    try:
        advanced_techniques_message = await bot.send_message(
            chat_id=message.chat.id,
            text=ADVANCED_TECHNIQUES_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        await state.update_data(bot_message_id=advanced_techniques_message.message_id)
        await increment_step(state)
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–∞–∫ –∫–æ–Ω–µ—á–Ω—ã–π –ø—É–Ω–∫—Ç
    except Exception as e:
        logger.error(f"Failed to send Advanced Techniques info: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Instructions"
@router.message(F.text == MenuButton.INSTRUCTIONS.value, MenuStates.HELP_SUBMENU)
async def handle_instructions(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected Instructions")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    try:
        instructions_message = await bot.send_message(
            chat_id=message.chat.id,
            text=INSTRUCTIONS_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        await state.update_data(bot_message_id=instructions_message.message_id)
        await increment_step(state)
    except Exception as e:
        logger.error(f"Failed to send Instructions: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "FAQ"
@router.message(F.text == MenuButton.FAQ.value, MenuStates.HELP_SUBMENU)
async def handle_faq(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected FAQ")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    try:
        faq_message = await bot.send_message(
            chat_id=message.chat.id,
            text=FAQ_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        await state.update_data(bot_message_id=faq_message.message_id)
        await increment_step(state)
    except Exception as e:
        logger.error(f"Failed to send FAQ: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Help Support"
@router.message(F.text == MenuButton.HELP_SUPPORT.value, MenuStates.HELP_SUBMENU)
async def handle_help_support(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected Help Support")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    try:
        help_support_message = await bot.send_message(
            chat_id=message.chat.id,
            text=HELP_SUPPORT_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        await state.update_data(bot_message_id=help_support_message.message_id)
        await increment_step(state)
    except Exception as e:
        logger.error(f"Failed to send Help Support: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Update ID"
@router.message(F.text == MenuButton.UPDATE_ID.value, MenuStates.SETTINGS_SUBMENU)
async def handle_update_id(message: Message, state: FSMContext, bot: Bot, db: AsyncSession):
    logger.info(f"User {message.from_user.id} selected Update ID")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ID, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    # –ü—Ä–∏–º–µ—Ä:
    # user_id = message.from_user.id
    # await update_user_id(db, user_id)

    try:
        response_text = UPDATE_ID_SUCCESS_TEXT
        await bot.send_message(
            chat_id=message.chat.id,
            text=response_text,
            reply_markup=get_generic_inline_keyboard()
        )
    except Exception as e:
        logger.error(f"Failed to send Update ID confirmation: {e}")
        await handle_error(bot, chat_id=message.chat.id, error_message=GENERIC_ERROR_MESSAGE_TEXT, logger=logger)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é Settings Submenu
    try:
        settings_message = await bot.send_message(
            chat_id=message.chat.id,
            text="‚öôÔ∏è Settings",
            reply_markup=get_settings_menu()
        )
        await state.update_data(bot_message_id=settings_message.message_id)
        await increment_step(state)
        await transition_state(state, MenuStates.SETTINGS_SUBMENU)
    except Exception as e:
        logger.error(f"Failed to send Settings menu after updating ID: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Notifications"
@router.message(F.text == MenuButton.NOTIFICATIONS.value, MenuStates.SETTINGS_SUBMENU)
async def handle_notifications(message: Message, state: FSMContext, bot: Bot, db: AsyncSession):
    logger.info(f"User {message.from_user.id} selected Notifications")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    try:
        await bot.send_message(
            chat_id=message.chat.id,
            text=NOTIFICATIONS_SETTINGS_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
    except Exception as e:
        logger.error(f"Failed to send Notifications settings: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é Settings Submenu
    try:
        settings_message = await bot.send_message(
            chat_id=message.chat.id,
            text="‚öôÔ∏è Settings",
            reply_markup=get_settings_menu()
        )
        await state.update_data(bot_message_id=settings_message.message_id)
        await increment_step(state)
        await transition_state(state, MenuStates.SETTINGS_SUBMENU)
    except Exception as e:
        logger.error(f"Failed to send Settings menu after notifications: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Language" –≤ –º–µ–Ω—é "Settings Submenu"
@router.message(F.text == MenuButton.LANGUAGE.value, MenuStates.SETTINGS_SUBMENU)
async def handle_language_selection_menu(message: Message, state: FSMContext, bot: Bot, db: AsyncSession):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    logger.info(f"User {message.from_user.id} is selecting language")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    try:
        await bot.send_message(
            chat_id=message.chat.id,
            text=LANGUAGE_SELECTION_TEXT,
            reply_markup=get_language_menu()
        )
        await transition_state(state, MenuStates.SELECT_LANGUAGE)
    except Exception as e:
        logger.error(f"Failed to send Language selection menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Help" –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞—Ö (–∏–∑–±–µ–∂–∞–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
@router.message(F.text == MenuButton.HELP.value)
async def handle_help_general(message: Message, state: FSMContext, bot: Bot, db: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ Help –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ–Ω—é"""
    logger.info(f"User {message.from_user.id} selected Help")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    try:
        help_message = await bot.send_message(
            chat_id=message.chat.id,
            text=HELP_SUPPORT_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        await state.update_data(bot_message_id=help_message.message_id)
        await increment_step(state)
    except Exception as e:
        logger.error(f"Failed to send Help message: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Profile"
@router.message(F.text == MenuButton.PROFILE.value, MenuStates.MAIN_MENU)
async def handle_profile(message: Message, state: FSMContext, bot: Bot, db: AsyncSession):
    logger.info(f"User {message.from_user.id} selected Profile")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    try:
        profile_message = await bot.send_message(
            chat_id=message.chat.id,
            text="ü™™ My Profile",
            reply_markup=get_profile_menu()
        )
        await state.update_data(bot_message_id=profile_message.message_id)
        await transition_state(state, MenuStates.PROFILE_MENU)
    except Exception as e:
        logger.error(f"Failed to send Profile menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é "Profile Menu"
@router.message(MenuStates.PROFILE_MENU)
async def handle_profile_menu_buttons(message: Message, state: FSMContext, bot: Bot, db: AsyncSession):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected {user_choice} in Profile Menu")

    await safe_delete_message(bot, message.chat.id, message.message_id)

    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            error_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=error_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"Failed to send main menu error message: {e}")
        return

    new_main_text = ""
    new_main_keyboard = get_profile_menu()
    new_interactive_text = "ü™™ My Profile Menu"
    new_state = MenuStates.PROFILE_MENU

    if user_choice == MenuButton.VIEW_PROFILE.value:
        new_main_text = VIEW_PROFILE_TEXT  # –î–æ–±–∞–≤—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–µ–∫—Å—Ç –≤ `texts.py`
    elif user_choice == MenuButton.EDIT_PROFILE.value:
        new_main_text = EDIT_PROFILE_TEXT  # –î–æ–±–∞–≤—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–µ–∫—Å—Ç –≤ `texts.py`
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
        new_main_keyboard = get_main_menu()
        new_interactive_text = "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é"
        new_state = MenuStates.MAIN_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_profile_menu()

    try:
        main_message = await bot.send_message(
            chat_id=message.chat.id,
            text=new_main_text,
            reply_markup=new_main_keyboard
        )
        new_bot_message_id = main_message.message_id
    except Exception as e:
        logger.error(f"Failed to send new Profile menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        return

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    await update_interactive_screen(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        text=new_interactive_text,
        keyboard=get_generic_inline_keyboard()
    )

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
@router.callback_query()
async def handle_inline_buttons(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫.
    """
    data = callback.data
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} –Ω–∞—Ç–∏—Å–Ω—É–≤ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É: {data}")

    # –ü–æ–ª—É—á–∞–µ–º interactive_message_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    interactive_message_id = state_data.get('interactive_message_id')

    if interactive_message_id:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
        if data == "mls_button":
            await bot.answer_callback_query(callback.id, text=MLS_BUTTON_RESPONSE_TEXT)
        elif data == "compare_confirm_yes":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≥–µ—Ä–æ–µ–≤
            comparison_data = state_data.get('temp_data', {})
            hero1_name = comparison_data.get('hero1_name')
            hero2_name = comparison_data.get('hero2_name')

            if not hero1_name or not hero2_name:
                response_text = "‚ùå –î–∞–Ω—ñ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
                try:
                    await bot.send_message(chat_id=callback.message.chat.id, text=response_text, reply_markup=get_generic_inline_keyboard())
                except Exception as e:
                    logger.error(f"Failed to send missing data message: {e}")
                await transition_state(state, MenuStates.CHALLENGES_MENU)
                return

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–µ—Ä–æ–µ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            # –ó–¥–µ—Å—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–µ—Ä–æ–µ–≤
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            hero1_stats = {'kills': 50, 'deaths': 30, 'assists': 100}
            hero2_stats = {'kills': 70, 'deaths': 40, 'assists': 120}

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            try:
                comparison_graph_bytes = create_comparison_graph(hero1_stats, hero2_stats, hero1_name, hero2_name)
            except Exception as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è: {e}")
                await handle_error(bot, chat_id=callback.message.chat.id, error_message=GENERIC_ERROR_MESSAGE_TEXT, logger=logger)
                await transition_state(state, MenuStates.CHALLENGES_MENU)
                return

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
            try:
                await bot.send_photo(
                    chat_id=callback.message.chat.id,
                    photo=io.BytesIO(comparison_graph_bytes),
                    caption=f"‚öîÔ∏è –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è: {hero1_name} vs {hero2_name}",
                    reply_markup=get_generic_inline_keyboard()
                )
                logger.info(f"–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –º—ñ–∂ {hero1_name} —Ç–∞ {hero2_name} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {callback.from_user.id}")
            except Exception as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è: {e}")
                await handle_error(bot, chat_id=callback.message.chat.id, error_message=GENERIC_ERROR_MESSAGE_TEXT, logger=logger)

            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é Challenges
            await state.update_data(comparison_step=None, temp_data={})
            await transition_state(state, MenuStates.CHALLENGES_MENU)
        elif data == "compare_confirm_no":
            response_text = "‚ùå –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ."
            try:
                await bot.send_message(chat_id=callback.message.chat.id, text=response_text, reply_markup=get_generic_inline_keyboard())
            except Exception as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è: {e}")
            await transition_state(state, MenuStates.CHALLENGES_MENU)
        elif data == "menu_back":
            # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await transition_state(state, MenuStates.MAIN_MENU)
            new_interactive_text = MAIN_MENU_DESCRIPTION  # –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –≤ texts.py
            new_interactive_keyboard = get_generic_inline_keyboard()

            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await check_and_edit_message(
                    bot=bot,
                    chat_id=callback.message.chat.id,
                    message_id=interactive_message_id,
                    new_text=new_interactive_text,
                    new_keyboard=new_interactive_keyboard,
                    state=state,
                    parse_mode=ParseMode.HTML
                )
            except Exception as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
                await handle_error(bot, chat_id=callback.message.chat.id, error_message=GENERIC_ERROR_MESSAGE_TEXT, logger=logger)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            user_first_name = callback.from_user.first_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
            main_menu_text_formatted = MAIN_MENU_TEXT.format(user_first_name=user_first_name)
            try:
                main_message = await bot.send_message(
                    chat_id=callback.message.chat.id,
                    text=main_menu_text_formatted,
                    reply_markup=get_main_menu()
                )
                # –û–±–Ω–æ–≤–ª—è–µ–º bot_message_id
                await state.update_data(bot_message_id=main_message.message_id)
            except Exception as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é: {e}")
                await handle_error(bot, chat_id=callback.message.chat.id, error_message=GENERIC_ERROR_MESSAGE_TEXT, logger=logger)

            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            old_bot_message_id = state_data.get('bot_message_id')
            if old_bot_message_id:
                await safe_delete_message(bot, callback.message.chat.id, old_bot_message_id)
        else:
            # –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            await bot.answer_callback_query(callback.id, text=UNHANDLED_INLINE_BUTTON_TEXT)
    
    else:
        logger.error("interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        await bot.answer_callback_query(callback.id, text=GENERIC_ERROR_MESSAGE_TEXT)

    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def unknown_command(message: Message, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    –û—Ç–≤–µ—á–∞–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    logger.warning(f"–ù–µ–≤—ñ–¥–æ–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {message.from_user.id}: {message.text}")

    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    new_main_text = ""
    new_main_keyboard = None
    new_interactive_text = ""
    new_state = current_state

    MENU_TEXTS = {
        MenuStates.MAIN_MENU: UNKNOWN_COMMAND_TEXT,
        MenuStates.NAVIGATION_MENU: UNKNOWN_COMMAND_TEXT,
        MenuStates.CHALLENGES_MENU: UNKNOWN_COMMAND_TEXT,
        MenuStates.GUIDES_MENU: UNKNOWN_COMMAND_TEXT,
        MenuStates.BUST_MENU: UNKNOWN_COMMAND_TEXT,
        MenuStates.TEAMS_MENU: UNKNOWN_COMMAND_TEXT,
        MenuStates.TRADING_MENU: UNKNOWN_COMMAND_TEXT,
        MenuStates.SETTINGS_SUBMENU: UNKNOWN_COMMAND_TEXT,
        MenuStates.SELECT_LANGUAGE: USE_BUTTON_NAVIGATION_TEXT,
        MenuStates.CHANGE_USERNAME: USE_BUTTON_NAVIGATION_TEXT,
        MenuStates.PROFILE_MENU: UNKNOWN_COMMAND_TEXT,
        MenuStates.HELP_SUBMENU: UNKNOWN_COMMAND_TEXT,
        MenuStates.ACHIEVEMENTS_MENU: UNKNOWN_COMMAND_TEXT,
        MenuStates.STATISTICS_MENU: UNKNOWN_COMMAND_TEXT,
        MenuStates.MY_TEAM_MENU: UNKNOWN_COMMAND_TEXT,
        MenuStates.FEEDBACK_MENU: UNKNOWN_COMMAND_TEXT,
        MenuStates.GPT_MENU: UNKNOWN_COMMAND_TEXT,
        MenuStates.VOTING_MENU: UNKNOWN_COMMAND_TEXT
    }

    MENU_KEYBOARDS = {
        MenuStates.MAIN_MENU: get_main_menu(),
        MenuStates.NAVIGATION_MENU: get_navigation_menu(),
        MenuStates.CHALLENGES_MENU: get_challenges_menu(),
        MenuStates.GUIDES_MENU: get_guides_menu(),
        MenuStates.BUST_MENU: get_bust_menu(),
        MenuStates.TEAMS_MENU: get_teams_menu(),
        MenuStates.TRADING_MENU: get_trading_menu(),
        MenuStates.SETTINGS_SUBMENU: get_settings_menu(),
        MenuStates.PROFILE_MENU: get_profile_menu(),
        MenuStates.HELP_SUBMENU: get_help_menu(),
        MenuStates.ACHIEVEMENTS_MENU: get_achievements_menu(),
        MenuStates.STATISTICS_MENU: get_statistics_menu(),
        MenuStates.MY_TEAM_MENU: get_my_team_menu(),
        MenuStates.FEEDBACK_MENU: get_feedback_menu(),
        MenuStates.GPT_MENU: get_gpt_menu(),
        MenuStates.VOTING_MENU: get_voting_menu()
    }

    new_main_text = MENU_TEXTS.get(current_state, MAIN_MENU_TEXT.format(user_first_name=message.from_user.first_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"))
    new_main_keyboard = MENU_KEYBOARDS.get(current_state, get_main_menu())

    if current_state == MenuStates.SELECT_LANGUAGE.state or current_state == MenuStates.CHANGE_USERNAME.state:
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        try:
            await bot.send_message(
                chat_id=message.chat.id,
                text=USE_BUTTON_NAVIGATION_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—ñ–¥–∫–∞–∑–∫—É: {e}")
        await transition_state(state, current_state)
        return

    if current_state == MenuStates.GPT_MENU.state:
        new_interactive_text = "üëæ GPT Menu"
    elif current_state == MenuStates.FEEDBACK_MENU.state:
        new_interactive_text = "üíå Feedback Menu"
    else:
        new_interactive_text = "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        main_message = await bot.send_message(
            chat_id=message.chat.id,
            text=new_main_text,
            reply_markup=new_main_keyboard
        )
        new_bot_message_id = main_message.message_id
    except Exception as e:
        logger.error(f"Failed to send new message: {e}")
        await handle_error(bot, chat_id=message.chat.id, error_message=GENERIC_ERROR_MESSAGE_TEXT, logger=logger)
        return

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if bot_message_id:
        await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if interactive_message_id:
        await check_and_edit_message(
            bot=bot,
            chat_id=message.chat.id,
            message_id=interactive_message_id,
            new_text=new_interactive_text,
            new_keyboard=get_generic_inline_keyboard(),
            state=state,
            parse_mode=ParseMode.HTML
        )
    else:
        # –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
        try:
            interactive_message = await bot.send_message(
                chat_id=message.chat.id,
                text=new_interactive_text,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(interactive_message_id=interactive_message.message_id)
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await transition_state(state, new_state)
    await state.update_data(bot_message_id=new_bot_message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (—à–∞–≥ 1: –≤–≤–æ–¥ –∏–º–µ–Ω –≥–µ—Ä–æ–µ–≤)
@router.message(MenuStates.COMPARISON_STEP_1)
async def handle_comparison_step_1(message: Message, state: FSMContext, db: AsyncSession, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–µ–º–∞ –∏–º–µ–Ω –≥–µ—Ä–æ–µ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.
    """
    heroes_input = message.text.strip()
    user_id = message.from_user.id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–≤—ñ–≤ –≥–µ—Ä–æ—ó–≤ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è: {heroes_input}")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    if ',' not in heroes_input:
        response_text = "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–º–µ–Ω–∞ –¥–≤–æ—Ö –≥–µ—Ä–æ—ó–≤, —Ä–æ–∑–¥—ñ–ª–∏–≤—à–∏ —ó—Ö –∫–æ–º–æ—é (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, Hero A, Hero B)."
        try:
            await bot.send_message(chat_id=message.chat.id, text=response_text, reply_markup=get_generic_inline_keyboard())
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è: {e}")
        return

    hero1_name, hero2_name = [name.strip() for name in heroes_input.split(',', 1)]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º–µ–Ω–∞ –≥–µ—Ä–æ–µ–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await state.update_data(
        comparison_step=2,
        temp_data={'hero1_name': hero1_name, 'hero2_name': hero2_name}
    )
    await transition_state(state, MenuStates.COMPARISON_STEP_2)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    comparison_confirm_text = (
        f"–í–∏ —Ö–æ—á–µ—Ç–µ –ø–æ—Ä—ñ–≤–Ω—è—Ç–∏ **{hero1_name}** —Ç–∞ **{hero2_name}**?\n\n"
        f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚úÖ –¢–∞–∫' –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–±–æ '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏' –¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏."
    )
    confirmation_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –¢–∞–∫", callback_data="compare_confirm_yes")],
        [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="compare_confirm_no")]
    ])

    try:
        await bot.send_message(
            chat_id=message.chat.id,
            text=comparison_confirm_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=confirmation_keyboard
        )
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è: {e}")
        await handle_error(bot, chat_id=message.chat.id, error_message=GENERIC_ERROR_MESSAGE_TEXT, logger=logger)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≥–µ—Ä–æ–µ–≤
@router.callback_query(F.data == "compare_confirm_yes" | F.data == "compare_confirm_no")
async def handle_comparison_confirmation(callback: CallbackQuery, state: FSMContext, db: AsyncSession, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≥–µ—Ä–æ–µ–≤.
    """
    data = callback.data
    state_data = await state.get_data()

    if data == "compare_confirm_yes":
        temp_data = state_data.get('temp_data', {})
        hero1_name = temp_data.get('hero1_name')
        hero2_name = temp_data.get('hero2_name')

        if not hero1_name or not hero2_name:
            response_text = "‚ùå –î–∞–Ω—ñ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            try:
                await bot.send_message(chat_id=callback.message.chat.id, text=response_text, reply_markup=get_generic_inline_keyboard())
            except Exception as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è: {e}")
            await transition_state(state, MenuStates.CHALLENGES_MENU)
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–µ—Ä–æ–µ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        # –ó–¥–µ—Å—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–µ—Ä–æ–µ–≤
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        hero1_stats = {'kills': 50, 'deaths': 30, 'assists': 100}
        hero2_stats = {'kills': 70, 'deaths': 40, 'assists': 120}

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        try:
            comparison_graph_bytes = create_comparison_graph(hero1_stats, hero2_stats, hero1_name, hero2_name)
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è: {e}")
            await handle_error(bot, chat_id=callback.message.chat.id, error_message=GENERIC_ERROR_MESSAGE_TEXT, logger=logger)
            await transition_state(state, MenuStates.CHALLENGES_MENU)
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        try:
            await bot.send_photo(
                chat_id=callback.message.chat.id,
                photo=io.BytesIO(comparison_graph_bytes),
                caption=f"‚öîÔ∏è –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è: {hero1_name} vs {hero2_name}",
                reply_markup=get_generic_inline_keyboard()
            )
            logger.info(f"–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –º—ñ–∂ {hero1_name} —Ç–∞ {hero2_name} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {callback.from_user.id}")
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è: {e}")
            await handle_error(bot, chat_id=callback.message.chat.id, error_message=GENERIC_ERROR_MESSAGE_TEXT, logger=logger)

        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é Challenges
        await state.update_data(comparison_step=None, temp_data={})
        await transition_state(state, MenuStates.CHALLENGES_MENU)
    elif data == "compare_confirm_no":
        response_text = "‚ùå –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ."
        try:
            await bot.send_message(chat_id=callback.message.chat.id, text=response_text, reply_markup=get_generic_inline_keyboard())
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è: {e}")
        await transition_state(state, MenuStates.CHALLENGES_MENU)
    else:
        logger.warning(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è: {data}")
        await bot.answer_callback_query(callback.id, text="–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥—ñ—è.", show_alert=True)

    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–æ–∏—Å–∫–∞ –≥–µ—Ä–æ—è
@router.message(MenuStates.SEARCH_HERO)
async def handle_search_hero(message: Message, state: FSMContext, bot: Bot, db: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–µ–º–∞ –∏–º–µ–Ω–∏ –≥–µ—Ä–æ—è –¥–ª—è –ø–æ–∏—Å–∫–∞.
    """
    hero_name = message.text.strip()
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} —à—É–∫–∞—î –≥–µ—Ä–æ—è: {hero_name}")

    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –î–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ –≥–µ—Ä–æ—è
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≥–µ—Ä–æ—è, –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Ç.–¥.
    # –ü–æ–∫–∞ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞

    if hero_name:
        response_text = SEARCH_HERO_RESPONSE_TEXT.format(hero_name=hero_name)
    else:
        response_text = "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–º'—è –≥–µ—Ä–æ—è –¥–ª—è –ø–æ—à—É–∫—É."

    try:
        await bot.send_message(
            chat_id=message.chat.id,
            text=response_text,
            reply_markup=get_generic_inline_keyboard()
        )
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—à—É–∫ –≥–µ—Ä–æ—è: {e}")
        await handle_error(bot, chat_id=message.chat.id, error_message=GENERIC_ERROR_MESSAGE_TEXT, logger=logger)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é Heroes
    await transition_state(state, MenuStates.HEROES_MENU)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–µ–º–∞ —Ç–µ–º—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
@router.message(MenuStates.SEARCH_TOPIC)
async def handle_search_topic(message: Message, state: FSMContext, bot: Bot, db: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–µ–º–∞ —Ç–µ–º—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
    """
    topic = message.text.strip()
    user_id = message.from_user.id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –ø—Ä–æ–ø–æ–Ω—É—î —Ç–µ–º—É: {topic}")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –î–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç–µ–º—ã
    # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    # –ü–æ–∫–∞ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞

    if topic:
        response_text = SUGGESTION_RESPONSE_TEXT.format(topic=topic)
    else:
        response_text = "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–º—É –¥–ª—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó."

    try:
        await bot.send_message(
            chat_id=message.chat.id,
            text=response_text,
            reply_markup=get_generic_inline_keyboard()
        )
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é —Ç–µ–º–∏: {e}")
        await handle_error(bot, chat_id=message.chat.id, error_message=GENERIC_ERROR_MESSAGE_TEXT, logger=logger)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é Feedback
    await transition_state(state, MenuStates.FEEDBACK_MENU)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–µ–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
@router.message(MenuStates.FEEDBACK_MENU)
async def handle_feedback(message: Message, state: FSMContext, bot: Bot, db: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–µ–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    feedback = message.text.strip()
    user_id = message.from_user.id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–ª–∏—à–∏–≤ –∑–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤'—è–∑–æ–∫: {feedback}")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    if feedback:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        # –ü—Ä–∏–º–µ—Ä:
        # new_feedback = Feedback(user_id=user_id, feedback=feedback)
        # db.add(new_feedback)
        # await db.commit()

        response_text = FEEDBACK_RECEIVED_TEXT
        logger.info(f"–ó–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤'—è–∑–æ–∫ –æ—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
    else:
        response_text = "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ –≤–∞—à –∑–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤'—è–∑–æ–∫."

    try:
        await bot.send_message(
            chat_id=message.chat.id,
            text=response_text,
            reply_markup=get_generic_inline_keyboard()
        )
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É: {e}")
        await handle_error(bot, chat_id=message.chat.id, error_message=GENERIC_ERROR_MESSAGE_TEXT, logger=logger)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é Profile
    await transition_state(state, MenuStates.PROFILE_MENU)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–µ–º–∞ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ
@router.message(MenuStates.REPORT_BUG)
async def handle_report_bug(message: Message, state: FSMContext, bot: Bot, db: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–µ–º–∞ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    bug_report = message.text.strip()
    user_id = message.from_user.id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –ø–æ–≤—ñ–¥–æ–º–∏–≤ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É: {bug_report}")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    if bug_report:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        # –ü—Ä–∏–º–µ—Ä:
        # new_bug = BugReport(user_id=user_id, report=bug_report)
        # db.add(new_bug)
        # await db.commit()

        response_text = BUG_REPORT_RECEIVED_TEXT
        logger.info(f"–ó–≤—ñ—Ç –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –æ—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
    else:
        response_text = "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à—ñ—Ç—å –ø–æ–º–∏–ª–∫—É, —è–∫—É –≤–∏ –∑—É—Å—Ç—Ä—ñ–ª–∏."

    try:
        await bot.send_message(chat_id=message.chat.id, text=response_text, reply_markup=get_generic_inline_keyboard())
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤—ñ—Ç—É –ø—Ä–æ –ø–æ–º–∏–ª–∫—É: {e}")
        await handle_error(bot, chat_id=message.chat.id, error_message=GENERIC_ERROR_MESSAGE_TEXT, logger=logger)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é Feedback
    await transition_state(state, MenuStates.FEEDBACK_MENU)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "GPT"
@router.message(F.text == MenuButton.GPT.value, MenuStates.MAIN_MENU)
async def handle_gpt(message: Message, state: FSMContext, bot: Bot, db: AsyncSession):
    logger.info(f"User {message.from_user.id} selected GPT")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    is_valid, data = await verify_state_data(state)
    if not is_valid:
        try:
            await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"Failed to send main menu error message: {e}")
        return

    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é GPT
    try:
        gpt_message = await bot.send_message(
            chat_id=message.chat.id,
            text=GPT_TEXT,
            reply_markup=get_gpt_menu()
        )
        new_bot_message_id = gpt_message.message_id
    except Exception as e:
        logger.error(f"Failed to send GPT menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        return

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    await update_interactive_screen(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        text="üëæ GPT Menu",
        keyboard=get_generic_inline_keyboard()
    )

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, MenuStates.GPT_MENU)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é "GPT Menu"
@router.message(MenuStates.GPT_MENU)
async def handle_gpt_menu_buttons(message: Message, state: FSMContext, bot: Bot, db: AsyncSession):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected {user_choice} in GPT Menu")

    await safe_delete_message(bot, message.chat.id, message.message_id)

    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            error_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=error_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"Failed to send main menu error message: {e}")
        return

    new_main_text = ""
    new_main_keyboard = get_gpt_menu()
    new_interactive_text = "üëæ GPT Menu"
    new_state = MenuStates.GPT_MENU

    if user_choice == MenuButton.CHAT.value:
        new_main_text = "ü§ñ GPT Chat —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
        # –ú–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä, Chatting
    elif user_choice == MenuButton.ASSIST.value:
        new_main_text = "ü§ñ GPT Assist —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
        # –ú–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä, Assisting
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
        new_main_keyboard = get_main_menu()
        new_interactive_text = "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é"
        new_state = MenuStates.MAIN_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_gpt_menu()

    try:
        main_message = await bot.send_message(
            chat_id=message.chat.id,
            text=new_main_text,
            reply_markup=new_main_keyboard
        )
        new_bot_message_id = main_message.message_id
    except Exception as e:
        logger.error(f"Failed to send new GPT menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        return

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    await update_interactive_screen(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        text=new_interactive_text,
        keyboard=get_generic_inline_keyboard()
    )

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä)
@router.message(MenuStates.GENERATE_COMPARISON_GRAPH)
async def generate_comparison_graph_handler(message: Message, state: FSMContext, bot: Bot, db: AsyncSession):
    # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —ç—Ç–æ —à–∞–≥ 3 –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    comparison_data = await state.get_data()
    hero1 = comparison_data.get('hero1_name')
    hero2 = comparison_data.get('hero2_name')

    if not hero1 or not hero2:
        response_text = "‚ùå –î–∞–Ω—ñ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
        try:
            await bot.send_message(chat_id=message.chat.id, text=response_text, reply_markup=get_generic_inline_keyboard())
        except Exception as e:
            logger.error(f"Failed to send missing data message: {e}")
        await transition_state(state, MenuStates.HEROES_MENU)
        return

    # –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–µ—Ä–æ–µ–≤
    # hero1_stats = await get_hero_stats(db, hero1)
    # hero2_stats = await get_hero_stats(db, hero2)

    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    hero1_stats = {'kills': 50, 'deaths': 30, 'assists': 100}
    hero2_stats = {'kills': 70, 'deaths': 40, 'assists': 120}

    try:
        comparison_graph_bytes = create_comparison_graph(hero1_stats, hero2_stats, hero1, hero2)
    except Exception as e:
        logger.error(f"Failed to create comparison graph: {e}")
        await handle_error(bot, chat_id=message.chat.id, error_message=GENERIC_ERROR_MESSAGE_TEXT, logger=logger)
        await transition_state(state, MenuStates.HEROES_MENU)
        return

    try:
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=io.BytesIO(comparison_graph_bytes),
            caption=f"‚öîÔ∏è –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è: {hero1} vs {hero2}",
            reply_markup=get_generic_inline_keyboard()
        )
        logger.info(f"Sent comparison graph for {hero1} vs {hero2} to user {message.from_user.id}")
    except Exception as e:
        logger.error(f"Failed to send comparison graph: {e}")
        await handle_error(bot, chat_id=message.chat.id, error_message=GENERIC_ERROR_MESSAGE_TEXT, logger=logger)

    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é Heroes
    await state.update_data(comparison_step=None, temp_data={})
    await transition_state(state, MenuStates.HEROES_MENU)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ)
@router.message()
async def handle_unknown(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤"""
    await unknown_command(message, state, bot)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def setup_handlers(dp: Dispatcher):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ Dispatcher.
    """
    dp.include_router(router)
    # –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ —Ä–æ—É—Ç–µ—Ä—ã, –≤–∫–ª—é—á–∏—Ç–µ –∏—Ö –∑–¥–µ—Å—å, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    # dp.include_router(profile_router)