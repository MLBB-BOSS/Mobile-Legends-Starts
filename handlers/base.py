# handlers.py

import logging
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from keyboards.menus import (
    MenuButton,
    menu_button_to_class,
    get_main_menu,
    get_navigation_menu,
    get_heroes_menu,
    get_guides_menu,
    get_counter_picks_menu,
    get_builds_menu,
    get_voting_menu,
    get_profile_menu,
    get_hero_class_menu,
    heroes_by_class,
)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–µ—Ä
router = Router()

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def cmd_start(message: Message):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start.
    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –ø–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.
    """
    user_name = message.from_user.first_name
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –≤–∏–∫–ª–∏–∫–∞–≤ /start")
    await message.answer(
        f"üëã –í—ñ—Ç–∞—î–º–æ, {user_name}, —É Mobile Legends Tournament Bot!\n\n"
        "üéÆ –¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º:\n"
        "‚Ä¢ –û—Ä–≥–∞–Ω—ñ–∑–æ–≤—É–≤–∞—Ç–∏ —Ç—É—Ä–Ω—ñ—Ä–∏\n"
        "‚Ä¢ –ó–±–µ—Ä—ñ–≥–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤\n"
        "‚Ä¢ –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å\n"
        "‚Ä¢ –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ üëá",
        reply_markup=get_main_menu(),
    )

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
@router.message(F.text == MenuButton.NAVIGATION.value)
async def cmd_navigation(message: Message):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –æ–±—Ä–∞–≤ –ù–∞–≤—ñ–≥–∞—Ü—ñ—é")
    await message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó:",
        reply_markup=get_navigation_menu(),
    )

@router.message(F.text == MenuButton.PROFILE.value)
async def cmd_profile(message: Message):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –æ–±—Ä–∞–≤ –ú—ñ–π –ü—Ä–æ—Ñ—ñ–ª—å")
    await message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –ø—Ä–æ—Ñ—ñ–ª—é:",
        reply_markup=get_profile_menu(),
    )

@router.message(F.text == MenuButton.HEROES.value)
async def cmd_heroes(message: Message):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –æ–±—Ä–∞–≤ –ü–µ—Ä—Å–æ–Ω–∞–∂—ñ")
    await message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≥–µ—Ä–æ—ó–≤:",
        reply_markup=get_heroes_menu(),
    )

# –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –∫–ª–∞—Å—ñ–≤
class_buttons = list(menu_button_to_class.keys())

@router.message(F.text.in_(class_buttons))
async def cmd_hero_class(message: Message):
    hero_class = menu_button_to_class.get(message.text)
    if hero_class:
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –æ–±—Ä–∞–≤ –∫–ª–∞—Å {hero_class}")
        await message.answer(
            f"–í–∏–±–µ—Ä—ñ—Ç—å –≥–µ—Ä–æ—è –∑ –∫–ª–∞—Å—É {hero_class}:",
            reply_markup=get_hero_class_menu(hero_class)
        )
    else:
        logger.warning(f"–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–ª–∞—Å –≥–µ—Ä–æ—ó–≤: {message.text}")
        await message.answer(
            "‚ùó –í–∏–±–∞—á—Ç–µ, —è –Ω–µ —Ä–æ–∑—É–º—ñ—é —Ü—é –∫–æ–º–∞–Ω–¥—É. –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –º–µ–Ω—é –Ω–∏–∂—á–µ.",
            reply_markup=get_heroes_menu(),
        )

# –°–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –≥–µ—Ä–æ—ó–≤
all_heroes = set()
for heroes in heroes_by_class.values():
    all_heroes.update(heroes)

@router.message(F.text.in_(all_heroes))
async def cmd_hero_selected(message: Message):
    hero_name = message.text
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –æ–±—Ä–∞–≤ –≥–µ—Ä–æ—è {hero_name}")
    # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≥–µ—Ä–æ—è
    await message.answer(
        f"–í–∏ –æ–±—Ä–∞–ª–∏ –≥–µ—Ä–æ—è {hero_name}. –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≥–µ—Ä–æ—è –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –ø—ñ–∑–Ω—ñ—à–µ.",
        reply_markup=get_main_menu(),
    )

@router.message(F.text == MenuButton.GUIDES.value)
async def cmd_guides(message: Message):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –æ–±—Ä–∞–≤ –ì–∞–π–¥–∏")
    await message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –≥–∞–π–¥–∏:",
        reply_markup=get_guides_menu(),
    )

@router.message(F.text == MenuButton.COUNTER_PICKS.value)
async def cmd_counter_picks(message: Message):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –æ–±—Ä–∞–≤ –ö–æ–Ω—Ç—Ä-–ø—ñ–∫–∏")
    await message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–Ω—Ç—Ä-–ø—ñ–∫–∏:",
        reply_markup=get_counter_picks_menu(),
    )

@router.message(F.text == MenuButton.BUILDS.value)
async def cmd_builds(message: Message):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –æ–±—Ä–∞–≤ –ë—ñ–ª–¥–∏")
    await message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –±—ñ–ª–¥–∏:",
        reply_markup=get_builds_menu(),
    )

@router.message(F.text == MenuButton.VOTING.value)
async def cmd_voting(message: Message):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –æ–±—Ä–∞–≤ –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è")
    await message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è:",
        reply_markup=get_voting_menu(),
    )

# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
@router.message(F.text == MenuButton.BACK.value)
async def cmd_back(message: Message):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –Ω–∞—Ç–∏—Å–Ω—É–≤ '–ù–∞–∑–∞–¥'")
    await message.answer(
        "üîô –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:",
        reply_markup=get_main_menu(),
    )

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@router.message()
async def unknown_command(message: Message):
    logger.warning(f"–ù–µ–≤—ñ–¥–æ–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {message.from_user.id}: {message.text}")
    await message.answer(
        "‚ùó –í–∏–±–∞—á—Ç–µ, —è –Ω–µ —Ä–æ–∑—É–º—ñ—é —Ü—é –∫–æ–º–∞–Ω–¥—É. –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –º–µ–Ω—é –Ω–∏–∂—á–µ.",
        reply_markup=get_main_menu(),
    )
