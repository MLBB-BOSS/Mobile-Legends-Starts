# handlers/base.py

import logging
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from keyboards.menus import (
    MenuButton,
    menu_button_to_class,
    get_main_menu,
    get_navigation_menu,
    get_heroes_menu,
    get_hero_class_menu,
    get_profile_menu,
    get_statistics_menu,
    get_achievements_menu,
    get_settings_menu,
    get_feedback_menu,
    get_help_menu,
    heroes_by_class,
)

from keyboards.inline_menus import get_guides_inline_menu

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)
router = Router()

# –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞–Ω–∏ –º–µ–Ω—é
class MenuStates(StatesGroup):
    MAIN_MENU = State()
    NAVIGATION_MENU = State()
    HEROES_MENU = State()
    HERO_CLASS_MENU = State()
    GUIDES_MENU = State()
    COUNTER_PICKS_MENU = State()
    BUILDS_MENU = State()
    VOTING_MENU = State()
    PROFILE_MENU = State()
    STATISTICS_MENU = State()
    ACHIEVEMENTS_MENU = State()
    SETTINGS_MENU = State()
    FEEDBACK_MENU = State()
    HELP_MENU = State()

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    user_name = message.from_user.first_name
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –≤–∏–∫–ª–∏–∫–∞–≤ /start")
    await state.set_state(MenuStates.MAIN_MENU)
    await message.answer(
        f"üëã –í—ñ—Ç–∞—î–º–æ, {user_name}, —É Mobile Legends Tournament Bot!\n\n"
        "üéÆ –¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º:\n"
        "‚Ä¢ –û—Ä–≥–∞–Ω—ñ–∑–æ–≤—É–≤–∞—Ç–∏ —Ç—É—Ä–Ω—ñ—Ä–∏\n"
        "‚Ä¢ –ó–±–µ—Ä—ñ–≥–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤\n"
        "‚Ä¢ –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å\n"
        "‚Ä¢ –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ üëá",
        reply_markup=get_main_menu(),
    )

# –ì–æ–ª–æ–≤–Ω–µ –ú–µ–Ω—é
@router.message(MenuStates.MAIN_MENU, F.text == MenuButton.NAVIGATION.value)
async def cmd_navigation(message: Message, state: FSMContext):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –æ–±—Ä–∞–≤ –ù–∞–≤—ñ–≥–∞—Ü—ñ—é")
    await state.set_state(MenuStates.NAVIGATION_MENU)
    await message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó:",
        reply_markup=get_navigation_menu(),
    )

@router.message(MenuStates.MAIN_MENU, F.text == MenuButton.PROFILE.value)
async def cmd_profile(message: Message, state: FSMContext):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –æ–±—Ä–∞–≤ –ú—ñ–π –ü—Ä–æ—Ñ—ñ–ª—å")
    await state.set_state(MenuStates.PROFILE_MENU)
    await message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –ø—Ä–æ—Ñ—ñ–ª—é:",
        reply_markup=get_profile_menu(),
    )

# –†–æ–∑–¥—ñ–ª "–ù–∞–≤—ñ–≥–∞—Ü—ñ—è"
@router.message(MenuStates.NAVIGATION_MENU, F.text == MenuButton.HEROES.value)
async def cmd_heroes(message: Message, state: FSMContext):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –æ–±—Ä–∞–≤ –ü–µ—Ä—Å–æ–Ω–∞–∂—ñ")
    await state.set_state(MenuStates.HEROES_MENU)
    await message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≥–µ—Ä–æ—ó–≤:",
        reply_markup=get_heroes_menu(),
    )

@router.message(MenuStates.NAVIGATION_MENU, F.text == MenuButton.GUIDES.value)
async def cmd_guides(message: Message, state: FSMContext):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –æ–±—Ä–∞–≤ –ì–∞–π–¥–∏")
    await state.set_state(MenuStates.GUIDES_MENU)
    sent_message = await message.answer(
        "üìù **–ì–∞–π–¥–∏**\n\n–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π –Ω–∏–∂—á–µ:",
        reply_markup=get_guides_inline_menu(),
        parse_mode="Markdown"
    )
    await state.update_data(last_message_id=sent_message.message_id)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ —É —Ä–æ–∑–¥—ñ–ª—ñ "–ì–∞–π–¥–∏"
@router.callback_query(MenuStates.GUIDES_MENU, F.data.startswith("guide_"))
async def callback_guides(call: types.CallbackQuery, state: FSMContext):
    action = call.data
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {call.from_user.id} –Ω–∞—Ç–∏—Å–Ω—É–≤ {action}")

    if action == "guide_new":
        new_text = "üÜï **–ù–æ–≤—ñ –ì–∞–π–¥–∏**\n\n–°–ø–∏—Å–æ–∫ –Ω–æ–≤–∏—Ö –≥–∞–π–¥—ñ–≤:"
    elif action == "guide_popular":
        new_text = "üåü **–ü–æ–ø—É–ª—è—Ä–Ω—ñ –ì–∞–π–¥–∏**\n\n–°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö –≥–∞–π–¥—ñ–≤:"
    elif action == "guide_beginner":
        new_text = "üìò **–ì–∞–π–¥–∏ –¥–ª—è –ü–æ—á–∞—Ç–∫—ñ–≤—Ü—ñ–≤**\n\n–ü–æ—Ä–∞–¥–∏ —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –Ω–æ–≤–∞—á–∫—ñ–≤:"
    elif action == "guide_advanced":
        new_text = "üßô **–ü—Ä–æ—Å—É–Ω—É—Ç—ñ –¢–µ—Ö–Ω—ñ–∫–∏**\n\n–î–µ—Ç–∞–ª—å–Ω—ñ –≥–∞–π–¥–∏ –¥–ª—è –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤:"
    elif action == "guide_teamplay":
        new_text = "üõ°Ô∏è **–ö–æ–º–∞–Ω–¥–Ω–∞ –ì—Ä–∞**\n\n–°—Ç—Ä–∞—Ç–µ–≥—ñ—ó —Ç–∞ —Ç–∞–∫—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥–Ω–æ—ó –≥—Ä–∏:"
    else:
        new_text = "‚ùó –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è."

    await call.message.edit_text(
        new_text,
        reply_markup=get_guides_inline_menu(),
        parse_mode="Markdown"
    )
    await call.answer()

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞—Ö
@router.callback_query(MenuStates.GUIDES_MENU, F.data == "back_to_navigation")
async def callback_back_to_navigation(call: types.CallbackQuery, state: FSMContext):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {call.from_user.id} –Ω–∞—Ç–∏—Å–Ω—É–≤ –ù–∞–∑–∞–¥ –≤ –≥–∞–π–¥–∞—Ö")
    await state.set_state(MenuStates.NAVIGATION_MENU)
    await call.message.delete()
    await call.message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó:",
        reply_markup=get_navigation_menu()
    )
    await call.answer()

# –†–æ–∑–¥—ñ–ª "–ü–µ—Ä—Å–æ–Ω–∞–∂—ñ" –∑–∞–ª–∏—à–∞—î–º–æ –±–µ–∑ –∑–º—ñ–Ω, —è–∫—â–æ –≤–∞–º –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞–≤–∞—Ç–∏ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏

# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞
@router.message(F.text == MenuButton.BACK.value)
async def cmd_back(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == MenuStates.NAVIGATION_MENU.state:
        await state.set_state(MenuStates.MAIN_MENU)
        await message.answer(
            "üîô –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:",
            reply_markup=get_main_menu(),
        )
    elif current_state in [
        MenuStates.HEROES_MENU.state,
        # MenuStates.GUIDES_MENU.state,  # –í–∏–¥–∞–ª–µ–Ω–æ, –æ—Å–∫—ñ–ª—å–∫–∏ –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        # –Ü–Ω—à—ñ —Å—Ç–∞–Ω–∏...
    ]:
        await state.set_state(MenuStates.NAVIGATION_MENU)
        await message.answer(
            "üîô –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é –ù–∞–≤—ñ–≥–∞—Ü—ñ—è:",
            reply_markup=get_navigation_menu(),
        )
    elif current_state == MenuStates.PROFILE_MENU.state:
        await state.set_state(MenuStates.MAIN_MENU)
        await message.answer(
            "üîô –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:",
            reply_markup=get_main_menu(),
        )
    # –î–æ–¥–∞–π—Ç–µ —ñ–Ω—à—ñ —É–º–æ–≤–∏, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@router.message()
async def unknown_command(message: Message, state: FSMContext):
    logger.warning(f"–ù–µ–≤—ñ–¥–æ–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {message.from_user.id}: {message.text}")
    current_state = await state.get_state()
    if current_state == MenuStates.MAIN_MENU.state:
        reply_markup = get_main_menu()
    elif current_state == MenuStates.NAVIGATION_MENU.state:
        reply_markup = get_navigation_menu()
    elif current_state == MenuStates.HEROES_MENU.state:
        reply_markup = get_heroes_menu()
    elif current_state == MenuStates.HERO_CLASS_MENU.state:
        data = await state.get_data()
        hero_class = data.get('hero_class', '–¢–∞–Ω–∫')
        reply_markup = get_hero_class_menu(hero_class)
    elif current_state == MenuStates.PROFILE_MENU.state:
        reply_markup = get_profile_menu()
    else:
        reply_markup = get_main_menu()
        await state.set_state(MenuStates.MAIN_MENU)
    await message.answer(
        "‚ùó –í–∏–±–∞—á—Ç–µ, —è –Ω–µ —Ä–æ–∑—É–º—ñ—é —Ü—é –∫–æ–º–∞–Ω–¥—É. –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –º–µ–Ω—é –Ω–∏–∂—á–µ.",
        reply_markup=reply_markup,
    )

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
def setup_handlers(dp):
    dp.include_router(router)
