# handlers.py

import logging
from aiogram import Router, F
from aiogram.filters import Command, Text
from aiogram.types import Message, CallbackQuery
from keyboards.menus import (
    MenuButton,
    menu_button_to_class,
    get_main_menu,
    get_navigation_menu,
    get_heroes_menu,
    get_guides_menu,
    get_counter_picks_menu,
    get_builds_menu,
    get_voting_menu,
    get_profile_menu,
    get_hero_class_menu,
    heroes_by_class,
)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–µ—Ä
router = Router()

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def cmd_start(message: Message):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start.
    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –ø–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.
    """
    user_name = message.from_user.first_name
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –≤–∏–∫–ª–∏–∫–∞–≤ /start")
    await message.answer(
        f"üëã –í—ñ—Ç–∞—î–º–æ, {user_name}, —É Mobile Legends Tournament Bot!\n\n"
        "üéÆ –¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º:\n"
        "‚Ä¢ –û—Ä–≥–∞–Ω—ñ–∑–æ–≤—É–≤–∞—Ç–∏ —Ç—É—Ä–Ω—ñ—Ä–∏\n"
        "‚Ä¢ –ó–±–µ—Ä—ñ–≥–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤\n"
        "‚Ä¢ –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å\n"
        "‚Ä¢ –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ üëá",
        reply_markup=get_main_menu(),
    )

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è Reply Keyboard (–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é)
@router.message(F.text == MenuButton.NAVIGATION.value)
async def cmd_navigation(message: Message):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –æ–±—Ä–∞–≤ –ù–∞–≤—ñ–≥–∞—Ü—ñ—é")
    await message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó:",
        reply_markup=get_navigation_menu(),
    )

@router.message(F.text == MenuButton.PROFILE.value)
async def cmd_profile(message: Message):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –æ–±—Ä–∞–≤ –ú—ñ–π –ü—Ä–æ—Ñ—ñ–ª—å")
    await message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –ø—Ä–æ—Ñ—ñ–ª—é:",
        reply_markup=get_profile_menu(),
    )

# Callback Query Handlers
@router.callback_query(Text(startswith="navigate_"))
async def handle_navigation(callback_query: CallbackQuery):
    action = callback_query.data.split("_")[1]
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback_query.from_user.id} –æ–±—Ä–∞–≤ –ù–∞–≤—ñ–≥–∞—Ü—ñ—é -> {action}")
    
    if action == "heroes":
        await callback_query.message.edit_text(
            "–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≥–µ—Ä–æ—ó–≤:",
            reply_markup=get_heroes_menu()
        )
    elif action == "guides":
        await callback_query.message.edit_text(
            "–í–∏–±–µ—Ä—ñ—Ç—å –≥–∞–π–¥–∏:",
            reply_markup=get_guides_menu()
        )
    elif action == "counter":
        await callback_query.message.edit_text(
            "–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–Ω—Ç—Ä-–ø—ñ–∫–∏:",
            reply_markup=get_counter_picks_menu()
        )
    elif action == "builds":
        await callback_query.message.edit_text(
            "–í–∏–±–µ—Ä—ñ—Ç—å –±—ñ–ª–¥–∏:",
            reply_markup=get_builds_menu()
        )
    elif action == "voting":
        await callback_query.message.edit_text(
            "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è:",
            reply_markup=get_voting_menu()
        )
    elif action == "back":
        await callback_query.message.edit_text(
            "üîô –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:",
            reply_markup=get_main_menu()
        )
    await callback_query.answer()  # –í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è Callback Query

@router.callback_query(Text(startswith="heroes_"))
async def handle_heroes(callback_query: CallbackQuery):
    action = callback_query.data.split("_")[1]
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback_query.from_user.id} –æ–±—Ä–∞–≤ –ü–µ—Ä—Å–æ–Ω–∞–∂—ñ -> {action}")
    
    if action == "back":
        await callback_query.message.edit_text(
            "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó:",
            reply_markup=get_navigation_menu()
        )
    else:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ü–µ –∫–ª–∞—Å –≥–µ—Ä–æ—ó–≤
        hero_class = menu_button_to_class.get(MenuButton(action).value, None)
        if hero_class:
            await callback_query.message.edit_text(
                f"–í–∏–±–µ—Ä—ñ—Ç—å –≥–µ—Ä–æ—è –∑ –∫–ª–∞—Å—É **{hero_class}**:",
                parse_mode="Markdown",
                reply_markup=get_hero_class_menu(hero_class)
            )
        else:
            # –Ø–∫—â–æ —Ü–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –≥–µ—Ä–æ–π
            await callback_query.message.edit_text(
                f"–í–∏ –æ–±—Ä–∞–ª–∏ –≥–µ—Ä–æ—è **{action}**. –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≥–µ—Ä–æ—è –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –ø—ñ–∑–Ω—ñ—à–µ.",
                parse_mode="Markdown",
                reply_markup=get_main_menu()
            )
    await callback_query.answer()

@router.callback_query(Text(startswith="guides_"))
async def handle_guides(callback_query: CallbackQuery):
    action = callback_query.data.split("_")[1]
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback_query.from_user.id} –æ–±—Ä–∞–≤ –ì–∞–π–¥–∏ -> {action}")
    
    if action == "back":
        await callback_query.message.edit_text(
            "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó:",
            reply_markup=get_navigation_menu()
        )
    else:
        # –û–±—Ä–æ–±–∫–∞ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –≥–∞–π–¥—ñ–≤
        await callback_query.message.edit_text(
            f"–í–∏ –æ–±—Ä–∞–ª–∏ –≥–∞–π–¥–∏: **{action.replace('_', ' ').title()}**.",
            parse_mode="Markdown",
            reply_markup=get_guides_menu()
        )
    await callback_query.answer()

@router.callback_query(Text(startswith="counter_"))
async def handle_counter_picks(callback_query: CallbackQuery):
    action = callback_query.data.split("_")[1]
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback_query.from_user.id} –æ–±—Ä–∞–≤ –ö–æ–Ω—Ç—Ä-–ø—ñ–∫–∏ -> {action}")
    
    if action == "back":
        await callback_query.message.edit_text(
            "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó:",
            reply_markup=get_navigation_menu()
        )
    else:
        # –û–±—Ä–æ–±–∫–∞ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –∫–æ–Ω—Ç—Ä-–ø—ñ–∫—ñ–≤
        await callback_query.message.edit_text(
            f"–í–∏ –æ–±—Ä–∞–ª–∏ –∫–æ–Ω—Ç—Ä-–ø—ñ–∫–∏: **{action.replace('_', ' ').title()}**.",
            parse_mode="Markdown",
            reply_markup=get_counter_picks_menu()
        )
    await callback_query.answer()

@router.callback_query(Text(startswith="builds_"))
async def handle_builds(callback_query: CallbackQuery):
    action = callback_query.data.split("_")[1]
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback_query.from_user.id} –æ–±—Ä–∞–≤ –ë—ñ–ª–¥–∏ -> {action}")
    
    if action == "back":
        await callback_query.message.edit_text(
            "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó:",
            reply_markup=get_navigation_menu()
        )
    else:
        # –û–±—Ä–æ–±–∫–∞ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –±—ñ–ª—ñ–≤
        await callback_query.message.edit_text(
            f"–í–∏ –æ–±—Ä–∞–ª–∏ –±—ñ–ª–¥–∏: **{action.replace('_', ' ').title()}**.",
            parse_mode="Markdown",
            reply_markup=get_builds_menu()
        )
    await callback_query.answer()

@router.callback_query(Text(startswith="voting_"))
async def handle_voting(callback_query: CallbackQuery):
    action = callback_query.data.split("_")[1]
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback_query.from_user.id} –æ–±—Ä–∞–≤ –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è -> {action}")
    
    if action == "back":
        await callback_query.message.edit_text(
            "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó:",
            reply_markup=get_navigation_menu()
        )
    else:
        # –û–±—Ä–æ–±–∫–∞ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –≥–æ–ª–æ—Å—É–≤–∞–Ω—å
        await callback_query.message.edit_text(
            f"–í–∏ –æ–±—Ä–∞–ª–∏ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è: **{action.replace('_', ' ').title()}**.",
            parse_mode="Markdown",
            reply_markup=get_voting_menu()
        )
    await callback_query.answer()

@router.callback_query(Text(startswith="profile_"))
async def handle_profile(callback_query: CallbackQuery):
    action = callback_query.data.split("_")[1]
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback_query.from_user.id} –æ–±—Ä–∞–≤ –ü—Ä–æ—Ñ—ñ–ª—å -> {action}")
    
    if action == "back":
        await callback_query.message.edit_text(
            "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –ø—Ä–æ—Ñ—ñ–ª—é:",
            reply_markup=get_profile_menu()
        )
    else:
        # –û–±—Ä–æ–±–∫–∞ —Ä—ñ–∑–Ω–∏—Ö –∞—Å–ø–µ–∫—Ç—ñ–≤ –ø—Ä–æ—Ñ—ñ–ª—é
        await callback_query.message.edit_text(
            f"–í–∏ –æ–±—Ä–∞–ª–∏: **{action.replace('_', ' ').title()}**.",
            parse_mode="Markdown",
            reply_markup=get_profile_menu()
        )
    await callback_query.answer()

@router.callback_query(Text(startswith="hero_"))
async def handle_hero_selection(callback_query: CallbackQuery):
    hero_name = callback_query.data.split("_")[1]
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback_query.from_user.id} –æ–±—Ä–∞–≤ –≥–µ—Ä–æ—è {hero_name}")
    # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≥–µ—Ä–æ—è
    await callback_query.message.edit_text(
        f"–í–∏ –æ–±—Ä–∞–ª–∏ –≥–µ—Ä–æ—è **{hero_name}**. –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≥–µ—Ä–æ—è –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –ø—ñ–∑–Ω—ñ—à–µ.",
        parse_mode="Markdown",
        reply_markup=get_navigation_menu()
    )
    await callback_query.answer()

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥" —É —Ä—ñ–∑–Ω–∏—Ö –º–µ–Ω—é
@router.callback_query(Text(equals="navigate_back"))
async def handle_navigation_back(callback_query: CallbackQuery):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback_query.from_user.id} –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
    await callback_query.message.edit_text(
        "üîô –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )
    await callback_query.answer()

@router.callback_query(Text(equals="heroes_back"))
async def handle_heroes_back(callback_query: CallbackQuery):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback_query.from_user.id} –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –¥–æ –º–µ–Ω—é –ü–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤")
    await callback_query.message.edit_text(
        "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó:",
        reply_markup=get_navigation_menu()
    )
    await callback_query.answer()

@router.callback_query(Text(equals="guides_back"))
async def handle_guides_back(callback_query: CallbackQuery):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback_query.from_user.id} –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –¥–æ –º–µ–Ω—é –ì–∞–π–¥–∏")
    await callback_query.message.edit_text(
        "–í–∏–±–µ—Ä—ñ—Ç—å –≥–∞–π–¥–∏:",
        reply_markup=get_guides_menu()
    )
    await callback_query.answer()

@router.callback_query(Text(equals="counter_back"))
async def handle_counter_back(callback_query: CallbackQuery):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback_query.from_user.id} –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –¥–æ –º–µ–Ω—é –ö–æ–Ω—Ç—Ä-–ø—ñ–∫–∏")
    await callback_query.message.edit_text(
        "–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–Ω—Ç—Ä-–ø—ñ–∫–∏:",
        reply_markup=get_counter_picks_menu()
    )
    await callback_query.answer()

@router.callback_query(Text(equals="builds_back"))
async def handle_builds_back(callback_query: CallbackQuery):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback_query.from_user.id} –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –¥–æ –º–µ–Ω—é –ë—ñ–ª–¥–∏")
    await callback_query.message.edit_text(
        "–í–∏–±–µ—Ä—ñ—Ç—å –±—ñ–ª–¥–∏:",
        reply_markup=get_builds_menu()
    )
    await callback_query.answer()

@router.callback_query(Text(equals="voting_back"))
async def handle_voting_back(callback_query: CallbackQuery):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback_query.from_user.id} –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –¥–æ –º–µ–Ω—é –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è")
    await callback_query.message.edit_text(
        "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è:",
        reply_markup=get_voting_menu()
    )
    await callback_query.answer()

@router.callback_query(Text(equals="profile_back"))
async def handle_profile_back(callback_query: CallbackQuery):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback_query.from_user.id} –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –¥–æ –º–µ–Ω—é –ü—Ä–æ—Ñ—ñ–ª—å")
    await callback_query.message.edit_text(
        "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –ø—Ä–æ—Ñ—ñ–ª—é:",
        reply_markup=get_profile_menu()
    )
    await callback_query.answer()

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–µ–≤—ñ–¥–æ–º–∏—Ö Callback Queries
@router.callback_query()
async def unknown_callback(callback_query: CallbackQuery):
    logger.warning(f"–ù–µ–≤—ñ–¥–æ–º–∞ Callback Query –≤—ñ–¥ {callback_query.from_user.id}: {callback_query.data}")
    await callback_query.answer("‚ùó –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.", show_alert=True)
