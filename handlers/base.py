# handlers/base.py

import logging
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from keyboards.menus import (
    MenuButton,
    menu_button_to_class,
    get_main_menu,
    get_navigation_menu,
    get_heroes_menu,
    get_hero_class_menu,
    get_guides_menu,
    get_counter_picks_menu,
    get_builds_menu,
    get_voting_menu,
    get_profile_menu,
    get_statistics_menu,
    get_achievements_menu,
    get_settings_menu,
    get_feedback_menu,
    get_help_menu,
    heroes_by_class,
)

from keyboards.inline_menus import get_generic_inline_keyboard

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)
router = Router()

# –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞–Ω–∏ –º–µ–Ω—é
class MenuStates(StatesGroup):
    MAIN_MENU = State()
    NAVIGATION_MENU = State()
    HEROES_MENU = State()
    HERO_CLASS_MENU = State()
    GUIDES_MENU = State()
    COUNTER_PICKS_MENU = State()
    BUILDS_MENU = State()
    VOTING_MENU = State()
    PROFILE_MENU = State()
    STATISTICS_MENU = State()
    ACHIEVEMENTS_MENU = State()
    SETTINGS_MENU = State()
    FEEDBACK_MENU = State()
    HELP_MENU = State()

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    user_name = message.from_user.first_name
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –≤–∏–∫–ª–∏–∫–∞–≤ /start")
    await state.set_state(MenuStates.MAIN_MENU)
    await message.answer(
        f"üëã –í—ñ—Ç–∞—î–º–æ, {user_name}, —É Mobile Legends Tournament Bot!\n\n"
        "üéÆ –¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º:\n"
        "‚Ä¢ –û—Ä–≥–∞–Ω—ñ–∑–æ–≤—É–≤–∞—Ç–∏ —Ç—É—Ä–Ω—ñ—Ä–∏\n"
        "‚Ä¢ –ó–±–µ—Ä—ñ–≥–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤\n"
        "‚Ä¢ –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å\n"
        "‚Ä¢ –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ üëá",
        reply_markup=get_main_menu(),
    )
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(
        "–û—Å—å –≤–∞—à—ñ —ñ–Ω–ª–∞–π–Ω-–æ–ø—Ü—ñ—ó:",
        reply_markup=get_generic_inline_keyboard()
    )

# –ì–æ–ª–æ–≤–Ω–µ –ú–µ–Ω—é
@router.message(MenuStates.MAIN_MENU, F.text == MenuButton.NAVIGATION.value)
async def cmd_navigation(message: Message, state: FSMContext):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –æ–±—Ä–∞–≤ –ù–∞–≤—ñ–≥–∞—Ü—ñ—é")
    await state.set_state(MenuStates.NAVIGATION_MENU)
    await message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó:",
        reply_markup=get_navigation_menu(),
    )
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(
        "–û—Å—å –≤–∞—à—ñ —ñ–Ω–ª–∞–π–Ω-–æ–ø—Ü—ñ—ó:",
        reply_markup=get_generic_inline_keyboard()
    )

@router.message(MenuStates.MAIN_MENU, F.text == MenuButton.PROFILE.value)
async def cmd_profile(message: Message, state: FSMContext):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –æ–±—Ä–∞–≤ –ü—Ä–æ—Ñ—ñ–ª—å")
    await state.set_state(MenuStates.PROFILE_MENU)
    await message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –ø—Ä–æ—Ñ—ñ–ª—é:",
        reply_markup=get_profile_menu(),
    )
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(
        "–û—Å—å –≤–∞—à—ñ —ñ–Ω–ª–∞–π–Ω-–æ–ø—Ü—ñ—ó:",
        reply_markup=get_generic_inline_keyboard()
    )

# –†–æ–∑–¥—ñ–ª "üß≠ –ù–∞–≤—ñ–≥–∞—Ü—ñ—è"
@router.message(MenuStates.NAVIGATION_MENU, F.text == MenuButton.HEROES.value)
async def cmd_heroes(message: Message, state: FSMContext):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –æ–±—Ä–∞–≤ –ì–µ—Ä–æ—ó")
    await state.set_state(MenuStates.HEROES_MENU)
    await message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≥–µ—Ä–æ—ó–≤:",
        reply_markup=get_heroes_menu(),
    )
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(
        "–û—Å—å –≤–∞—à—ñ —ñ–Ω–ª–∞–π–Ω-–æ–ø—Ü—ñ—ó:",
        reply_markup=get_generic_inline_keyboard()
    )

@router.message(MenuStates.NAVIGATION_MENU, F.text == MenuButton.GUIDES.value)
async def cmd_guides(message: Message, state: FSMContext):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –æ–±—Ä–∞–≤ –ì–∞–π–¥–∏")
    await state.set_state(MenuStates.GUIDES_MENU)
    await message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –≥–∞–π–¥—ñ–≤:",
        reply_markup=get_guides_menu(),
    )
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(
        "–û—Å—å –≤–∞—à—ñ —ñ–Ω–ª–∞–π–Ω-–æ–ø—Ü—ñ—ó:",
        reply_markup=get_generic_inline_keyboard()
    )

@router.message(MenuStates.NAVIGATION_MENU, F.text == MenuButton.COUNTER_PICKS.value)
async def cmd_counter_picks(message: Message, state: FSMContext):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –æ–±—Ä–∞–≤ –ö–æ–Ω—Ç—Ä-–ø—ñ–∫–∏")
    await state.set_state(MenuStates.COUNTER_PICKS_MENU)
    await message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∫–æ–Ω—Ç—Ä-–ø—ñ–∫—ñ–≤:",
        reply_markup=get_counter_picks_menu(),
    )
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(
        "–û—Å—å –≤–∞—à—ñ —ñ–Ω–ª–∞–π–Ω-–æ–ø—Ü—ñ—ó:",
        reply_markup=get_generic_inline_keyboard()
    )

@router.message(MenuStates.NAVIGATION_MENU, F.text == MenuButton.BUILDS.value)
async def cmd_builds(message: Message, state: FSMContext):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –æ–±—Ä–∞–≤ –ë—ñ–ª–¥–∏")
    await state.set_state(MenuStates.BUILDS_MENU)
    await message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –±—ñ–ª–¥—ñ–≤:",
        reply_markup=get_builds_menu(),
    )
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(
        "–û—Å—å –≤–∞—à—ñ —ñ–Ω–ª–∞–π–Ω-–æ–ø—Ü—ñ—ó:",
        reply_markup=get_generic_inline_keyboard()
    )

@router.message(MenuStates.NAVIGATION_MENU, F.text == MenuButton.VOTING.value)
async def cmd_voting(message: Message, state: FSMContext):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –æ–±—Ä–∞–≤ –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è")
    await state.set_state(MenuStates.VOTING_MENU)
    await message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è:",
        reply_markup=get_voting_menu(),
    )
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(
        "–û—Å—å –≤–∞—à—ñ —ñ–Ω–ª–∞–π–Ω-–æ–ø—Ü—ñ—ó:",
        reply_markup=get_generic_inline_keyboard()
    )

@router.message(MenuStates.NAVIGATION_MENU, F.text == MenuButton.BACK.value)
async def cmd_back_to_main_menu_from_navigation(message: Message, state: FSMContext):
    await state.set_state(MenuStates.MAIN_MENU)
    await message.answer(
        "üîô –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ì–æ–ª–æ–≤–Ω–æ–≥–æ –ú–µ–Ω—é:",
        reply_markup=get_main_menu(),
    )
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(
        "–û—Å—å –≤–∞—à—ñ —ñ–Ω–ª–∞–π–Ω-–æ–ø—Ü—ñ—ó:",
        reply_markup=get_generic_inline_keyboard()
    )

# –†–æ–∑–¥—ñ–ª "üõ°Ô∏è –ì–µ—Ä–æ—ó"
@router.message(MenuStates.HEROES_MENU, F.text.in_([
    MenuButton.SEARCH_HERO.value,
    MenuButton.TANK.value,
    MenuButton.MAGE.value,
    MenuButton.MARKSMAN.value,
    MenuButton.ASSASSIN.value,
    MenuButton.SUPPORT.value,
    MenuButton.FIGHTER.value,
    MenuButton.COMPARISON.value
]))
async def cmd_hero_class(message: Message, state: FSMContext):
    hero_class = menu_button_to_class.get(message.text)
    if hero_class:
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –æ–±—Ä–∞–≤ –∫–ª–∞—Å {hero_class}")
        await state.set_state(MenuStates.HERO_CLASS_MENU)
        await state.update_data(hero_class=hero_class)  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–ª–∞—Å –≥–µ—Ä–æ—è –≤ —Å—Ç–∞–Ω—ñ
        await message.answer(
            f"–í–∏–±–µ—Ä—ñ—Ç—å –≥–µ—Ä–æ—è –∑ –∫–ª–∞—Å—É {hero_class}:",
            reply_markup=get_hero_class_menu(hero_class)
        )
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
        await message.answer(
            "–û—Å—å –≤–∞—à—ñ —ñ–Ω–ª–∞–π–Ω-–æ–ø—Ü—ñ—ó:",
            reply_markup=get_generic_inline_keyboard()
        )
    else:
        logger.warning(f"–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–ª–∞—Å –≥–µ—Ä–æ—ó–≤: {message.text}")
        await message.answer(
            "‚ùó –í–∏–±–∞—á—Ç–µ, —è –Ω–µ —Ä–æ–∑—É–º—ñ—é —Ü—é –∫–æ–º–∞–Ω–¥—É. –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –º–µ–Ω—é –Ω–∏–∂—á–µ.",
            reply_markup=get_heroes_menu(),
        )

@router.message(MenuStates.HEROES_MENU, F.text == MenuButton.BACK.value)
async def cmd_back_to_navigation_from_heroes(message: Message, state: FSMContext):
    await state.set_state(MenuStates.NAVIGATION_MENU)
    await message.answer(
        "üîô –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é –ù–∞–≤—ñ–≥–∞—Ü—ñ—è:",
        reply_markup=get_navigation_menu(),
    )
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(
        "–û—Å—å –≤–∞—à—ñ —ñ–Ω–ª–∞–π–Ω-–æ–ø—Ü—ñ—ó:",
        reply_markup=get_generic_inline_keyboard()
    )

@router.message(MenuStates.HEROES_MENU, F.text == MenuButton.SEARCH_HERO.value)
async def cmd_search_hero(message: Message, state: FSMContext):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –æ–±—Ä–∞–≤ –ü–æ—à—É–∫ –ì–µ—Ä–æ—è")
    await message.answer(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–º'—è –≥–µ—Ä–æ—è –¥–ª—è –ø–æ—à—É–∫—É:",
    )
    # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Å—Ç–∞–Ω –¥–ª—è –ø–æ—à—É–∫—É –≥–µ—Ä–æ—è
    # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π —Å—Ç–∞–Ω, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, SEARCHING_HERO
    # —ñ –æ–±—Ä–æ–±–∏—Ç–∏ –≤–≤–µ–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç —É –æ–∫—Ä–µ–º–æ–º—É –æ–±—Ä–æ–±–Ω–∏–∫—É

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –≥–µ—Ä–æ—è –∑ –∫–ª–∞—Å—É
all_heroes = set()
for heroes in heroes_by_class.values():
    all_heroes.update(heroes)

@router.message(MenuStates.HERO_CLASS_MENU, F.text.in_(all_heroes))
async def cmd_select_hero(message: Message, state: FSMContext):
    hero_name = message.text
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –æ–±—Ä–∞–≤ –≥–µ—Ä–æ—è {hero_name}")
    await state.set_state(MenuStates.MAIN_MENU)
    await message.answer(
        f"–í–∏ –æ–±—Ä–∞–ª–∏ –≥–µ—Ä–æ—è {hero_name}. –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≥–µ—Ä–æ—è –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –ø—ñ–∑–Ω—ñ—à–µ.",
        reply_markup=get_main_menu(),
    )
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(
        "–û—Å—å –≤–∞—à—ñ —ñ–Ω–ª–∞–π–Ω-–æ–ø—Ü—ñ—ó:",
        reply_markup=get_generic_inline_keyboard()
    )

@router.message(MenuStates.HERO_CLASS_MENU, F.text == MenuButton.BACK_TO_PROFILE.value)
async def cmd_back_to_profile_from_hero_class(message: Message, state: FSMContext):
    await state.set_state(MenuStates.PROFILE_MENU)
    await message.answer(
        "üîô –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ü—Ä–æ—Ñ—ñ–ª—é:",
        reply_markup=get_profile_menu(),
    )
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(
        "–û—Å—å –≤–∞—à—ñ —ñ–Ω–ª–∞–π–Ω-–æ–ø—Ü—ñ—ó:",
        reply_markup=get_generic_inline_keyboard()
    )

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
@router.callback_query(F.data == "button1")
async def handle_button1(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–í–∏ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏ –Ω–∞ –ö–Ω–æ–ø–∫—É 1")
    await call.answer()

@router.callback_query(F.data == "button2")
async def handle_button2(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–í–∏ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏ –Ω–∞ –ö–Ω–æ–ø–∫—É 2")
    await call.answer()

# –ü—Ä–∏–∫–ª–∞–¥–∏ –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –¥–ª—è –Ω–æ–≤–∏—Ö –∫–Ω–æ–ø–æ–∫
# –ü—Ä–∏–∫–ª–∞–¥ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "‚úèÔ∏è –í—ñ–¥–≥—É–∫"
@router.message(MenuStates.FEEDBACK_MENU, F.text == MenuButton.SEND_FEEDBACK.value)
async def cmd_send_feedback(message: Message, state: FSMContext):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –æ–±—Ä–∞–≤ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –í—ñ–¥–≥—É–∫")
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –≤—ñ–¥–≥—É–∫:")
    # –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –Ω–æ–≤–∏–π —Å—Ç–∞–Ω, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    # await state.set_state(MenuStates.SENDING_FEEDBACK)

# –ü—Ä–∏–∫–ª–∞–¥ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üêõ –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ë–∞–≥"
@router.message(MenuStates.FEEDBACK_MENU, F.text == MenuButton.REPORT_BUG.value)
async def cmd_report_bug(message: Message, state: FSMContext):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –æ–±—Ä–∞–≤ –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ë–∞–≥")
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à—ñ—Ç—å –∑–Ω–∞–π–¥–µ–Ω–∏–π –±–∞–≥:")
    # –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –Ω–æ–≤–∏–π —Å—Ç–∞–Ω, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    # await state.set_state(MenuStates.REPORTING_BUG)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@router.message()
async def unknown_command(message: Message, state: FSMContext):
    logger.warning(f"–ù–µ–≤—ñ–¥–æ–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {message.from_user.id}: {message.text}")
    current_state = await state.get_state()
    if current_state == MenuStates.MAIN_MENU.state:
        reply_markup = get_main_menu()
    elif current_state == MenuStates.NAVIGATION_MENU.state:
        reply_markup = get_navigation_menu()
    elif current_state == MenuStates.HEROES_MENU.state:
        reply_markup = get_heroes_menu()
    elif current_state == MenuStates.HERO_CLASS_MENU.state:
        data = await state.get_data()
        hero_class = data.get('hero_class', '–¢–∞–Ω–∫')
        reply_markup = get_hero_class_menu(hero_class)
    elif current_state == MenuStates.PROFILE_MENU.state:
        reply_markup = get_profile_menu()
    else:
        reply_markup = get_main_menu()
        await state.set_state(MenuStates.MAIN_MENU)
    await message.answer(
        "‚ùó –í–∏–±–∞—á—Ç–µ, —è –Ω–µ —Ä–æ–∑—É–º—ñ—é —Ü—é –∫–æ–º–∞–Ω–¥—É. –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –º–µ–Ω—é –Ω–∏–∂—á–µ.",
        reply_markup=reply_markup,
    )

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
def setup_handlers(dp):
    dp.include_router(router)
