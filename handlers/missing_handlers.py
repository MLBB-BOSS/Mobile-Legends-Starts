import logging
from aiogram import Router, F, Bot
from aiogram.types import Message, ReplyKeyboardRemove, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from typing import Optional
from datetime import datetime

from states import MenuStates
from utils.state_utils import increment_step
from keyboards.menus import (
    MenuButton,
    get_generic_inline_keyboard,
    get_navigation_menu,
    get_challenges_menu,
    get_guides_menu,
    get_bust_menu,
    get_teams_menu,
    get_trading_menu,
    get_settings_menu,
    get_help_menu,
    get_my_team_menu,
    get_language_menu,
    get_profile_menu,
    get_main_menu
)
from texts import (
    MAIN_MENU_ERROR_TEXT, UNKNOWN_COMMAND_TEXT, GENERIC_ERROR_MESSAGE_TEXT,
    CHALLENGES_TEXT, GUIDES_TEXT, BUST_TEXT, TEAMS_TEXT, TRADING_TEXT,
    NEW_GUIDES_TEXT, M6_TEXT, POPULAR_GUIDES_TEXT, BEGINNER_GUIDES_TEXT,
    ADVANCED_TECHNIQUES_TEXT, TEAMPLAY_GUIDES_TEXT,
    LANGUAGE_SELECTION_TEXT, UPDATE_ID_SUCCESS_TEXT, NOTIFICATIONS_SETTINGS_TEXT,
    INSTRUCTIONS_TEXT, FAQ_TEXT, HELP_SUPPORT_TEXT,
    MY_TEAM_TEXT
)
from handlers.base import safe_delete_message, check_and_edit_message

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–æ–≥–æ –º–µ–Ω—é
NAVIGATION_MENU_TEXT = """
üß≠ –ù–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–µ –º–µ–Ω—é

–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É:
- Challenges - –≤–∏–ø—Ä–æ–±—É–≤–∞–Ω–Ω—è —Ç–∞ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
- Guides - –∫–æ—Ä–∏—Å–Ω—ñ –≥–∞–π–¥–∏ —Ç–∞ –ø–æ—Ä–∞–¥–∏
- Bust - –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è
- Teams - —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∞–º–∏
- Trading - —Ç–æ—Ä–≥—ñ–≤–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
"""

NAVIGATION_INTERACTIVE_TEXT = """
üì± –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –ø–æ –±–æ—Ç—É

–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –º—ñ–∂ —Ä–æ–∑–¥—ñ–ª–∞–º–∏.
–ü–æ—Ç–æ—á–Ω–∏–π —Ä–æ–∑–¥—ñ–ª: –ù–∞–≤—ñ–≥–∞—Ü—ñ—è
"""

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ–ø–æ–º—ñ–∂–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
async def update_interactive_screen(
    bot: Bot,
    chat_id: int,
    message_id: int,
    text: str,
    keyboard: Optional[InlineKeyboardMarkup] = None
) -> bool:
    """–ë–µ–∑–ø–µ—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –µ–∫—Ä–∞–Ω—É"""
    try:
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            reply_markup=keyboard or get_generic_inline_keyboard()
        )
        return True
    except Exception as e:
        logger.error(f"Failed to update interactive screen: {e}")
        return False

async def verify_state_data(state: FSMContext) -> tuple[bool, dict]:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö —É —Å—Ç–∞–Ω—ñ"""
    data = await state.get_data()
    required_fields = ['bot_message_id', 'interactive_message_id']
    
    missing_fields = [field for field in required_fields if field not in data]
    
    if missing_fields:
        logger.error(f"Missing required state fields: {missing_fields}")
        return False, data
        
    return True, data

# –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –º—ñ–∂ —Å—Ç–∞–Ω–∞–º–∏
async def transition_state(state: FSMContext, new_state: MenuStates):
    await state.set_state(new_state)

# 1. –û—Å–Ω–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(F.text == "üß≠ –ù–∞–≤—ñ–≥–∞—Ü—ñ—è", MenuStates.MAIN_MENU)
async def handle_navigation_transition(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} navigating to Navigation Menu")
    
    try:
        # 1. –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await safe_delete_message(bot, message.chat.id, message.message_id)
        
        # 2. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–∞–Ω—É
        data = await state.get_data()
        old_message_id = data.get('bot_message_id')
        interactive_message_id = data.get('interactive_message_id')
        
        # 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö ID
        if not interactive_message_id:
            logger.error(f"Interactive message ID not found for user {message.from_user.id}")
            await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            return
            
        # 4. –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ "–ø—É–ª—å—Ç–∞"
        if old_message_id:
            await safe_delete_message(bot, message.chat.id, old_message_id)
        
        # 5. –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ "–ø—É–ª—å—Ç–∞"
        new_message = await bot.send_message(
            chat_id=message.chat.id,
            text=NAVIGATION_MENU_TEXT,
            reply_markup=get_navigation_menu()
        )
        
        # 6. –û–Ω–æ–≤–ª–µ–Ω–Ω—è "–µ–∫—Ä–∞–Ω—É"
        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=interactive_message_id,
            text=NAVIGATION_INTERACTIVE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        
        # 7. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É –∑ —É—Å—ñ–º–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
        await state.update_data(
            bot_message_id=new_message.message_id,
            last_text=NAVIGATION_MENU_TEXT,
            last_keyboard=get_navigation_menu(),
            last_state=MenuStates.NAVIGATION_MENU.state,
            last_update=datetime.now().isoformat()
        )
        
        # 8. –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É
        await state.set_state(MenuStates.NAVIGATION_MENU)
        
    except Exception as e:
        logger.error(f"Navigation transition failed: {e}")
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )

# 2. –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "Back" –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(F.text == MenuButton.BACK.value, MenuStates.NAVIGATION_MENU)
async def handle_navigation_back(message: Message, state: FSMContext, bot: Bot):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–æ–≥–æ –º–µ–Ω—é –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    logger.info(f"User {message.from_user.id} returning from Navigation Menu")
    
    try:
        # –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await safe_delete_message(bot, message.chat.id, message.message_id)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö —Å—Ç–∞–Ω—É
        is_valid, data = await verify_state_data(state)
        if not is_valid:
            await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            return
            
        # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        old_message_id = data['bot_message_id']
        await safe_delete_message(bot, message.chat.id, old_message_id)
        
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        new_message = await bot.send_message(
            chat_id=message.chat.id,
            text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
            reply_markup=get_main_menu()
        )
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–∫—Ä–∞–Ω—É
        await update_interactive_screen(
            bot=bot,
            chat_id=message.chat.id,
            message_id=data['interactive_message_id'],
            text="–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é!"
        )
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
        await state.update_data(
            bot_message_id=new_message.message_id,
            last_text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
            last_keyboard=get_main_menu()
        )
        await state.set_state(MenuStates.MAIN_MENU)
        
    except Exception as e:
        logger.error(f"Navigation back transition failed: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )

# 3. –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ç–∞ —ó—Ö–Ω—ñ—Ö –ø—ñ–¥–º–µ–Ω—é

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Challenges"
@router.message(F.text == MenuButton.CHALLENGES.value, MenuStates.MAIN_MENU)
async def handle_challenges(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected Challenges")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ —Å—Ç–∞–Ω—É
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            main_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=main_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"Failed to send main menu error message: {e}")
        return

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –º–µ–Ω—é –ß–µ–ª–µ–Ω–¥–∂—ñ–≤
    try:
        challenges_message = await bot.send_message(
            chat_id=message.chat.id,
            text=CHALLENGES_TEXT,
            reply_markup=get_challenges_menu()
        )
        new_bot_message_id = challenges_message.message_id
    except Exception as e:
        logger.error(f"Failed to send Challenges menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        return

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –†–µ–¥–∞–≥—É—î–º–æ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text="–ß–µ–ª–µ–Ω–¥–∂—ñ –º–µ–Ω—é",
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, MenuStates.CHALLENGES_MENU)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –º–µ–Ω—é "Challenges Menu"
@router.message(MenuStates.CHALLENGES_MENU)
async def handle_challenges_menu_buttons(message: Message, state: FSMContext, bot: Bot):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected {user_choice} in Challenges Menu")

    await safe_delete_message(bot, message.chat.id, message.message_id)

    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            error_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=error_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"Failed to send main menu error message: {e}")
        return

    new_main_text = ""
    new_main_keyboard = get_challenges_menu()
    new_interactive_text = "–ß–µ–ª–µ–Ω–¥–∂—ñ –º–µ–Ω—é"
    new_state = MenuStates.CHALLENGES_MENU

    if user_choice == "‚ûï –î–æ–¥–∞—Ç–∏ –ß–µ–ª–µ–Ω–¥–∂":
        new_main_text = "–§—É–Ω–∫—Ü—ñ—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —á–µ–ª–µ–Ω–¥–∂—ñ–≤ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
        new_main_keyboard = get_main_menu()
        new_interactive_text = "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é"
        new_state = MenuStates.MAIN_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_challenges_menu()

    try:
        main_message = await bot.send_message(
            chat_id=message.chat.id,
            text=new_main_text,
            reply_markup=new_main_keyboard
        )
        new_bot_message_id = main_message.message_id
    except Exception as e:
        logger.error(f"Failed to send new Challenges menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        return

    await safe_delete_message(bot, message.chat.id, bot_message_id)

    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text=new_interactive_text,
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Guides"
@router.message(F.text == MenuButton.GUIDES.value, MenuStates.MAIN_MENU)
async def handle_guides(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected Guides")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ —Å—Ç–∞–Ω—É
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            main_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=main_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"Failed to send main menu error message: {e}")
        return

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –º–µ–Ω—é –ì–∞–π–¥—ñ–≤
    try:
        guides_message = await bot.send_message(
            chat_id=message.chat.id,
            text=GUIDES_TEXT,
            reply_markup=get_guides_menu()
        )
        new_bot_message_id = guides_message.message_id
    except Exception as e:
        logger.error(f"Failed to send Guides menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        return

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –†–µ–¥–∞–≥—É—î–º–æ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text="–ú–µ–Ω—é –ì–∞–π–¥—ñ–≤",
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, MenuStates.GUIDES_MENU)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –º–µ–Ω—é "Guides Menu"
@router.message(MenuStates.GUIDES_MENU)
async def handle_guides_menu_buttons(message: Message, state: FSMContext, bot: Bot):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected {user_choice} in Guides Menu")

    await safe_delete_message(bot, message.chat.id, message.message_id)

    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            error_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=error_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"Failed to send main menu error message: {e}")
        return

    new_main_text = ""
    new_main_keyboard = get_guides_menu()
    new_interactive_text = "–ú–µ–Ω—é –ì–∞–π–¥—ñ–≤"
    new_state = MenuStates.GUIDES_MENU

    if user_choice == MenuButton.NEW_GUIDES.value:
        new_main_text = NEW_GUIDES_TEXT
    elif user_choice == MenuButton.POPULAR_GUIDES.value:
        new_main_text = POPULAR_GUIDES_TEXT
    elif user_choice == MenuButton.BEGINNER_GUIDES.value:
        new_main_text = BEGINNER_GUIDES_TEXT
    elif user_choice == MenuButton.ADVANCED_TECHNIQUES.value:
        new_main_text = ADVANCED_TECHNIQUES_TEXT
    elif user_choice == MenuButton.TEAMPLAY_GUIDES.value:
        new_main_text = TEAMPLAY_GUIDES_TEXT
    elif user_choice == MenuButton.M6.value:
        new_main_text = M6_TEXT
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
        new_main_keyboard = get_main_menu()
        new_interactive_text = "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é"
        new_state = MenuStates.MAIN_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_guides_menu()

    try:
        main_message = await bot.send_message(
            chat_id=message.chat.id,
            text=new_main_text,
            reply_markup=new_main_keyboard
        )
        new_bot_message_id = main_message.message_id
    except Exception as e:
        logger.error(f"Failed to send new Guides menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        return

    await safe_delete_message(bot, message.chat.id, bot_message_id)

    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text=new_interactive_text,
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Bust"
@router.message(F.text == MenuButton.BUST.value, MenuStates.MAIN_MENU)
async def handle_bust(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected Bust")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ —Å—Ç–∞–Ω—É
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            main_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=main_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"Failed to send main menu error message: {e}")
        return

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –º–µ–Ω—é Bust
    try:
        bust_message = await bot.send_message(
            chat_id=message.chat.id,
            text=BUST_TEXT,
            reply_markup=get_bust_menu()
        )
        new_bot_message_id = bust_message.message_id
    except Exception as e:
        logger.error(f"Failed to send Bust menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        return

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –†–µ–¥–∞–≥—É—î–º–æ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text="–ú–µ–Ω—é Bust",
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, MenuStates.BUST_MENU)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –º–µ–Ω—é "Bust Menu"
@router.message(MenuStates.BUST_MENU)
async def handle_bust_menu_buttons(message: Message, state: FSMContext, bot: Bot):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected {user_choice} in Bust Menu")

    await safe_delete_message(bot, message.chat.id, message.message_id)

    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            error_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=error_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"Failed to send main menu error message: {e}")
        return

    new_main_text = ""
    new_main_keyboard = get_bust_menu()
    new_interactive_text = "–ú–µ–Ω—é Bust"
    new_state = MenuStates.BUST_MENU

    if user_choice == "üî• –ü—ñ–¥–≤–∏—â–∏—Ç–∏ –ë—É—Å—Ç":
        new_main_text = "–§—É–Ω–∫—Ü—ñ—è –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –±—É—Å—Ç–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
        new_main_keyboard = get_main_menu()
        new_interactive_text = "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é"
        new_state = MenuStates.MAIN_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_bust_menu()

    try:
        main_message = await bot.send_message(
            chat_id=message.chat.id,
            text=new_main_text,
            reply_markup=new_main_keyboard
        )
        new_bot_message_id = main_message.message_id
    except Exception as e:
        logger.error(f"Failed to send new Bust menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        return

    await safe_delete_message(bot, message.chat.id, bot_message_id)

    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text=new_interactive_text,
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Teams"
@router.message(F.text == MenuButton.TEAMS.value, MenuStates.MAIN_MENU)
async def handle_teams(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected Teams")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ —Å—Ç–∞–Ω—É
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            main_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=main_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"Failed to send main menu error message: {e}")
        return

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –º–µ–Ω—é Teams
    try:
        teams_message = await bot.send_message(
            chat_id=message.chat.id,
            text=TEAMS_TEXT,
            reply_markup=get_teams_menu()
        )
        new_bot_message_id = teams_message.message_id
    except Exception as e:
        logger.error(f"Failed to send Teams menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        return

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –†–µ–¥–∞–≥—É—î–º–æ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text="–ú–µ–Ω—é Teams",
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, MenuStates.TEAMS_MENU)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –º–µ–Ω—é "Teams Menu"
@router.message(MenuStates.TEAMS_MENU)
async def handle_teams_menu_buttons(message: Message, state: FSMContext, bot: Bot):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected {user_choice} in Teams Menu")

    await safe_delete_message(bot, message.chat.id, message.message_id)

    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            error_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=error_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"Failed to send main menu error message: {e}")
        return

    new_main_text = ""
    new_main_keyboard = get_teams_menu()
    new_interactive_text = "–ú–µ–Ω—é Teams"
    new_state = MenuStates.TEAMS_MENU

    if user_choice == MenuButton.CREATE_TEAM.value:
        new_main_text = "–§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
    elif user_choice == MenuButton.VIEW_TEAMS.value:
        new_main_text = "–§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–æ–º–∞–Ω–¥ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
        new_main_keyboard = get_main_menu()
        new_interactive_text = "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é"
        new_state = MenuStates.MAIN_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_teams_menu()

    try:
        main_message = await bot.send_message(
            chat_id=message.chat.id,
            text=new_main_text,
            reply_markup=new_main_keyboard
        )
        new_bot_message_id = main_message.message_id
    except Exception as e:
        logger.error(f"Failed to send new Teams menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        return

    await safe_delete_message(bot, message.chat.id, bot_message_id)

    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text=new_interactive_text,
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Trading"
@router.message(F.text == MenuButton.TRADING.value, MenuStates.MAIN_MENU)
async def handle_trading(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected Trading")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ —Å—Ç–∞–Ω—É
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            main_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=main_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"Failed to send main menu error message: {e}")
        return

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –º–µ–Ω—é Trading
    try:
        trading_message = await bot.send_message(
            chat_id=message.chat.id,
            text=TRADING_TEXT,
            reply_markup=get_trading_menu()
        )
        new_bot_message_id = trading_message.message_id
    except Exception as e:
        logger.error(f"Failed to send Trading menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        return

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –†–µ–¥–∞–≥—É—î–º–æ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text="–ú–µ–Ω—é Trading",
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, MenuStates.TRADING_MENU)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –º–µ–Ω—é "Trading Menu"
@router.message(MenuStates.TRADING_MENU)
async def handle_trading_menu_buttons(message: Message, state: FSMContext, bot: Bot):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected {user_choice} in Trading Menu")

    await safe_delete_message(bot, message.chat.id, message.message_id)

    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            error_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=error_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"Failed to send main menu error message: {e}")
        return

    new_main_text = ""
    new_main_keyboard = get_trading_menu()
    new_interactive_text = "–ú–µ–Ω—é Trading"
    new_state = MenuStates.TRADING_MENU

    if user_choice == MenuButton.CREATE_TRADE.value:
        new_main_text = "–§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ!"
    elif user_choice == MenuButton.VIEW_TRADES.value:
        new_main_text = "–û—Å—å –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç–æ—Ä–≥—ñ–≤–ª—ñ:"
    elif user_choice == MenuButton.MANAGE_TRADES.value:
        new_main_text = "–§—É–Ω–∫—Ü—ñ—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–æ—Ä–≥—ñ–≤–ª—è–º–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ!"
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
        new_main_keyboard = get_main_menu()
        new_interactive_text = "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é"
        new_state = MenuStates.MAIN_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_trading_menu()

    try:
        main_message = await bot.send_message(
            chat_id=message.chat.id,
            text=new_main_text,
            reply_markup=new_main_keyboard
        )
        new_bot_message_id = main_message.message_id
    except Exception as e:
        logger.error(f"Failed to send new Trading menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        return

    await safe_delete_message(bot, message.chat.id, bot_message_id)

    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text=new_interactive_text,
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Settings"
@router.message(F.text == MenuButton.SETTINGS.value, MenuStates.MAIN_MENU)
async def handle_settings(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected Settings")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ —Å—Ç–∞–Ω—É
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            main_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=main_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"Failed to send main menu error message: {e}")
        return

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –º–µ–Ω—é Settings
    try:
        settings_message = await bot.send_message(
            chat_id=message.chat.id,
            text="‚öôÔ∏è Settings",
            reply_markup=get_settings_menu()
        )
        new_bot_message_id = settings_message.message_id
    except Exception as e:
        logger.error(f"Failed to send Settings menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        return

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –†–µ–¥–∞–≥—É—î–º–æ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text="‚öôÔ∏è Settings Menu",
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, MenuStates.SETTINGS_SUBMENU)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –º–µ–Ω—é "Settings Submenu"
@router.message(MenuStates.SETTINGS_SUBMENU)
async def handle_settings_menu_buttons(message: Message, state: FSMContext, bot: Bot):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected {user_choice} in Settings Menu")

    await safe_delete_message(bot, message.chat.id, message.message_id)

    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            error_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=error_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"Failed to send main menu error message: {e}")
        return

    new_main_text = ""
    new_main_keyboard = get_settings_menu()
    new_interactive_text = "‚öôÔ∏è Settings Menu"
    new_state = MenuStates.SETTINGS_SUBMENU

    if user_choice == MenuButton.LANGUAGE.value:
        new_main_text = LANGUAGE_SELECTION_TEXT
        new_main_keyboard = get_language_menu()
        new_state = MenuStates.SELECT_LANGUAGE
    elif user_choice == MenuButton.CHANGE_USERNAME.value:
        new_main_text = "‚ÑπÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π Username:"
        new_main_keyboard = ReplyKeyboardRemove()
        await increment_step(state)
        await state.set_state(MenuStates.CHANGE_USERNAME)
        try:
            await bot.send_message(chat_id=message.chat.id, text=new_main_text, reply_markup=new_main_keyboard)
        except Exception as e:
            logger.error(f"Failed to send Change Username prompt: {e}")
        return
    elif user_choice == MenuButton.UPDATE_ID.value:
        new_main_text = UPDATE_ID_SUCCESS_TEXT
    elif user_choice == MenuButton.NOTIFICATIONS.value:
        new_main_text = NOTIFICATIONS_SETTINGS_TEXT
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "ü™™ My Profile"
        new_main_keyboard = get_profile_menu()
        new_interactive_text = "ü™™ My Profile Menu"
        new_state = MenuStates.PROFILE_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_settings_menu()

    try:
        main_message = await bot.send_message(
            chat_id=message.chat.id,
            text=new_main_text,
            reply_markup=new_main_keyboard
        )
        new_bot_message_id = main_message.message_id
    except Exception as e:
        logger.error(f"Failed to send new Settings menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        return

    await safe_delete_message(bot, message.chat.id, bot_message_id)

    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text=new_interactive_text,
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏
@router.message(MenuStates.SELECT_LANGUAGE)
async def handle_select_language(message: Message, state: FSMContext, bot: Bot):
    selected_language = message.text
    logger.info(f"User {message.from_user.id} selected language: {selected_language}")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –¢—É—Ç —Ä–µ–∞–ª—ñ–∑—É–π—Ç–µ –ª–æ–≥—ñ–∫—É –∑–º—ñ–Ω–∏ –º–æ–≤–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø—Ä–∞–≤–∏–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:
    try:
        response_text = f"–Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {selected_language}."
        await bot.send_message(
            chat_id=message.chat.id,
            text=response_text,
            reply_markup=get_generic_inline_keyboard()
        )
    except Exception as e:
        logger.error(f"Failed to send language change confirmation: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –º–µ–Ω—é Settings Submenu
    try:
        settings_message = await bot.send_message(
            chat_id=message.chat.id,
            text="‚öôÔ∏è Settings",
            reply_markup=get_settings_menu()
        )
        await state.update_data(bot_message_id=settings_message.message_id)
        await increment_step(state)
        await transition_state(state, MenuStates.SETTINGS_SUBMENU)
    except Exception as e:
        logger.error(f"Failed to send Settings menu after language change: {e}")

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∑–º—ñ–Ω–∏ —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@router.message(MenuStates.CHANGE_USERNAME)
async def handle_change_username(message: Message, state: FSMContext, bot: Bot):
    current_state = await state.get_state()
    if current_state != MenuStates.CHANGE_USERNAME.state:
        return

    new_username = message.text.strip()
    logger.info(f"User {message.from_user.id} is changing username to: {new_username}")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –¢—É—Ç —Ä–µ–∞–ª—ñ–∑—É–π—Ç–µ –ª–æ–≥—ñ–∫—É –∑–º—ñ–Ω–∏ —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø—Ä–∞–≤–∏–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:
    try:
        response_text = f"Username –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {new_username}."
        await bot.send_message(
            chat_id=message.chat.id,
            text=response_text,
            reply_markup=get_generic_inline_keyboard()
        )
    except Exception as e:
        logger.error(f"Failed to send username change confirmation: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –º–µ–Ω—é Settings Submenu
    try:
        settings_message = await bot.send_message(
            chat_id=message.chat.id,
            text="‚öôÔ∏è Settings",
            reply_markup=get_settings_menu()
        )
        await state.update_data(bot_message_id=settings_message.message_id)
        await increment_step(state)
        await transition_state(state, MenuStates.SETTINGS_SUBMENU)
    except Exception as e:
        logger.error(f"Failed to send Settings menu after changing username: {e}")

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Help"
@router.message(F.text == MenuButton.HELP.value, MenuStates.MAIN_MENU)
async def handle_help(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected Help")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ —Å—Ç–∞–Ω—É
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            main_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=main_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"Failed to send main menu error message: {e}")
        return

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –º–µ–Ω—é Help
    try:
        help_message = await bot.send_message(
            chat_id=message.chat.id,
            text="‚ùì Help",
            reply_markup=get_help_menu()
        )
        new_bot_message_id = help_message.message_id
    except Exception as e:
        logger.error(f"Failed to send Help menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        return

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –†–µ–¥–∞–≥—É—î–º–æ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text="‚ùì Help Menu",
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, MenuStates.HELP_SUBMENU)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –º–µ–Ω—é "Help Submenu"
@router.message(MenuStates.HELP_SUBMENU)
async def handle_help_menu_buttons(message: Message, state: FSMContext, bot: Bot):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected {user_choice} in Help Menu")

    await safe_delete_message(bot, message.chat.id, message.message_id)

    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            error_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=error_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"Failed to send main menu error message: {e}")
        return

    new_main_text = ""
    new_main_keyboard = get_help_menu()
    new_interactive_text = "‚ùì Help Menu"
    new_state = MenuStates.HELP_SUBMENU

    if user_choice == MenuButton.INSTRUCTIONS.value:
        new_main_text = INSTRUCTIONS_TEXT
    elif user_choice == MenuButton.FAQ.value:
        new_main_text = FAQ_TEXT
    elif user_choice == MenuButton.HELP_SUPPORT.value:
        new_main_text = HELP_SUPPORT_TEXT
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "ü™™ My Profile"
        new_main_keyboard = get_profile_menu()
        new_interactive_text = "ü™™ My Profile Menu"
        new_state = MenuStates.PROFILE_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_help_menu()

    try:
        main_message = await bot.send_message(
            chat_id=message.chat.id,
            text=new_main_text,
            reply_markup=new_main_keyboard
        )
        new_bot_message_id = main_message.message_id
    except Exception as e:
        logger.error(f"Failed to send new Help menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        return

    await safe_delete_message(bot, message.chat.id, bot_message_id)

    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text=new_interactive_text,
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "My Team"
@router.message(F.text == MenuButton.MY_TEAM.value, MenuStates.MAIN_MENU)
async def handle_my_team(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected My Team")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ —Å—Ç–∞–Ω—É
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            main_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=main_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"Failed to send main menu error message: {e}")
        return

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –º–µ–Ω—é My Team
    try:
        my_team_message = await bot.send_message(
            chat_id=message.chat.id,
            text=MY_TEAM_TEXT,
            reply_markup=get_my_team_menu()
        )
        new_bot_message_id = my_team_message.message_id
    except Exception as e:
        logger.error(f"Failed to send My Team menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        return

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –†–µ–¥–∞–≥—É—î–º–æ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text="ü™™ My Team Menu",
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, MenuStates.MY_TEAM_MENU)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –º–µ–Ω—é "My Team Menu"
@router.message(MenuStates.MY_TEAM_MENU)
async def handle_my_team_menu_buttons(message: Message, state: FSMContext, bot: Bot):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected {user_choice} in My Team Menu")

    await safe_delete_message(bot, message.chat.id, message.message_id)

    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            error_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=error_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"Failed to send main menu error message: {e}")
        return

    new_main_text = ""
    new_main_keyboard = get_my_team_menu()
    new_interactive_text = "ü™™ My Team Menu"
    new_state = MenuStates.MY_TEAM_MENU

    if user_choice == "‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ö–æ–º–∞–Ω–¥—É":
        new_main_text = "–§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
    elif user_choice == "üëÄ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ö–æ–º–∞–Ω–¥–∏":
        new_main_text = "–§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–æ–º–∞–Ω–¥ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
        new_main_keyboard = get_main_menu()
        new_interactive_text = "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é"
        new_state = MenuStates.MAIN_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_my_team_menu()

    try:
        main_message = await bot.send_message(
            chat_id=message.chat.id,
            text=new_main_text,
            reply_markup=new_main_keyboard
        )
        new_bot_message_id = main_message.message_id
    except Exception as e:
        logger.error(f"Failed to send new My Team menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        return

    await safe_delete_message(bot, message.chat.id, bot_message_id)

    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text=new_interactive_text,
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Advanced Techniques"
@router.message(F.text == MenuButton.ADVANCED_TECHNIQUES.value)
async def handle_advanced_techniques(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected Advanced Techniques")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    try:
        advanced_techniques_message = await bot.send_message(
            chat_id=message.chat.id,
            text=ADVANCED_TECHNIQUES_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        await state.update_data(bot_message_id=advanced_techniques_message.message_id)
        await increment_step(state)
        # –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –Ω–æ–≤–∏–π —Å—Ç–∞–Ω –∞–±–æ –∑–∞–ª–∏—à—Ç–µ —Ü–µ–π —è–∫ –∫—ñ–Ω—Ü–µ–≤–∏–π –ø—É–Ω–∫—Ç
    except Exception as e:
        logger.error(f"Failed to send Advanced Techniques info: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Instructions"
@router.message(F.text == MenuButton.INSTRUCTIONS.value)
async def handle_instructions(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected Instructions")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    try:
        instructions_message = await bot.send_message(
            chat_id=message.chat.id,
            text=INSTRUCTIONS_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        await state.update_data(bot_message_id=instructions_message.message_id)
        await increment_step(state)
    except Exception as e:
        logger.error(f"Failed to send Instructions: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "FAQ"
@router.message(F.text == MenuButton.FAQ.value)
async def handle_faq(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected FAQ")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    try:
        faq_message = await bot.send_message(
            chat_id=message.chat.id,
            text=FAQ_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        await state.update_data(bot_message_id=faq_message.message_id)
        await increment_step(state)
    except Exception as e:
        logger.error(f"Failed to send FAQ: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Help Support"
@router.message(F.text == MenuButton.HELP_SUPPORT.value)
async def handle_help_support(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected Help Support")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    try:
        help_support_message = await bot.send_message(
            chat_id=message.chat.id,
            text=HELP_SUPPORT_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        await state.update_data(bot_message_id=help_support_message.message_id)
        await increment_step(state)
    except Exception as e:
        logger.error(f"Failed to send Help Support: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Update ID"
@router.message(F.text == MenuButton.UPDATE_ID.value)
async def handle_update_id(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected Update ID")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –¢—É—Ç —Ä–µ–∞–ª—ñ–∑—É–π—Ç–µ –ª–æ–≥—ñ–∫—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è ID, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø—Ä–∞–≤–∏–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:
    try:
        response_text = UPDATE_ID_SUCCESS_TEXT
        await bot.send_message(
            chat_id=message.chat.id,
            text=response_text,
            reply_markup=get_generic_inline_keyboard()
        )
    except Exception as e:
        logger.error(f"Failed to send Update ID confirmation: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –º–µ–Ω—é Settings Submenu
    try:
        settings_message = await bot.send_message(
            chat_id=message.chat.id,
            text="‚öôÔ∏è Settings",
            reply_markup=get_settings_menu()
        )
        await state.update_data(bot_message_id=settings_message.message_id)
        await increment_step(state)
        await transition_state(state, MenuStates.SETTINGS_SUBMENU)
    except Exception as e:
        logger.error(f"Failed to send Settings menu after updating ID: {e}")

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Notifications"
@router.message(F.text == MenuButton.NOTIFICATIONS.value)
async def handle_notifications(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected Notifications")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    try:
        await bot.send_message(
            chat_id=message.chat.id,
            text=NOTIFICATIONS_SETTINGS_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
    except Exception as e:
        logger.error(f"Failed to send Notifications settings: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –º–µ–Ω—é Settings Submenu
    try:
        settings_message = await bot.send_message(
            chat_id=message.chat.id,
            text="‚öôÔ∏è Settings",
            reply_markup=get_settings_menu()
        )
        await state.update_data(bot_message_id=settings_message.message_id)
        await increment_step(state)
        await transition_state(state, MenuStates.SETTINGS_SUBMENU)
    except Exception as e:
        logger.error(f"Failed to send Settings menu after notifications: {e}")

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Language"
@router.message(F.text == MenuButton.LANGUAGE.value, MenuStates.SETTINGS_SUBMENU)
async def handle_language_selection(message: Message, state: FSMContext, bot: Bot):
    """–í—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–µ–Ω—é –≤–∏–±–æ—Ä—É –º–æ–≤–∏"""
    logger.info(f"User {message.from_user.id} is selecting language")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    try:
        await bot.send_message(
            chat_id=message.chat.id,
            text=LANGUAGE_SELECTION_TEXT,
            reply_markup=get_language_menu()
        )
        await transition_state(state, MenuStates.SELECT_LANGUAGE)
    except Exception as e:
        logger.error(f"Failed to send Language selection menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Help" –≤ —Ä—ñ–∑–Ω–∏—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞—Ö
@router.message(F.text == MenuButton.HELP.value)
async def handle_help_general(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected Help")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    try:
        help_message = await bot.send_message(
            chat_id=message.chat.id,
            text=HELP_SUPPORT_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        await state.update_data(bot_message_id=help_message.message_id)
        await increment_step(state)
    except Exception as e:
        logger.error(f"Failed to send Help message: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Profile" (—è–∫—â–æ —ñ—Å–Ω—É—î)
@router.message(F.text == MenuButton.PROFILE.value, MenuStates.MAIN_MENU)
async def handle_profile(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected Profile")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    try:
        profile_message = await bot.send_message(
            chat_id=message.chat.id,
            text="ü™™ My Profile",
            reply_markup=get_profile_menu()
        )
        await state.update_data(bot_message_id=profile_message.message_id)
        await transition_state(state, MenuStates.PROFILE_MENU)
    except Exception as e:
        logger.error(f"Failed to send Profile menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –º–µ–Ω—é "Profile Menu"
@router.message(MenuStates.PROFILE_MENU)
async def handle_profile_menu_buttons(message: Message, state: FSMContext, bot: Bot):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected {user_choice} in Profile Menu")

    await safe_delete_message(bot, message.chat.id, message.message_id)

    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            error_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=error_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"Failed to send main menu error message: {e}")
        return

    new_main_text = ""
    new_main_keyboard = get_profile_menu()
    new_interactive_text = "ü™™ My Profile Menu"
    new_state = MenuStates.PROFILE_MENU

    if user_choice == MenuButton.VIEW_PROFILE.value:
        new_main_text = "–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å: [–¥–µ—Ç–∞–ª—ñ –ø—Ä–æ—Ñ—ñ–ª—é —Ç—É—Ç]"
    elif user_choice == MenuButton.EDIT_PROFILE.value:
        new_main_text = "–§—É–Ω–∫—Ü—ñ—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
        new_main_keyboard = get_main_menu()
        new_interactive_text = "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é"
        new_state = MenuStates.MAIN_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_profile_menu()

    try:
        main_message = await bot.send_message(
            chat_id=message.chat.id,
            text=new_main_text,
            reply_markup=new_main_keyboard
        )
        new_bot_message_id = main_message.message_id
    except Exception as e:
        logger.error(f"Failed to send new Profile menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        return

    await safe_delete_message(bot, message.chat.id, bot_message_id)

    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text=new_interactive_text,
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Language" –≤ –º–µ–Ω—é "Settings Submenu"
@router.message(F.text == MenuButton.LANGUAGE.value, MenuStates.SETTINGS_SUBMENU)
async def handle_language_selection_menu(message: Message, state: FSMContext, bot: Bot):
    """–í—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–µ–Ω—é –≤–∏–±–æ—Ä—É –º–æ–≤–∏"""
    logger.info(f"User {message.from_user.id} is selecting language")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    try:
        await bot.send_message(
            chat_id=message.chat.id,
            text=LANGUAGE_SELECTION_TEXT,
            reply_markup=get_language_menu()
        )
        await transition_state(state, MenuStates.SELECT_LANGUAGE)
    except Exception as e:
        logger.error(f"Failed to send Language selection menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )

# –Ü–Ω—à—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –¥–æ–¥–∞–Ω—ñ –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –Ω–∏–∂—á–µ

# –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –≤—Å—ñ –Ω–æ–≤—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ñ–∞–π–ª—ñ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞, —è–∫—â–æ —Ü–µ —â–µ –Ω–µ –∑—Ä–æ–±–ª–µ–Ω–æ.