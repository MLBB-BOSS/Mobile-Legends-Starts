import logging
from aiogram import Router, F, Bot
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.filters import Command

from states import MenuStates, increment_step
from keyboards.menus import (
    MenuButton,
    get_generic_inline_keyboard,
    get_navigation_menu,
    get_challenges_menu,
    get_guides_menu,
    get_bust_menu,
    get_teams_menu,
    get_trading_menu,
    get_settings_menu,
    get_help_menu,
    get_my_team_menu,
    get_language_menu,
    get_profile_menu
)
from texts import (
    MAIN_MENU_ERROR_TEXT, UNKNOWN_COMMAND_TEXT, GENERIC_ERROR_MESSAGE_TEXT,
    CHALLENGES_TEXT, GUIDES_TEXT, BUST_TEXT, TEAMS_TEXT, TRADING_TEXT,
    NEW_GUIDES_TEXT, M6_TEXT, POPULAR_GUIDES_TEXT, BEGINNER_GUIDES_TEXT,
    ADVANCED_TECHNIQUES_TEXT, TEAMPLAY_GUIDES_TEXT,
    LANGUAGE_SELECTION_TEXT, UPDATE_ID_SUCCESS_TEXT, NOTIFICATIONS_SETTINGS_TEXT,
    INSTRUCTIONS_TEXT, FAQ_TEXT, HELP_SUPPORT_TEXT,
    MY_TEAM_TEXT
)
from handlers.base import safe_delete_message, check_and_edit_message, send_or_update_interactive_message

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()

async def transition_state(state: FSMContext, new_state: MenuStates):
    await state.clear()
    await state.set_state(new_state)

async def handle_menu(
    user_choice: str,
    message: Message,
    state: FSMContext,
    bot: Bot,
    get_menu_keyboard,
    menu_text: str,
    interactive_text: str,
    new_state: MenuStates,
    error_text: str = MAIN_MENU_ERROR_TEXT
):
    logger.info(f"User {message.from_user.id} selected '{user_choice}' in {menu_text}")
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')
    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            main_message = await bot.send_message(
                chat_id=message.chat.id,
                text=error_text,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=main_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        return
    try:
        main_message = await bot.send_message(
            chat_id=message.chat.id,
            text=menu_text,
            reply_markup=get_menu_keyboard()
        )
        new_bot_message_id = main_message.message_id
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ {menu_text} –º–µ–Ω—é: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        return
    await safe_delete_message(bot, message.chat.id, bot_message_id)
    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text=interactive_text,
        new_keyboard=get_generic_inline_keyboard(),
        state=state,
        parse_mode=ParseMode.HTML
    )
    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

@router.message(F.text == MenuButton.CHALLENGES.value)
async def handle_challenges(message: Message, state: FSMContext, bot: Bot):
    await handle_menu(
        user_choice=MenuButton.CHALLENGES.value,
        message=message,
        state=state,
        bot=bot,
        get_menu_keyboard=get_challenges_menu,
        menu_text=CHALLENGES_TEXT,
        interactive_text="–ß–µ–ª–µ–Ω–¥–∂—ñ –º–µ–Ω—é",
        new_state=MenuStates.CHALLENGES_MENU
    )

@router.message(MenuStates.CHALLENGES_MENU)
async def handle_challenges_menu_buttons(message: Message, state: FSMContext, bot: Bot):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected '{user_choice}' in Challenges Menu")
    await safe_delete_message(bot, message.chat.id, message.message_id)
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')
    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            error_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=error_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        return
    new_main_text = ""
    new_main_keyboard = get_challenges_menu()
    new_interactive_text = "–ß–µ–ª–µ–Ω–¥–∂—ñ –º–µ–Ω—é"
    new_state = MenuStates.CHALLENGES_MENU
    if user_choice == "‚ûï –î–æ–¥–∞—Ç–∏ –ß–µ–ª–µ–Ω–¥–∂":
        new_main_text = "–§—É–Ω–∫—Ü—ñ—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —á–µ–ª–µ–Ω–¥–∂—ñ–≤ —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "üè† –û—Å–Ω–æ–≤–Ω–∞ –ù–∞–≤—ñ–≥–∞—Ü—ñ—è"
        new_main_keyboard = get_navigation_menu()
        new_interactive_text = "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª —É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó"
        new_state = MenuStates.NAVIGATION_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_challenges_menu()
    try:
        if new_main_keyboard:
            main_message = await bot.send_message(
                chat_id=message.chat.id,
                text=new_main_text,
                reply_markup=new_main_keyboard
            )
            new_bot_message_id = main_message.message_id
        else:
            await bot.send_message(
                chat_id=message.chat.id,
                text=new_main_text,
                reply_markup=get_generic_inline_keyboard()
            )
            new_bot_message_id = bot_message_id
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–µ Challenges –º–µ–Ω—é: {e}")
        return
    await safe_delete_message(bot, message.chat.id, bot_message_id)
    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text=new_interactive_text,
        new_keyboard=get_generic_inline_keyboard(),
        state=state,
        parse_mode=ParseMode.HTML
    )
    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

@router.message(F.text == MenuButton.GUIDES.value)
async def handle_guides(message: Message, state: FSMContext, bot: Bot):
    await handle_menu(
        user_choice=MenuButton.GUIDES.value,
        message=message,
        state=state,
        bot=bot,
        get_menu_keyboard=get_guides_menu,
        menu_text=GUIDES_TEXT,
        interactive_text="–ú–µ–Ω—é –ì–∞–π–¥—ñ–≤",
        new_state=MenuStates.GUIDES_MENU
    )

@router.message(MenuStates.GUIDES_MENU)
async def handle_guides_menu_buttons(message: Message, state: FSMContext, bot: Bot):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected '{user_choice}' in Guides Menu")
    await safe_delete_message(bot, message.chat.id, message.message_id)
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')
    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            error_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=error_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        return
    new_main_text = ""
    new_main_keyboard = get_guides_menu()
    new_interactive_text = "–ú–µ–Ω—é –ì–∞–π–¥—ñ–≤"
    new_state = MenuStates.GUIDES_MENU
    if user_choice == MenuButton.NEW_GUIDES.value:
        new_main_text = NEW_GUIDES_TEXT
    elif user_choice == MenuButton.POPULAR_GUIDES.value:
        new_main_text = POPULAR_GUIDES_TEXT
    elif user_choice == MenuButton.BEGINNER_GUIDES.value:
        new_main_text = BEGINNER_GUIDES_TEXT
    elif user_choice == MenuButton.ADVANCED_TECHNIQUES.value:
        new_main_text = ADVANCED_TECHNIQUES_TEXT
    elif user_choice == MenuButton.TEAMPLAY_GUIDES.value:
        new_main_text = TEAMPLAY_GUIDES_TEXT
    elif user_choice == MenuButton.M6.value:
        new_main_text = M6_TEXT
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "üè† –û—Å–Ω–æ–≤–Ω–∞ –ù–∞–≤—ñ–≥–∞—Ü—ñ—è"
        new_main_keyboard = get_navigation_menu()
        new_interactive_text = "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª —É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó"
        new_state = MenuStates.NAVIGATION_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_guides_menu()
    try:
        if new_main_keyboard:
            main_message = await bot.send_message(
                chat_id=message.chat.id,
                text=new_main_text,
                reply_markup=new_main_keyboard
            )
            new_bot_message_id = main_message.message_id
        else:
            await bot.send_message(
                chat_id=message.chat.id,
                text=new_main_text,
                reply_markup=get_generic_inline_keyboard()
            )
            new_bot_message_id = bot_message_id
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–µ Guides –º–µ–Ω—é: {e}")
        return
    await safe_delete_message(bot, message.chat.id, bot_message_id)
    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text=new_interactive_text,
        new_keyboard=get_generic_inline_keyboard(),
        state=state,
        parse_mode=ParseMode.HTML
    )
    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

@router.message(F.text == MenuButton.BUST.value)
async def handle_bust(message: Message, state: FSMContext, bot: Bot):
    await handle_menu(
        user_choice=MenuButton.BUST.value,
        message=message,
        state=state,
        bot=bot,
        get_menu_keyboard=get_bust_menu,
        menu_text=BUST_TEXT,
        interactive_text="–ú–µ–Ω—é Bust",
        new_state=MenuStates.BUST_MENU
    )

@router.message(MenuStates.BUST_MENU)
async def handle_bust_menu_buttons(message: Message, state: FSMContext, bot: Bot):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected '{user_choice}' in Bust Menu")
    await safe_delete_message(bot, message.chat.id, message.message_id)
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')
    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            error_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=error_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        return
    new_main_text = ""
    new_main_keyboard = get_bust_menu()
    new_interactive_text = "–ú–µ–Ω—é Bust"
    new_state = MenuStates.BUST_MENU
    if user_choice == "üî• –ü—ñ–¥–≤–∏—â–∏—Ç–∏ –ë—É—Å—Ç":
        new_main_text = "–§—É–Ω–∫—Ü—ñ—è –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –±—É—Å—Ç—É —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "üè† –û—Å–Ω–æ–≤–Ω–∞ –ù–∞–≤—ñ–≥–∞—Ü—ñ—è"
        new_main_keyboard = get_navigation_menu()
        new_interactive_text = "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª —É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó"
        new_state = MenuStates.NAVIGATION_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_bust_menu()
    try:
        if new_main_keyboard:
            main_message = await bot.send_message(
                chat_id=message.chat.id,
                text=new_main_text,
                reply_markup=new_main_keyboard
            )
            new_bot_message_id = main_message.message_id
        else:
            await bot.send_message(
                chat_id=message.chat.id,
                text=new_main_text,
                reply_markup=get_generic_inline_keyboard()
            )
            new_bot_message_id = bot_message_id
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–µ Bust –º–µ–Ω—é: {e}")
        return
    await safe_delete_message(bot, message.chat.id, bot_message_id)
    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text=new_interactive_text,
        new_keyboard=get_generic_inline_keyboard(),
        state=state,
        parse_mode=ParseMode.HTML
    )
    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

@router.message(F.text == MenuButton.TEAMS.value)
async def handle_teams(message: Message, state: FSMContext, bot: Bot):
    await handle_menu(
        user_choice=MenuButton.TEAMS.value,
        message=message,
        state=state,
        bot=bot,
        get_menu_keyboard=get_teams_menu,
        menu_text=TEAMS_TEXT,
        interactive_text="–ú–µ–Ω—é Teams",
        new_state=MenuStates.TEAMS_MENU
    )

@router.message(MenuStates.TEAMS_MENU)
async def handle_teams_menu_buttons(message: Message, state: FSMContext, bot: Bot):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected '{user_choice}' in Teams Menu")
    await safe_delete_message(bot, message.chat.id, message.message_id)
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')
    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            error_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=error_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        return
    new_main_text = ""
    new_main_keyboard = get_teams_menu()
    new_interactive_text = "–ú–µ–Ω—é Teams"
    new_state = MenuStates.TEAMS_MENU
    if user_choice == MenuButton.CREATE_TEAM.value:
        new_main_text = "–§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
    elif user_choice == MenuButton.VIEW_TEAMS.value:
        new_main_text = "–§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–æ–º–∞–Ω–¥ —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "üè† –û—Å–Ω–æ–≤–Ω–∞ –ù–∞–≤—ñ–≥–∞—Ü—ñ—è"
        new_main_keyboard = get_navigation_menu()
        new_interactive_text = "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª —É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó"
        new_state = MenuStates.NAVIGATION_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_teams_menu()
    try:
        if new_main_keyboard:
            main_message = await bot.send_message(
                chat_id=message.chat.id,
                text=new_main_text,
                reply_markup=new_main_keyboard
            )
            new_bot_message_id = main_message.message_id
        else:
            await bot.send_message(
                chat_id=message.chat.id,
                text=new_main_text,
                reply_markup=get_generic_inline_keyboard()
            )
            new_bot_message_id = bot_message_id
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–µ Teams –º–µ–Ω—é: {e}")
        return
    await safe_delete_message(bot, message.chat.id, bot_message_id)
    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text=new_interactive_text,
        new_keyboard=get_generic_inline_keyboard(),
        state=state,
        parse_mode=ParseMode.HTML
    )
    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

@router.message(F.text == MenuButton.TRADING.value)
async def handle_trading(message: Message, state: FSMContext, bot: Bot):
    await handle_menu(
        user_choice=MenuButton.TRADING.value,
        message=message,
        state=state,
        bot=bot,
        get_menu_keyboard=get_trading_menu,
        menu_text=TRADING_TEXT,
        interactive_text="–ú–µ–Ω—é Trading",
        new_state=MenuStates.TRADING_MENU
    )

@router.message(MenuStates.TRADING_MENU)
async def handle_trading_menu_buttons(message: Message, state: FSMContext, bot: Bot):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected '{user_choice}' in Trading Menu")
    await safe_delete_message(bot, message.chat.id, message.message_id)
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')
    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            error_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=error_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        return
    new_main_text = ""
    new_main_keyboard = get_trading_menu()
    new_interactive_text = "–ú–µ–Ω—é Trading"
    new_state = MenuStates.TRADING_MENU
    if user_choice == MenuButton.CREATE_TRADE.value:
        new_main_text = "–§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ!"
    elif user_choice == MenuButton.VIEW_TRADES.value:
        new_main_text = "–û—Å—å –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç–æ—Ä–≥—ñ–≤–ª—ñ:"
    elif user_choice == MenuButton.MANAGE_TRADES.value:
        new_main_text = "–§—É–Ω–∫—Ü—ñ—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–æ—Ä–≥—ñ–≤–ª—è–º–∏ —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ!"
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "üè† –û—Å–Ω–æ–≤–Ω–∞ –ù–∞–≤—ñ–≥–∞—Ü—ñ—è"
        new_main_keyboard = get_navigation_menu()
        new_interactive_text = "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª —É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó"
        new_state = MenuStates.NAVIGATION_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_trading_menu()
    try:
        if new_main_keyboard:
            main_message = await bot.send_message(
                chat_id=message.chat.id,
                text=new_main_text,
                reply_markup=new_main_keyboard
            )
            new_bot_message_id = main_message.message_id
        else:
            await bot.send_message(
                chat_id=message.chat.id,
                text=new_main_text,
                reply_markup=get_generic_inline_keyboard()
            )
            new_bot_message_id = bot_message_id
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–µ Trading –º–µ–Ω—é: {e}")
        return
    await safe_delete_message(bot, message.chat.id, bot_message_id)
    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text=new_interactive_text,
        new_keyboard=get_generic_inline_keyboard(),
        state=state,
        parse_mode=ParseMode.HTML
    )
    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

@router.message(F.text == MenuButton.SETTINGS.value)
async def handle_settings(message: Message, state: FSMContext, bot: Bot):
    await handle_menu(
        user_choice=MenuButton.SETTINGS.value,
        message=message,
        state=state,
        bot=bot,
        get_menu_keyboard=get_settings_menu,
        menu_text="‚öôÔ∏è Settings",
        interactive_text="‚öôÔ∏è Settings Menu",
        new_state=MenuStates.SETTINGS_SUBMENU
    )

@router.message(MenuStates.SETTINGS_SUBMENU)
async def handle_settings_menu_buttons(message: Message, state: FSMContext, bot: Bot):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected '{user_choice}' in Settings Menu")
    await safe_delete_message(bot, message.chat.id, message.message_id)
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')
    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            error_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=error_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        return
    new_main_text = ""
    new_main_keyboard = get_settings_menu()
    new_interactive_text = "‚öôÔ∏è Settings Menu"
    new_state = MenuStates.SETTINGS_SUBMENU
    if user_choice == MenuButton.LANGUAGE.value:
        new_main_text = LANGUAGE_SELECTION_TEXT
        new_main_keyboard = get_language_menu()
        new_state = MenuStates.SELECT_LANGUAGE
    elif user_choice == MenuButton.CHANGE_USERNAME.value:
        new_main_text = "‚ÑπÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:"
        new_main_keyboard = ReplyKeyboardRemove()
        await increment_step(state)
        await state.set_state(MenuStates.CHANGE_USERNAME)
        try:
            await bot.send_message(chat_id=message.chat.id, text=new_main_text, reply_markup=new_main_keyboard)
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ –∑–º—ñ–Ω—É —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
        return
    elif user_choice == MenuButton.UPDATE_ID.value:
        new_main_text = UPDATE_ID_SUCCESS_TEXT
    elif user_choice == MenuButton.NOTIFICATIONS.value:
        new_main_text = NOTIFICATIONS_SETTINGS_TEXT
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "ü™™ –ú—ñ–π –ü—Ä–æ—Ñ—ñ–ª—å"
        new_main_keyboard = get_profile_menu()
        new_interactive_text = "ü™™ –ú—ñ–π –ü—Ä–æ—Ñ—ñ–ª—å –ú–µ–Ω—é"
        new_state = MenuStates.PROFILE_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_settings_menu()
    try:
        if new_main_keyboard:
            main_message = await bot.send_message(
                chat_id=message.chat.id,
                text=new_main_text,
                reply_markup=new_main_keyboard
            )
            new_bot_message_id = main_message.message_id
        else:
            await bot.send_message(
                chat_id=message.chat.id,
                text=new_main_text,
                reply_markup=get_generic_inline_keyboard()
            )
            new_bot_message_id = bot_message_id
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–µ Settings –º–µ–Ω—é: {e}")
        return
    await safe_delete_message(bot, message.chat.id, bot_message_id)
    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text=new_interactive_text,
        new_keyboard=get_generic_inline_keyboard(),
        state=state,
        parse_mode=ParseMode.HTML
    )
    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

@router.message(MenuStates.SELECT_LANGUAGE)
async def handle_select_language(message: Message, state: FSMContext, bot: Bot):
    selected_language = message.text
    logger.info(f"User {message.from_user.id} –≤–∏–±—Ä–∞–≤ –º–æ–≤—É: {selected_language}")
    await safe_delete_message(bot, message.chat.id, message.message_id)
    try:
        response_text = f"–Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {selected_language}."
        await bot.send_message(
            chat_id=message.chat.id,
            text=response_text,
            reply_markup=get_generic_inline_keyboard()
        )
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–∏ –º–æ–≤–∏: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
    try:
        settings_message = await bot.send_message(
            chat_id=message.chat.id,
            text="‚öôÔ∏è Settings",
            reply_markup=get_settings_menu()
        )
        await state.update_data(bot_message_id=settings_message.message_id)
        await increment_step(state)
        await transition_state(state, MenuStates.SETTINGS_SUBMENU)
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –º–µ–Ω—é Settings –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ –º–æ–≤–∏: {e}")

@router.message(MenuStates.CHANGE_USERNAME)
async def handle_change_username(message: Message, state: FSMContext, bot: Bot):
    cs = await state.get_state()
    if cs != MenuStates.CHANGE_USERNAME.state:
        return
    new_username = message.text.strip()
    logger.info(f"User {message.from_user.id} –∑–º—ñ–Ω—é—î —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞: {new_username}")
    await safe_delete_message(bot, message.chat.id, message.message_id)
    try:
        response_text = f"–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {new_username}."
        await bot.send_message(
            chat_id=message.chat.id,
            text=response_text,
            reply_markup=get_generic_inline_keyboard()
        )
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–∏ —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
    try:
        settings_message = await bot.send_message(
            chat_id=message.chat.id,
            text="‚öôÔ∏è Settings",
            reply_markup=get_settings_menu()
        )
        await state.update_data(bot_message_id=settings_message.message_id)
        await increment_step(state)
        await transition_state(state, MenuStates.SETTINGS_SUBMENU)
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –º–µ–Ω—é Settings –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")

@router.message(F.text == MenuButton.HELP.value)
async def handle_help(message: Message, state: FSMContext, bot: Bot):
    await handle_menu(
        user_choice=MenuButton.HELP.value,
        message=message,
        state=state,
        bot=bot,
        get_menu_keyboard=get_help_menu,
        menu_text="‚ùì Help",
        interactive_text="‚ùì Help Menu",
        new_state=MenuStates.HELP_SUBMENU
    )

@router.message(MenuStates.HELP_SUBMENU)
async def handle_help_menu_buttons(message: Message, state: FSMContext, bot: Bot):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected '{user_choice}' in Help Menu")
    await safe_delete_message(bot, message.chat.id, message.message_id)
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')
    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            error_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=error_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        return
    new_main_text = ""
    new_main_keyboard = get_help_menu()
    new_interactive_text = "‚ùì Help Menu"
    new_state = MenuStates.HELP_SUBMENU
    if user_choice == MenuButton.INSTRUCTIONS.value:
        new_main_text = INSTRUCTIONS_TEXT
    elif user_choice == MenuButton.FAQ.value:
        new_main_text = FAQ_TEXT
    elif user_choice == MenuButton.HELP_SUPPORT.value:
        new_main_text = HELP_SUPPORT_TEXT
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "ü™™ –ú—ñ–π –ü—Ä–æ—Ñ—ñ–ª—å"
        new_main_keyboard = get_profile_menu()
        new_interactive_text = "ü™™ –ú—ñ–π –ü—Ä–æ—Ñ—ñ–ª—å –ú–µ–Ω—é"
        new_state = MenuStates.PROFILE_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_help_menu()
    try:
        if new_main_keyboard:
            main_message = await bot.send_message(
                chat_id=message.chat.id,
                text=new_main_text,
                reply_markup=new_main_keyboard
            )
            new_bot_message_id = main_message.message_id
        else:
            await bot.send_message(
                chat_id=message.chat.id,
                text=new_main_text,
                reply_markup=get_generic_inline_keyboard()
            )
            new_bot_message_id = bot_message_id
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–µ Help –º–µ–Ω—é: {e}")
        return
    await safe_delete_message(bot, message.chat.id, bot_message_id)
    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text=new_interactive_text,
        new_keyboard=get_generic_inline_keyboard(),
        state=state,
        parse_mode=ParseMode.HTML
    )
    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

@router.message(F.text == MenuButton.MY_TEAM.value)
async def handle_my_team(message: Message, state: FSMContext, bot: Bot):
    await handle_menu(
        user_choice=MenuButton.MY_TEAM.value,
        message=message,
        state=state,
        bot=bot,
        get_menu_keyboard=get_my_team_menu,
        menu_text=MY_TEAM_TEXT,
        interactive_text="ü™™ My Team Menu",
        new_state=MenuStates.MY_TEAM_MENU
    )

@router.message(MenuStates.MY_TEAM_MENU)
async def handle_my_team_menu_buttons(message: Message, state: FSMContext, bot: Bot):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected '{user_choice}' in My Team Menu")
    await safe_delete_message(bot, message.chat.id, message.message_id)
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')
    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            error_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=error_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        return
    new_main_text = ""
    new_main_keyboard = get_my_team_menu()
    new_interactive_text = "ü™™ My Team Menu"
    new_state = MenuStates.MY_TEAM_MENU
    if user_choice == "‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ö–æ–º–∞–Ω–¥—É":
        new_main_text = "–§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
    elif user_choice == "üëÄ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ö–æ–º–∞–Ω–¥–∏":
        new_main_text = "–§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–æ–º–∞–Ω–¥ —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "ü™™ –ú—ñ–π –ü—Ä–æ—Ñ—ñ–ª—å"
        new_main_keyboard = get_profile_menu()
        new_interactive_text = "ü™™ –ú—ñ–π –ü—Ä–æ—Ñ—ñ–ª—å –ú–µ–Ω—é"
        new_state = MenuStates.PROFILE_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_my_team_menu()
    try:
        if new_main_keyboard:
            main_message = await bot.send_message(
                chat_id=message.chat.id,
                text=new_main_text,
                reply_markup=new_main_keyboard
            )
            new_bot_message_id = main_message.message_id
        else:
            await bot.send_message(
                chat_id=message.chat.id,
                text=new_main_text,
                reply_markup=get_generic_inline_keyboard()
            )
            new_bot_message_id = bot_message_id
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–µ My Team –º–µ–Ω—é: {e}")
        return
    await safe_delete_message(bot, message.chat.id, bot_message_id)
    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text=new_interactive_text,
        new_keyboard=get_generic_inline_keyboard(),
        state=state,
        parse_mode=ParseMode.HTML
    )
    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

@router.message(F.text == MenuButton.ADVANCED_TECHNIQUES.value)
async def handle_advanced_techniques(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected Advanced Techniques")
    await safe_delete_message(bot, message.chat.id, message.message_id)
    try:
        advanced_techniques_message = await bot.send_message(
            chat_id=message.chat.id,
            text=ADVANCED_TECHNIQUES_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        await state.update_data(bot_message_id=advanced_techniques_message.message_id)
        await increment_step(state)
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ Advanced Techniques info: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )

@router.message(F.text == MenuButton.INSTRUCTIONS.value)
async def handle_instructions(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected Instructions")
    await safe_delete_message(bot, message.chat.id, message.message_id)
    try:
        instructions_message = await bot.send_message(
            chat_id=message.chat.id,
            text=INSTRUCTIONS_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        await state.update_data(bot_message_id=instructions_message.message_id)
        await increment_step(state)
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ Instructions: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )

@router.message(F.text == MenuButton.FAQ.value)
async def handle_faq(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected FAQ")
    await safe_delete_message(bot, message.chat.id, message.message_id)
    try:
        faq_message = await bot.send_message(
            chat_id=message.chat.id,
            text=FAQ_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        await state.update_data(bot_message_id=faq_message.message_id)
        await increment_step(state)
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ FAQ: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )

@router.message(F.text == MenuButton.HELP_SUPPORT.value)
async def handle_help_support(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected Help Support")
    await safe_delete_message(bot, message.chat.id, message.message_id)
    try:
        help_support_message = await bot.send_message(
            chat_id=message.chat.id,
            text=HELP_SUPPORT_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        await state.update_data(bot_message_id=help_support_message.message_id)
        await increment_step(state)
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ Help Support: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )

@router.message(F.text == MenuButton.UPDATE_ID.value)
async def handle_update_id(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected Update ID")
    await safe_delete_message(bot, message.chat.id, message.message_id)
    try:
        response_text = UPDATE_ID_SUCCESS_TEXT
        await bot.send_message(
            chat_id=message.chat.id,
            text=response_text,
            reply_markup=get_generic_inline_keyboard()
        )
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è ID: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
    try:
        settings_message = await bot.send_message(
            chat_id=message.chat.id,
            text="‚öôÔ∏è Settings",
            reply_markup=get_settings_menu()
        )
        await state.update_data(bot_message_id=settings_message.message_id)
        await increment_step(state)
        await transition_state(state, MenuStates.SETTINGS_SUBMENU)
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –º–µ–Ω—é Settings –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è ID: {e}")

@router.message(F.text == MenuButton.NOTIFICATIONS.value)
async def handle_notifications(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected Notifications")
    await safe_delete_message(bot, message.chat.id, message.message_id)
    try:
        await bot.send_message(
            chat_id=message.chat.id,
            text=NOTIFICATIONS_SETTINGS_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
    try:
        settings_message = await bot.send_message(
            chat_id=message.chat.id,
            text="‚öôÔ∏è Settings",
            reply_markup=get_settings_menu()
        )
        await state.update_data(bot_message_id=settings_message.message_id)
        await increment_step(state)
        await transition_state(state, MenuStates.SETTINGS_SUBMENU)
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –º–µ–Ω—é Settings –ø—ñ—Å–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å: {e}")

def setup_missing_handlers(dp: Router):
    dp.include_router(router)