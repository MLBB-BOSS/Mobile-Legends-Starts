# handlers/missing_handlers.py

import logging
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from states import MenuStates
from utils.state_utils import increment_step
from keyboards.menus import (
    MenuButton,
    get_generic_inline_keyboard,
    get_navigation_menu,
    get_challenges_menu,
    get_guides_menu,
    get_bust_menu,
    get_teams_menu,
    get_trading_menu,
    get_settings_menu,
    get_help_menu,
    get_my_team_menu,
    get_language_menu,
    get_profile_menu
)
from texts import (
    MAIN_MENU_ERROR_TEXT, UNKNOWN_COMMAND_TEXT, GENERIC_ERROR_MESSAGE_TEXT,
    CHALLENGES_TEXT, GUIDES_TEXT, BUST_TEXT, TEAMS_TEXT, TRADING_TEXT,
    NEW_GUIDES_TEXT, M6_TEXT, POPULAR_GUIDES_TEXT, BEGINNER_GUIDES_TEXT,
    ADVANCED_TECHNIQUES_TEXT, TEAMPLAY_GUIDES_TEXT,
    LANGUAGE_SELECTION_TEXT, UPDATE_ID_SUCCESS_TEXT, NOTIFICATIONS_SETTINGS_TEXT,
    INSTRUCTIONS_TEXT, FAQ_TEXT, HELP_SUPPORT_TEXT,
    MY_TEAM_TEXT
)
from handlers.base import safe_delete_message, check_and_edit_message

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()

# –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –º—ñ–∂ —Å—Ç–∞–Ω–∞–º–∏
async def transition_state(state: FSMContext, new_state: MenuStates):
    await state.set_state(new_state)

# –£–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é
async def send_new_menu(bot, chat_id: int, text: str, keyboard, state: FSMContext) -> int:
    try:
        new_message = await bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=keyboard
        )
        return new_message.message_id
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –º–µ–Ω—é: {e}")
        await handle_error(bot, chat_id, GENERIC_ERROR_MESSAGE_TEXT, state)
        return None

# –£–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫
async def handle_error(bot, chat_id: int, error_message: str, state: FSMContext):
    try:
        await bot.send_message(chat_id=chat_id, text=error_message, reply_markup=get_generic_inline_keyboard())
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–º–∏–ª–∫–∏: {e}")
    await transition_state(state, MenuStates.MAIN_MENU)

# –£–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–∏–±–æ—Ä—É –Ω–∞–∑–∞–¥
async def handle_back_action(bot, message: Message, state: FSMContext, new_state: MenuStates, new_text: str, new_keyboard):
    try:
        new_bot_message_id = await send_new_menu(bot, message.chat.id, new_text, new_keyboard, state)
        if not new_bot_message_id:
            return

        data = await state.get_data()
        old_bot_message_id = data.get('bot_message_id')
        interactive_message_id = data.get('interactive_message_id')

        if old_bot_message_id:
            await safe_delete_message(bot, message.chat.id, old_bot_message_id)

        if interactive_message_id:
            await check_and_edit_message(
                bot=bot,
                chat_id=message.chat.id,
                message_id=interactive_message_id,
                new_text=new_text,
                new_keyboard=get_generic_inline_keyboard(),
                state=state
            )

        await increment_step(state)
        await state.update_data(bot_message_id=new_bot_message_id)
        await transition_state(state, new_state)
    except Exception as e:
        logger.error(f"Failed to handle back action: {e}")
        await handle_error(bot, message.chat.id, GENERIC_ERROR_MESSAGE_TEXT, state)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Challenges"
@router.message(F.text == MenuButton.CHALLENGES.value)
async def handle_challenges(message: Message, state: FSMContext):
    logger.info(f"User {message.from_user.id} selected Challenges")
    await safe_delete_message(message.bot, message.chat.id, message.message_id)

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ —Å—Ç–∞–Ω—É
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        await handle_error(message.bot, message.chat.id, MAIN_MENU_ERROR_TEXT, state)
        return

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é Challenges
    new_bot_message_id = await send_new_menu(message.bot, message.chat.id, CHALLENGES_TEXT, get_challenges_menu(), state)
    if not new_bot_message_id:
        return  # –Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞, –æ–±—Ä–æ–±–∫–∞ –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω–∞ —É send_new_menu

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await safe_delete_message(message.bot, message.chat.id, bot_message_id)

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await check_and_edit_message(
        bot=message.bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text="–ß–µ–ª–µ–Ω–¥–∂—ñ –º–µ–Ω—é",
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, MenuStates.CHALLENGES_MENU)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –º–µ–Ω—é "Challenges Menu"
@router.message(StateFilter(MenuStates.CHALLENGES_MENU))
async def handle_challenges_menu_buttons(message: Message, state: FSMContext):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected {user_choice} in Challenges Menu")

    await safe_delete_message(message.bot, message.chat.id, message.message_id)

    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        await handle_error(message.bot, message.chat.id, MAIN_MENU_ERROR_TEXT, state)
        return

    new_main_text = ""
    new_main_keyboard = None
    new_interactive_text = "–ß–µ–ª–µ–Ω–¥–∂—ñ –º–µ–Ω—é"
    new_state = MenuStates.CHALLENGES_MENU

    if user_choice == "‚ûï –î–æ–¥–∞—Ç–∏ –ß–µ–ª–µ–Ω–¥–∂":
        new_main_text = "Feature to add challenges is under development."
        new_main_keyboard = get_challenges_menu()
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "üè† Main Navigation"
        new_main_keyboard = get_navigation_menu()
        new_interactive_text = "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª —É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó"
        new_state = MenuStates.NAVIGATION_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_challenges_menu()

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é
    try:
        if new_main_keyboard:
            main_message = await message.bot.send_message(
                chat_id=message.chat.id,
                text=new_main_text,
                reply_markup=new_main_keyboard
            )
            new_bot_message_id = main_message.message_id
        else:
            await message.bot.send_message(
                chat_id=message.chat.id,
                text=new_main_text,
                reply_markup=get_generic_inline_keyboard()
            )
            new_bot_message_id = bot_message_id
    except Exception as e:
        logger.error(f"Failed to send new Challenges menu: {e}")
        await handle_error(message.bot, message.chat.id, GENERIC_ERROR_MESSAGE_TEXT, state)
        return

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await safe_delete_message(message.bot, message.chat.id, bot_message_id)

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await check_and_edit_message(
        bot=message.bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text=new_interactive_text,
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

# –ê–Ω–∞–ª–æ–≥—ñ—á–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —ñ–Ω—à–∏—Ö –º–µ–Ω—é (Guides, Bust, Teams, Trading, Settings, Help, My Team)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Guides"
@router.message(F.text == MenuButton.GUIDES.value)
async def handle_guides(message: Message, state: FSMContext):
    logger.info(f"User {message.from_user.id} selected Guides")
    await safe_delete_message(message.bot, message.chat.id, message.message_id)

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ —Å—Ç–∞–Ω—É
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        await handle_error(message.bot, message.chat.id, MAIN_MENU_ERROR_TEXT, state)
        return

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é Guides
    new_bot_message_id = await send_new_menu(message.bot, message.chat.id, GUIDES_TEXT, get_guides_menu(), state)
    if not new_bot_message_id:
        return

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await safe_delete_message(message.bot, message.chat.id, bot_message_id)

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await check_and_edit_message(
        bot=message.bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text="–ú–µ–Ω—é –ì–∞–π–¥—ñ–≤",
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, MenuStates.GUIDES_MENU)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –º–µ–Ω—é "Guides Menu"
@router.message(StateFilter(MenuStates.GUIDES_MENU))
async def handle_guides_menu_buttons(message: Message, state: FSMContext):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected {user_choice} in Guides Menu")

    await safe_delete_message(message.bot, message.chat.id, message.message_id)

    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        await handle_error(message.bot, message.chat.id, MAIN_MENU_ERROR_TEXT, state)
        return

    new_main_text = ""
    new_main_keyboard = get_guides_menu()
    new_interactive_text = "–ú–µ–Ω—é –ì–∞–π–¥—ñ–≤"
    new_state = MenuStates.GUIDES_MENU

    if user_choice == MenuButton.NEW_GUIDES.value:
        new_main_text = NEW_GUIDES_TEXT
    elif user_choice == MenuButton.POPULAR_GUIDES.value:
        new_main_text = POPULAR_GUIDES_TEXT
    elif user_choice == MenuButton.BEGINNER_GUIDES.value:
        new_main_text = BEGINNER_GUIDES_TEXT
    elif user_choice == MenuButton.ADVANCED_TECHNIQUES.value:
        new_main_text = ADVANCED_TECHNIQUES_TEXT
    elif user_choice == MenuButton.TEAMPLAY_GUIDES.value:
        new_main_text = TEAMPLAY_GUIDES_TEXT
    elif user_choice == MenuButton.M6.value:
        new_main_text = M6_TEXT
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "üè† Main Navigation"
        new_main_keyboard = get_navigation_menu()
        new_interactive_text = "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª —É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó"
        new_state = MenuStates.NAVIGATION_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é
    try:
        main_message = await message.bot.send_message(
            chat_id=message.chat.id,
            text=new_main_text,
            reply_markup=new_main_keyboard
        )
        new_bot_message_id = main_message.message_id
    except Exception as e:
        logger.error(f"Failed to send new Guides menu: {e}")
        await handle_error(message.bot, message.chat.id, GENERIC_ERROR_MESSAGE_TEXT, state)
        return

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await safe_delete_message(message.bot, message.chat.id, bot_message_id)

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await check_and_edit_message(
        bot=message.bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text=new_interactive_text,
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

# –ê–Ω–∞–ª–æ–≥—ñ—á–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è Bust, Teams, Trading, Settings, Help, My Team

# –ü—Ä–∏–∫–ª–∞–¥ –æ–±—Ä–æ–±–Ω–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Bust"
@router.message(F.text == MenuButton.BUST.value)
async def handle_bust(message: Message, state: FSMContext):
    logger.info(f"User {message.from_user.id} selected Bust")
    await safe_delete_message(message.bot, message.chat.id, message.message_id)

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ —Å—Ç–∞–Ω—É
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        await handle_error(message.bot, message.chat.id, MAIN_MENU_ERROR_TEXT, state)
        return

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é Bust
    new_bot_message_id = await send_new_menu(message.bot, message.chat.id, BUST_TEXT, get_bust_menu(), state)
    if not new_bot_message_id:
        return

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await safe_delete_message(message.bot, message.chat.id, bot_message_id)

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await check_and_edit_message(
        bot=message.bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text="–ú–µ–Ω—é Bust",
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, MenuStates.BUST_MENU)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –º–µ–Ω—é "Bust Menu"
@router.message(StateFilter(MenuStates.BUST_MENU))
async def handle_bust_menu_buttons(message: Message, state: FSMContext):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected {user_choice} in Bust Menu")

    await safe_delete_message(message.bot, message.chat.id, message.message_id)

    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        await handle_error(message.bot, message.chat.id, MAIN_MENU_ERROR_TEXT, state)
        return

    new_main_text = ""
    new_main_keyboard = get_bust_menu()
    new_interactive_text = "–ú–µ–Ω—é Bust"
    new_state = MenuStates.BUST_MENU

    if user_choice == "üî• –ü—ñ–¥–≤–∏—â–∏—Ç–∏ –ë—É—Å—Ç":
        new_main_text = "Feature to increase bust is under development."
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "üè† Main Navigation"
        new_main_keyboard = get_navigation_menu()
        new_interactive_text = "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª —É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó"
        new_state = MenuStates.NAVIGATION_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é
    try:
        if new_main_keyboard:
            main_message = await message.bot.send_message(
                chat_id=message.chat.id,
                text=new_main_text,
                reply_markup=new_main_keyboard
            )
            new_bot_message_id = main_message.message_id
        else:
            await message.bot.send_message(
                chat_id=message.chat.id,
                text=new_main_text,
                reply_markup=get_generic_inline_keyboard()
            )
            new_bot_message_id = bot_message_id
    except Exception as e:
        logger.error(f"Failed to send new Bust menu: {e}")
        await handle_error(message.bot, message.chat.id, GENERIC_ERROR_MESSAGE_TEXT, state)
        return

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await safe_delete_message(message.bot, message.chat.id, bot_message_id)

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await check_and_edit_message(
        bot=message.bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text=new_interactive_text,
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

# –ü–æ–≤—Ç–æ—Ä—ñ—Ç—å –∞–Ω–∞–ª–æ–≥—ñ—á–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ "Teams", "Trading", "Settings", "Help", "My Team"

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Back" —É —Ä—ñ–∑–Ω–∏—Ö –º–µ–Ω—é
@router.message(F.text == MenuButton.BACK.value)
async def handle_back(message: Message, state: FSMContext):
    logger.info(f"User {message.from_user.id} selected Back")
    await safe_delete_message(message.bot, message.chat.id, message.message_id)

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞–Ω –∑ –¥–∞–Ω–∏—Ö (–º–æ–∂–ª–∏–≤–æ, –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –π–æ–≥–æ —Ä–∞–Ω—ñ—à–µ)
    data = await state.get_data()
    previous_state = data.get('previous_state', MenuStates.MAIN_MENU)

    if previous_state == MenuStates.NAVIGATION_MENU:
        new_main_text = "üè† Main Navigation"
        new_main_keyboard = get_navigation_menu()
        new_interactive_text = "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª —É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó"
        new_state = MenuStates.NAVIGATION_MENU
    elif previous_state == MenuStates.CHALLENGES_MENU:
        new_main_text = CHALLENGES_TEXT
        new_main_keyboard = get_challenges_menu()
        new_interactive_text = "–ß–µ–ª–µ–Ω–¥–∂—ñ –º–µ–Ω—é"
        new_state = MenuStates.CHALLENGES_MENU
    elif previous_state == MenuStates.GUIDES_MENU:
        new_main_text = GUIDES_TEXT
        new_main_keyboard = get_guides_menu()
        new_interactive_text = "–ú–µ–Ω—é –ì–∞–π–¥—ñ–≤"
        new_state = MenuStates.GUIDES_MENU
    elif previous_state == MenuStates.BUST_MENU:
        new_main_text = BUST_TEXT
        new_main_keyboard = get_bust_menu()
        new_interactive_text = "–ú–µ–Ω—é Bust"
        new_state = MenuStates.BUST_MENU
    elif previous_state == MenuStates.TEAMS_MENU:
        new_main_text = TEAMS_TEXT
        new_main_keyboard = get_teams_menu()
        new_interactive_text = "–ú–µ–Ω—é Teams"
        new_state = MenuStates.TEAMS_MENU
    elif previous_state == MenuStates.TRADING_MENU:
        new_main_text = TRADING_TEXT
        new_main_keyboard = get_trading_menu()
        new_interactive_text = "–ú–µ–Ω—é Trading"
        new_state = MenuStates.TRADING_MENU
    elif previous_state == MenuStates.SETTINGS_SUBMENU:
        new_main_text = "‚öôÔ∏è Settings"
        new_main_keyboard = get_settings_menu()
        new_interactive_text = "‚öôÔ∏è Settings Menu"
        new_state = MenuStates.SETTINGS_SUBMENU
    elif previous_state == MenuStates.HELP_SUBMENU:
        new_main_text = "‚ùì Help"
        new_main_keyboard = get_help_menu()
        new_interactive_text = "‚ùì Help Menu"
        new_state = MenuStates.HELP_SUBMENU
    elif previous_state == MenuStates.MY_TEAM_MENU:
        new_main_text = "ü™™ My Team"
        new_main_keyboard = get_my_team_menu()
        new_interactive_text = "ü™™ My Team Menu"
        new_state = MenuStates.MY_TEAM_MENU
    else:
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        new_main_text = "üè† Main Navigation"
        new_main_keyboard = get_navigation_menu()
        new_interactive_text = "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª —É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó"
        new_state = MenuStates.NAVIGATION_MENU

    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–æ–ø–æ–º—ñ–∂–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
    await handle_back_action(message.bot, message, state, new_state, new_main_text, new_main_keyboard)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
def setup_missing_handlers(dp: Router):
    dp.include_router(router)
    # –Ø–∫—â–æ —É –≤–∞—Å —î —ñ–Ω—à—ñ —Ä–æ—É—Ç–µ—Ä–∏, –≤–∫–ª—é—á—ñ—Ç—å —ó—Ö —Ç—É—Ç, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:
    # dp.include_router(profile_router)