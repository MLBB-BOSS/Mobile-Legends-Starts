# handlers/missing_handlers.py

import logging
from aiogram import Router, F, Bot
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.filters import Command

from states import MenuStates
from utils.state_utils import increment_step  # –ù–æ–≤–∏–π —à–ª—è—Ö —ñ–º–ø–æ—Ä—Ç—É
from keyboards.menus import (
    MenuButton,
    get_generic_inline_keyboard,
    get_navigation_menu,
    get_challenges_menu,
    get_guides_menu,
    get_bust_menu,
    get_teams_menu,
    get_trading_menu,
    get_settings_menu,
    get_help_menu,
    get_my_team_menu,
    get_language_menu,
    get_profile_menu
)
from texts import (
    MAIN_MENU_ERROR_TEXT, UNKNOWN_COMMAND_TEXT, GENERIC_ERROR_MESSAGE_TEXT,
    CHALLENGES_TEXT, GUIDES_TEXT, BUST_TEXT, TEAMS_TEXT, TRADING_TEXT,
    NEW_GUIDES_TEXT, M6_TEXT, POPULAR_GUIDES_TEXT, BEGINNER_GUIDES_TEXT,
    ADVANCED_TECHNIQUES_TEXT, TEAMPLAY_GUIDES_TEXT,
    LANGUAGE_SELECTION_TEXT, UPDATE_ID_SUCCESS_TEXT, NOTIFICATIONS_SETTINGS_TEXT,
    INSTRUCTIONS_TEXT, FAQ_TEXT, HELP_SUPPORT_TEXT,
    MY_TEAM_TEXT
)
from handlers.base import safe_delete_message, check_and_edit_message, send_or_update_interactive_message

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()

# –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –º—ñ–∂ —Å—Ç–∞–Ω–∞–º–∏ –±–µ–∑ –æ—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
async def transition_state(state: FSMContext, new_state: MenuStates):
    await state.set_state(new_state)

# –£–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é
async def send_new_menu(bot: Bot, chat_id: int, text: str, keyboard, state: FSMContext) -> int:
    try:
        new_message = await bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=keyboard
        )
        return new_message.message_id
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –º–µ–Ω—é: {e}")
        await handle_error(bot, chat_id, GENERIC_ERROR_MESSAGE_TEXT, state)
        return None

# –£–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫
async def handle_error(bot: Bot, chat_id: int, error_message: str, state: FSMContext):
    try:
        await bot.send_message(chat_id=chat_id, text=error_message, reply_markup=get_generic_inline_keyboard())
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–º–∏–ª–∫–∏: {e}")
    await transition_state(state, MenuStates.MAIN_MENU)

# –£–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–∏–±–æ—Ä—É –Ω–∞–∑–∞–¥
async def handle_back_action(bot: Bot, message: Message, state: FSMContext, new_state: MenuStates, new_text: str, new_keyboard):
    try:
        new_bot_message_id = await send_new_menu(bot, message.chat.id, new_text, new_keyboard, state)
        if not new_bot_message_id:
            return

        data = await state.get_data()
        old_bot_message_id = data.get('bot_message_id')
        interactive_message_id = data.get('interactive_message_id')

        if old_bot_message_id:
            await safe_delete_message(bot, message.chat.id, old_bot_message_id)

        if interactive_message_id:
            await check_and_edit_message(
                bot=bot,
                chat_id=message.chat.id,
                message_id=interactive_message_id,
                new_text=new_text,
                new_keyboard=get_generic_inline_keyboard(),
                state=state
            )

        await increment_step(state)
        await state.update_data(bot_message_id=new_bot_message_id)
        await transition_state(state, new_state)
    except Exception as e:
        logger.error(f"Failed to handle back action: {e}")
        await handle_error(bot, message.chat.id, GENERIC_ERROR_MESSAGE_TEXT, state)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Challenges"
@router.message(F.text == MenuButton.CHALLENGES.value, state=MenuStates.MAIN_MENU)
async def handle_challenges(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected Challenges")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ —Å—Ç–∞–Ω—É
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        await handle_error(bot, message.chat.id, MAIN_MENU_ERROR_TEXT, state)
        return

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é Challenges
    new_bot_message_id = await send_new_menu(bot, message.chat.id, CHALLENGES_TEXT, get_challenges_menu(), state)
    if not new_bot_message_id:
        return  # –Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞, –æ–±—Ä–æ–±–∫–∞ –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω–∞ —É send_new_menu

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text="–ß–µ–ª–µ–Ω–¥–∂—ñ –º–µ–Ω—é",
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, MenuStates.CHALLENGES_MENU)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –º–µ–Ω—é "Challenges Menu"
@router.message(MenuStates.CHALLENGES_MENU)
async def handle_challenges_menu_buttons(message: Message, state: FSMContext, bot: Bot):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected {user_choice} in Challenges Menu")

    await safe_delete_message(bot, message.chat.id, message.message_id)

    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        await handle_error(bot, message.chat.id, MAIN_MENU_ERROR_TEXT, state)
        return

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç —Ç–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    if user_choice == "‚ûï –î–æ–¥–∞—Ç–∏ –ß–µ–ª–µ–Ω–¥–∂":
        new_main_text = "Feature to add challenges is under development."
        new_main_keyboard = get_challenges_menu()
        new_state = MenuStates.CHALLENGES_MENU
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "üè† Main Navigation"
        new_main_keyboard = get_navigation_menu()
        new_interactive_text = "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª —É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó"
        new_state = MenuStates.NAVIGATION_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_challenges_menu()
        new_state = MenuStates.CHALLENGES_MENU

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é
    try:
        main_message = await bot.send_message(
            chat_id=message.chat.id,
            text=new_main_text,
            reply_markup=new_main_keyboard
        )
        new_bot_message_id = main_message.message_id
    except Exception as e:
        logger.error(f"Failed to send new Challenges menu: {e}")
        await handle_error(bot, message.chat.id, GENERIC_ERROR_MESSAGE_TEXT, state)
        return

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text="–ß–µ–ª–µ–Ω–¥–∂—ñ –º–µ–Ω—é",
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Guides"
@router.message(F.text == MenuButton.GUIDES.value, state=MenuStates.MAIN_MENU)
async def handle_guides(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected Guides")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ —Å—Ç–∞–Ω—É
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        await handle_error(bot, message.chat.id, MAIN_MENU_ERROR_TEXT, state)
        return

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é Guides
    new_bot_message_id = await send_new_menu(bot, message.chat.id, GUIDES_TEXT, get_guides_menu(), state)
    if not new_bot_message_id:
        return

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text="–ú–µ–Ω—é –ì–∞–π–¥—ñ–≤",
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, MenuStates.GUIDES_MENU)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –º–µ–Ω—é "Guides Menu"
@router.message(MenuStates.GUIDES_MENU)
async def handle_guides_menu_buttons(message: Message, state: FSMContext, bot: Bot):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected {user_choice} in Guides Menu")

    await safe_delete_message(bot, message.chat.id, message.message_id)

    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        await handle_error(bot, message.chat.id, MAIN_MENU_ERROR_TEXT, state)
        return

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç —Ç–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    if user_choice == MenuButton.NEW_GUIDES.value:
        new_main_text = NEW_GUIDES_TEXT
    elif user_choice == MenuButton.POPULAR_GUIDES.value:
        new_main_text = POPULAR_GUIDES_TEXT
    elif user_choice == MenuButton.BEGINNER_GUIDES.value:
        new_main_text = BEGINNER_GUIDES_TEXT
    elif user_choice == MenuButton.ADVANCED_TECHNIQUES.value:
        new_main_text = ADVANCED_TECHNIQUES_TEXT
    elif user_choice == MenuButton.TEAMPLAY_GUIDES.value:
        new_main_text = TEAMPLAY_GUIDES_TEXT
    elif user_choice == MenuButton.M6.value:
        new_main_text = M6_TEXT
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "üè† Main Navigation"
        new_main_keyboard = get_navigation_menu()
        new_interactive_text = "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª —É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó"
        new_state = MenuStates.NAVIGATION_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_guides_menu()

    if user_choice != MenuButton.BACK.value:
        new_main_keyboard = get_guides_menu()
        new_state = MenuStates.GUIDES_MENU

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é
    try:
        main_message = await bot.send_message(
            chat_id=message.chat.id,
            text=new_main_text,
            reply_markup=new_main_keyboard
        )
        new_bot_message_id = main_message.message_id
    except Exception as e:
        logger.error(f"Failed to send new Guides menu: {e}")
        await handle_error(bot, message.chat.id, GENERIC_ERROR_MESSAGE_TEXT, state)
        return

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text=new_interactive_text if 'new_interactive_text' in locals() else "–ú–µ–Ω—é –ì–∞–π–¥—ñ–≤",
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Bust"
@router.message(F.text == MenuButton.BUST.value, state=MenuStates.MAIN_MENU)
async def handle_bust(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected Bust")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ —Å—Ç–∞–Ω—É
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        await handle_error(bot, message.chat.id, MAIN_MENU_ERROR_TEXT, state)
        return

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é Bust
    new_bot_message_id = await send_new_menu(bot, message.chat.id, BUST_TEXT, get_bust_menu(), state)
    if not new_bot_message_id:
        return

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text="–ú–µ–Ω—é Bust",
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, MenuStates.BUST_MENU)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –º–µ–Ω—é "Bust Menu"
@router.message(MenuStates.BUST_MENU)
async def handle_bust_menu_buttons(message: Message, state: FSMContext, bot: Bot):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected {user_choice} in Bust Menu")

    await safe_delete_message(bot, message.chat.id, message.message_id)

    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        await handle_error(bot, message.chat.id, MAIN_MENU_ERROR_TEXT, state)
        return

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç —Ç–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    if user_choice == "üî• –ü—ñ–¥–≤–∏—â–∏—Ç–∏ –ë—É—Å—Ç":
        new_main_text = "Feature to increase bust is under development."
        new_main_keyboard = get_bust_menu()
        new_state = MenuStates.BUST_MENU
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "üè† Main Navigation"
        new_main_keyboard = get_navigation_menu()
        new_interactive_text = "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª —É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó"
        new_state = MenuStates.NAVIGATION_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_bust_menu()
        new_state = MenuStates.BUST_MENU

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é
    try:
        main_message = await bot.send_message(
            chat_id=message.chat.id,
            text=new_main_text,
            reply_markup=new_main_keyboard
        )
        new_bot_message_id = main_message.message_id
    except Exception as e:
        logger.error(f"Failed to send new Bust menu: {e}")
        await handle_error(bot, message.chat.id, GENERIC_ERROR_MESSAGE_TEXT, state)
        return

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text="–ú–µ–Ω—é Bust",
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Teams"
@router.message(F.text == MenuButton.TEAMS.value, state=MenuStates.MAIN_MENU)
async def handle_teams(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected Teams")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ —Å—Ç–∞–Ω—É
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        await handle_error(bot, message.chat.id, MAIN_MENU_ERROR_TEXT, state)
        return

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é Teams
    new_bot_message_id = await send_new_menu(bot, message.chat.id, TEAMS_TEXT, get_teams_menu(), state)
    if not new_bot_message_id:
        return

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text="–ú–µ–Ω—é Teams",
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, MenuStates.TEAMS_MENU)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –º–µ–Ω—é "Teams Menu"
@router.message(MenuStates.TEAMS_MENU)
async def handle_teams_menu_buttons(message: Message, state: FSMContext, bot: Bot):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected {user_choice} in Teams Menu")

    await safe_delete_message(bot, message.chat.id, message.message_id)

    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        await handle_error(bot, message.chat.id, MAIN_MENU_ERROR_TEXT, state)
        return

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç —Ç–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    if user_choice == MenuButton.CREATE_TEAM.value:
        new_main_text = "Feature to create a team is under development."
        new_main_keyboard = get_teams_menu()
        new_state = MenuStates.TEAMS_MENU
    elif user_choice == MenuButton.VIEW_TEAMS.value:
        new_main_text = "Feature to view teams is under development."
        new_main_keyboard = get_teams_menu()
        new_state = MenuStates.TEAMS_MENU
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "üè† Main Navigation"
        new_main_keyboard = get_navigation_menu()
        new_interactive_text = "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª —É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó"
        new_state = MenuStates.NAVIGATION_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_teams_menu()
        new_state = MenuStates.TEAMS_MENU

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é
    try:
        main_message = await bot.send_message(
            chat_id=message.chat.id,
            text=new_main_text,
            reply_markup=new_main_keyboard
        )
        new_bot_message_id = main_message.message_id
    except Exception as e:
        logger.error(f"Failed to send new Teams menu: {e}")
        await handle_error(bot, message.chat.id, GENERIC_ERROR_MESSAGE_TEXT, state)
        return

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text="–ú–µ–Ω—é Teams",
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Trading"
@router.message(F.text == MenuButton.TRADING.value, state=MenuStates.MAIN_MENU)
async def handle_trading(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected Trading")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ —Å—Ç–∞–Ω—É
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        await handle_error(bot, message.chat.id, MAIN_MENU_ERROR_TEXT, state)
        return

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é Trading
    new_bot_message_id = await send_new_menu(bot, message.chat.id, TRADING_TEXT, get_trading_menu(), state)
    if not new_bot_message_id:
        return

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text="–ú–µ–Ω—é Trading",
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, MenuStates.TRADING_MENU)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –º–µ–Ω—é "Trading Menu"
@router.message(MenuStates.TRADING_MENU)
async def handle_trading_menu_buttons(message: Message, state: FSMContext, bot: Bot):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected {user_choice} in Trading Menu")

    await safe_delete_message(bot, message.chat.id, message.message_id)

    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        await handle_error(bot, message.chat.id, MAIN_MENU_ERROR_TEXT, state)
        return

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç —Ç–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    if user_choice == MenuButton.CREATE_TRADE.value:
        new_main_text = "–§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ!"
        new_main_keyboard = get_trading_menu()
        new_state = MenuStates.TRADING_MENU
    elif user_choice == MenuButton.VIEW_TRADES.value:
        new_main_text = "–û—Å—å –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç–æ—Ä–≥—ñ–≤–ª—ñ:"
        new_main_keyboard = get_trading_menu()
        new_state = MenuStates.TRADING_MENU
    elif user_choice == MenuButton.MANAGE_TRADES.value:
        new_main_text = "–§—É–Ω–∫—Ü—ñ—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–æ—Ä–≥—ñ–≤–ª—è–º–∏ —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ!"
        new_main_keyboard = get_trading_menu()
        new_state = MenuStates.TRADING_MENU
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "üè† Main Navigation"
        new_main_keyboard = get_navigation_menu()
        new_interactive_text = "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª —É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó"
        new_state = MenuStates.NAVIGATION_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_trading_menu()
        new_state = MenuStates.TRADING_MENU

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é
    try:
        main_message = await bot.send_message(
            chat_id=message.chat.id,
            text=new_main_text,
            reply_markup=new_main_keyboard
        )
        new_bot_message_id = main_message.message_id
    except Exception as e:
        logger.error(f"Failed to send new Trading menu: {e}")
        await handle_error(bot, message.chat.id, GENERIC_ERROR_MESSAGE_TEXT, state)
        return

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text="–ú–µ–Ω—é Trading",
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Settings"
@router.message(F.text == MenuButton.SETTINGS.value, state=MenuStates.MAIN_MENU)
async def handle_settings(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected Settings")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ —Å—Ç–∞–Ω—É
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        await handle_error(bot, message.chat.id, MAIN_MENU_ERROR_TEXT, state)
        return

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é Settings
    new_bot_message_id = await send_new_menu(bot, message.chat.id, "‚öôÔ∏è Settings", get_settings_menu(), state)
    if not new_bot_message_id:
        return

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text="‚öôÔ∏è Settings Menu",
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, MenuStates.SETTINGS_SUBMENU)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –º–µ–Ω—é "Settings Submenu"
@router.message(MenuStates.SETTINGS_SUBMENU)
async def handle_settings_menu_buttons(message: Message, state: FSMContext, bot: Bot):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected {user_choice} in Settings Menu")

    await safe_delete_message(bot, message.chat.id, message.message_id)

    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        await handle_error(bot, message.chat.id, MAIN_MENU_ERROR_TEXT, state)
        return

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç —Ç–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    if user_choice == MenuButton.LANGUAGE.value:
        new_main_text = LANGUAGE_SELECTION_TEXT
        new_main_keyboard = get_language_menu()
        new_state = MenuStates.SELECT_LANGUAGE
    elif user_choice == MenuButton.CHANGE_USERNAME.value:
        new_main_text = "‚ÑπÔ∏è Enter new Username:"
        new_main_keyboard = ReplyKeyboardRemove()
        try:
            await bot.send_message(chat_id=message.chat.id, text=new_main_text, reply_markup=new_main_keyboard)
            await state.set_state(MenuStates.CHANGE_USERNAME)
            await increment_step(state)
        except Exception as e:
            logger.error(f"Failed to send Change Username prompt: {e}")
            await handle_error(bot, message.chat.id, GENERIC_ERROR_MESSAGE_TEXT, state)
        return
    elif user_choice == MenuButton.UPDATE_ID.value:
        new_main_text = UPDATE_ID_SUCCESS_TEXT
        new_main_keyboard = get_settings_menu()
        new_state = MenuStates.SETTINGS_SUBMENU
    elif user_choice == MenuButton.NOTIFICATIONS.value:
        new_main_text = NOTIFICATIONS_SETTINGS_TEXT
        new_main_keyboard = get_settings_menu()
        new_state = MenuStates.SETTINGS_SUBMENU
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "ü™™ My Profile"
        new_main_keyboard = get_profile_menu()
        new_interactive_text = "ü™™ My Profile Menu"
        new_state = MenuStates.PROFILE_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_settings_menu()
        new_state = MenuStates.SETTINGS_SUBMENU

    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —Ç–∞ —Ç–µ–∫—Å—Ç—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if user_choice not in [MenuButton.LANGUAGE.value, MenuButton.CHANGE_USERNAME.value, 
                           MenuButton.UPDATE_ID.value, MenuButton.NOTIFICATIONS.value, MenuButton.BACK.value]:
        new_interactive_text = "‚öôÔ∏è Settings Menu"

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é
    try:
        main_message = await bot.send_message(
            chat_id=message.chat.id,
            text=new_main_text,
            reply_markup=new_main_keyboard
        )
        new_bot_message_id = main_message.message_id
    except Exception as e:
        logger.error(f"Failed to send new Settings menu: {e}")
        await handle_error(bot, message.chat.id, GENERIC_ERROR_MESSAGE_TEXT, state)
        return

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ –Ω–µ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –∑–º—ñ–Ω–∞ —Å—Ç–∞–Ω—É
    if user_choice not in [MenuButton.CHANGE_USERNAME.value]:
        await check_and_edit_message(
            bot=bot,
            chat_id=message.chat.id,
            message_id=interactive_message_id,
            new_text=new_interactive_text if 'new_interactive_text' in locals() else "‚öôÔ∏è Settings Menu",
            new_keyboard=get_generic_inline_keyboard(),
            state=state
        )

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —Ç–∞ –¥–∞–Ω–∏—Ö
    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏
@router.message(MenuStates.SELECT_LANGUAGE)
async def handle_select_language(message: Message, state: FSMContext, bot: Bot):
    selected_language = message.text
    logger.info(f"User {message.from_user.id} selected language: {selected_language}")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –¢—É—Ç —Ä–µ–∞–ª—ñ–∑—É–π—Ç–µ –ª–æ–≥—ñ–∫—É –∑–º—ñ–Ω–∏ –º–æ–≤–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    # –ü—Ä–∏–∫–ª–∞–¥:
    # user_id = message.from_user.id
    # async with db.begin():
    #     user = await db.execute(select(models.user.User).where(models.user.User.telegram_id == user_id))
    #     user = user.scalars().first()
    #     if user:
    #         user.language = selected_language
    #         await db.commit()
    #         response_text = f"–Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {selected_language}."
    #     else:
    #         response_text = "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø—Ä–∞–≤–∏–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:
    try:
        response_text = f"–Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {selected_language}."
        await bot.send_message(
            chat_id=message.chat.id,
            text=response_text,
            reply_markup=get_generic_inline_keyboard()
        )
    except Exception as e:
        logger.error(f"Failed to send language change confirmation: {e}")
        await handle_error(bot, message.chat.id, GENERIC_ERROR_MESSAGE_TEXT, state)
        return

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –º–µ–Ω—é Settings Submenu
    try:
        settings_message = await bot.send_message(
            chat_id=message.chat.id,
            text="‚öôÔ∏è Settings",
            reply_markup=get_settings_menu()
        )
        await state.update_data(bot_message_id=settings_message.message_id)
        await increment_step(state)
        await transition_state(state, MenuStates.SETTINGS_SUBMENU)
    except Exception as e:
        logger.error(f"Failed to send Settings menu after language change: {e}")
        await handle_error(bot, message.chat.id, GENERIC_ERROR_MESSAGE_TEXT, state)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∑–º—ñ–Ω–∏ —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@router.message(MenuStates.CHANGE_USERNAME)
async def handle_change_username(message: Message, state: FSMContext, bot: Bot):
    current_state = await state.get_state()
    if current_state != MenuStates.CHANGE_USERNAME.state:
        return

    new_username = message.text.strip()
    logger.info(f"User {message.from_user.id} is changing username to: {new_username}")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –¢—É—Ç —Ä–µ–∞–ª—ñ–∑—É–π—Ç–µ –ª–æ–≥—ñ–∫—É –∑–º—ñ–Ω–∏ —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    # –ü—Ä–∏–∫–ª–∞–¥:
    # user_id = message.from_user.id
    # async with db.begin():
    #     user = await db.execute(select(models.user.User).where(models.user.User.telegram_id == user_id))
    #     user = user.scalars().first()
    #     if user:
    #         user.username = new_username
    #         await db.commit()
    #         response_text = CHANGE_USERNAME_RESPONSE_TEXT.format(new_username=new_username)
    #     else:
    #         response_text = "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø—Ä–∞–≤–∏–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:
    try:
        response_text = f"Username changed to {new_username}."
        await bot.send_message(
            chat_id=message.chat.id,
            text=response_text,
            reply_markup=get_generic_inline_keyboard()
        )
    except Exception as e:
        logger.error(f"Failed to send username change confirmation: {e}")
        await handle_error(bot, message.chat.id, GENERIC_ERROR_MESSAGE_TEXT, state)
        return

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –º–µ–Ω—é Settings Submenu
    try:
        settings_message = await bot.send_message(
            chat_id=message.chat.id,
            text="‚öôÔ∏è Settings",
            reply_markup=get_settings_menu()
        )
        await state.update_data(bot_message_id=settings_message.message_id)
        await increment_step(state)
        await transition_state(state, MenuStates.SETTINGS_SUBMENU)
    except Exception as e:
        logger.error(f"Failed to send Settings menu after changing username: {e}")
        await handle_error(bot, message.chat.id, GENERIC_ERROR_MESSAGE_TEXT, state)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Help"
@router.message(F.text == MenuButton.HELP.value, state=MenuStates.MAIN_MENU)
async def handle_help(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected Help")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ —Å—Ç–∞–Ω—É
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        await handle_error(bot, message.chat.id, MAIN_MENU_ERROR_TEXT, state)
        return

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é Help
    new_bot_message_id = await send_new_menu(bot, message.chat.id, "‚ùì Help", get_help_menu(), state)
    if not new_bot_message_id:
        return

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text="‚ùì Help Menu",
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, MenuStates.HELP_SUBMENU)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –º–µ–Ω—é "Help Submenu"
@router.message(MenuStates.HELP_SUBMENU)
async def handle_help_menu_buttons(message: Message, state: FSMContext, bot: Bot):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected {user_choice} in Help Menu")

    await safe_delete_message(bot, message.chat.id, message.message_id)

    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        await handle_error(bot, message.chat.id, MAIN_MENU_ERROR_TEXT, state)
        return

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç —Ç–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    if user_choice == MenuButton.INSTRUCTIONS.value:
        new_main_text = INSTRUCTIONS_TEXT
    elif user_choice == MenuButton.FAQ.value:
        new_main_text = FAQ_TEXT
    elif user_choice == MenuButton.HELP_SUPPORT.value:
        new_main_text = HELP_SUPPORT_TEXT
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "ü™™ My Profile"
        new_main_keyboard = get_profile_menu()
        new_interactive_text = "ü™™ My Profile Menu"
        new_state = MenuStates.PROFILE_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_help_menu()
        new_state = MenuStates.HELP_SUBMENU

    if user_choice not in [MenuButton.BACK.value]:
        new_main_keyboard = get_help_menu()
        new_state = MenuStates.HELP_SUBMENU

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é
    try:
        main_message = await bot.send_message(
            chat_id=message.chat.id,
            text=new_main_text,
            reply_markup=new_main_keyboard
        )
        new_bot_message_id = main_message.message_id
    except Exception as e:
        logger.error(f"Failed to send new Help menu: {e}")
        await handle_error(bot, message.chat.id, GENERIC_ERROR_MESSAGE_TEXT, state)
        return

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ –Ω–µ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –∑–º—ñ–Ω–∞ —Å—Ç–∞–Ω—É
    if user_choice not in [MenuButton.BACK.value]:
        await check_and_edit_message(
            bot=bot,
            chat_id=message.chat.id,
            message_id=interactive_message_id,
            new_text="‚ùì Help Menu",
            new_keyboard=get_generic_inline_keyboard(),
            state=state
        )

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —Ç–∞ –¥–∞–Ω–∏—Ö
    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Help Support"
@router.message(F.text == MenuButton.HELP_SUPPORT.value, state=MenuStates.HELP_SUBMENU)
async def handle_help_support(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected Help Support")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    try:
        help_support_message = await bot.send_message(
            chat_id=message.chat.id,
            text=HELP_SUPPORT_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        await state.update_data(bot_message_id=help_support_message.message_id)
        await increment_step(state)
    except Exception as e:
        logger.error(f"Failed to send Help Support: {e}")
        await handle_error(bot, message.chat.id, GENERIC_ERROR_MESSAGE_TEXT, state)
        return

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –º–µ–Ω—é Help Submenu
    try:
        help_submenu_message = await bot.send_message(
            chat_id=message.chat.id,
            text="‚ùì Help Menu",
            reply_markup=get_help_menu()
        )
        await state.update_data(bot_message_id=help_submenu_message.message_id)
        await increment_step(state)
        await transition_state(state, MenuStates.HELP_SUBMENU)
    except Exception as e:
        logger.error(f"Failed to send Help Submenu after Help Support: {e}")
        await handle_error(bot, message.chat.id, GENERIC_ERROR_MESSAGE_TEXT, state)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Update ID"
@router.message(F.text == MenuButton.UPDATE_ID.value, state=MenuStates.SETTINGS_SUBMENU)
async def handle_update_id(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected Update ID")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –¢—É—Ç —Ä–µ–∞–ª—ñ–∑—É–π—Ç–µ –ª–æ–≥—ñ–∫—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è ID, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    # –ü—Ä–∏–∫–ª–∞–¥:
    # user_id = message.from_user.id
    # async with db.begin():
    #     user = await db.execute(select(models.user.User).where(models.user.User.telegram_id == user_id))
    #     user = user.scalars().first()
    #     if user:
    #         user.id = new_id  # –ü—Ä–∏–∫–ª–∞–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    #         await db.commit()
    #         response_text = UPDATE_ID_SUCCESS_TEXT
    #     else:
    #         response_text = "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø—Ä–∞–≤–∏–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:
    try:
        response_text = UPDATE_ID_SUCCESS_TEXT
        await bot.send_message(
            chat_id=message.chat.id,
            text=response_text,
            reply_markup=get_generic_inline_keyboard()
        )
    except Exception as e:
        logger.error(f"Failed to send Update ID confirmation: {e}")
        await handle_error(bot, message.chat.id, GENERIC_ERROR_MESSAGE_TEXT, state)
        return

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –º–µ–Ω—é Settings Submenu
    try:
        settings_message = await bot.send_message(
            chat_id=message.chat.id,
            text="‚öôÔ∏è Settings",
            reply_markup=get_settings_menu()
        )
        await state.update_data(bot_message_id=settings_message.message_id)
        await increment_step(state)
        await transition_state(state, MenuStates.SETTINGS_SUBMENU)
    except Exception as e:
        logger.error(f"Failed to send Settings menu after updating ID: {e}")
        await handle_error(bot, message.chat.id, GENERIC_ERROR_MESSAGE_TEXT, state)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Notifications"
@router.message(F.text == MenuButton.NOTIFICATIONS.value, state=MenuStates.SETTINGS_SUBMENU)
async def handle_notifications(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected Notifications")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    try:
        await bot.send_message(
            chat_id=message.chat.id,
            text=NOTIFICATIONS_SETTINGS_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
    except Exception as e:
        logger.error(f"Failed to send Notifications settings: {e}")
        await handle_error(bot, message.chat.id, GENERIC_ERROR_MESSAGE_TEXT, state)
        return

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –º–µ–Ω—é Settings Submenu
    try:
        settings_message = await bot.send_message(
            chat_id=message.chat.id,
            text="‚öôÔ∏è Settings",
            reply_markup=get_settings_menu()
        )
        await state.update_data(bot_message_id=settings_message.message_id)
        await increment_step(state)
        await transition_state(state, MenuStates.SETTINGS_SUBMENU)
    except Exception as e:
        logger.error(f"Failed to send Settings menu after notifications: {e}")
        await handle_error(bot, message.chat.id, GENERIC_ERROR_MESSAGE_TEXT, state)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Instructions"
@router.message(F.text == MenuButton.INSTRUCTIONS.value, state=MenuStates.MAIN_MENU)
async def handle_instructions(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected Instructions")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    try:
        instructions_message = await bot.send_message(
            chat_id=message.chat.id,
            text=INSTRUCTIONS_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        await state.update_data(bot_message_id=instructions_message.message_id)
        await increment_step(state)
    except Exception as e:
        logger.error(f"Failed to send Instructions: {e}")
        await handle_error(bot, message.chat.id, GENERIC_ERROR_MESSAGE_TEXT, state)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "FAQ"
@router.message(F.text == MenuButton.FAQ.value, state=MenuStates.MAIN_MENU)
async def handle_faq(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected FAQ")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    try:
        faq_message = await bot.send_message(
            chat_id=message.chat.id,
            text=FAQ_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        await state.update_data(bot_message_id=faq_message.message_id)
        await increment_step(state)
    except Exception as e:
        logger.error(f"Failed to send FAQ: {e}")
        await handle_error(bot, message.chat.id, GENERIC_ERROR_MESSAGE_TEXT, state)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Advanced Techniques"
@router.message(F.text == MenuButton.ADVANCED_TECHNIQUES.value, state=MenuStates.GUIDES_MENU)
async def handle_advanced_techniques(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected Advanced Techniques")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    try:
        advanced_techniques_message = await bot.send_message(
            chat_id=message.chat.id,
            text=ADVANCED_TECHNIQUES_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        await state.update_data(bot_message_id=advanced_techniques_message.message_id)
        await increment_step(state)
    except Exception as e:
        logger.error(f"Failed to send Advanced Techniques info: {e}")
        await handle_error(bot, message.chat.id, GENERIC_ERROR_MESSAGE_TEXT, state)

    # –ú–æ–∂–ª–∏–≤–æ, –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–æ–≤–∏–π —Å—Ç–∞–Ω –∞–±–æ –∑–∞–ª–∏—à–∏—Ç–∏ —è–∫ —î

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "My Team"
@router.message(F.text == MenuButton.MY_TEAM.value, state=MenuStates.MAIN_MENU)
async def handle_my_team(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected My Team")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ —Å—Ç–∞–Ω—É
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        await handle_error(bot, message.chat.id, MAIN_MENU_ERROR_TEXT, state)
        return

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é My Team
    new_bot_message_id = await send_new_menu(bot, message.chat.id, MY_TEAM_TEXT, get_my_team_menu(), state)
    if not new_bot_message_id:
        return

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text="ü™™ My Team Menu",
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, MenuStates.MY_TEAM_MENU)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –º–µ–Ω—é "My Team Menu"
@router.message(MenuStates.MY_TEAM_MENU)
async def handle_my_team_menu_buttons(message: Message, state: FSMContext, bot: Bot):
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected {user_choice} in My Team Menu")

    await safe_delete_message(bot, message.chat.id, message.message_id)

    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        await handle_error(bot, message.chat.id, MAIN_MENU_ERROR_TEXT, state)
        return

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç —Ç–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    if user_choice == "‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ö–æ–º–∞–Ω–¥—É":
        new_main_text = "Feature to create a team is under development."
        new_main_keyboard = get_my_team_menu()
        new_state = MenuStates.MY_TEAM_MENU
    elif user_choice == "üëÄ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ö–æ–º–∞–Ω–¥–∏":
        new_main_text = "Feature to view teams is under development."
        new_main_keyboard = get_my_team_menu()
        new_state = MenuStates.MY_TEAM_MENU
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "ü™™ My Profile"
        new_main_keyboard = get_profile_menu()
        new_interactive_text = "ü™™ My Profile Menu"
        new_state = MenuStates.PROFILE_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_my_team_menu()
        new_state = MenuStates.MY_TEAM_MENU

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é
    try:
        main_message = await bot.send_message(
            chat_id=message.chat.id,
            text=new_main_text,
            reply_markup=new_main_keyboard
        )
        new_bot_message_id = main_message.message_id
    except Exception as e:
        logger.error(f"Failed to send new My Team menu: {e}")
        await handle_error(bot, message.chat.id, GENERIC_ERROR_MESSAGE_TEXT, state)
        return

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text=new_interactive_text if 'new_interactive_text' in locals() else "ü™™ My Team Menu",
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Language" —É –º–µ–Ω—é "Settings Submenu"
@router.message(F.text == MenuButton.LANGUAGE.value, state=MenuStates.SETTINGS_SUBMENU)
async def handle_language_selection(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected Language")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é –≤–∏–±–æ—Ä—É –º–æ–≤–∏
    new_bot_message_id = await send_new_menu(bot, message.chat.id, LANGUAGE_SELECTION_TEXT, get_language_menu(), state)
    if not new_bot_message_id:
        return

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    data = await state.get_data()
    old_bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    if old_bot_message_id:
        await safe_delete_message(bot, message.chat.id, old_bot_message_id)

    if interactive_message_id:
        await check_and_edit_message(
            bot=bot,
            chat_id=message.chat.id,
            message_id=interactive_message_id,
            new_text="‚öôÔ∏è Settings Menu",
            new_keyboard=get_generic_inline_keyboard(),
            state=state
        )

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, MenuStates.SELECT_LANGUAGE)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Back" —É —Ä—ñ–∑–Ω–∏—Ö –º–µ–Ω—é
@router.message(F.text == MenuButton.BACK.value)
async def handle_back(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected Back")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞–Ω –∑ –¥–∞–Ω–∏—Ö (–º–æ–∂–ª–∏–≤–æ, –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –π–æ–≥–æ —Ä–∞–Ω—ñ—à–µ)
    data = await state.get_data()
    previous_state = data.get('previous_state', MenuStates.MAIN_MENU)

    if previous_state == MenuStates.NAVIGATION_MENU:
        new_main_text = "üè† Main Navigation"
        new_main_keyboard = get_navigation_menu()
        new_interactive_text = "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª —É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó"
        new_state = MenuStates.NAVIGATION_MENU
    elif previous_state == MenuStates.CHALLENGES_MENU:
        new_main_text = CHALLENGES_TEXT
        new_main_keyboard = get_challenges_menu()
        new_interactive_text = "–ß–µ–ª–µ–Ω–¥–∂—ñ –º–µ–Ω—é"
        new_state = MenuStates.CHALLENGES_MENU
    elif previous_state == MenuStates.GUIDES_MENU:
        new_main_text = GUIDES_TEXT
        new_main_keyboard = get_guides_menu()
        new_interactive_text = "–ú–µ–Ω—é –ì–∞–π–¥—ñ–≤"
        new_state = MenuStates.GUIDES_MENU
    elif previous_state == MenuStates.BUST_MENU:
        new_main_text = BUST_TEXT
        new_main_keyboard = get_bust_menu()
        new_interactive_text = "–ú–µ–Ω—é Bust"
        new_state = MenuStates.BUST_MENU
    elif previous_state == MenuStates.TEAMS_MENU:
        new_main_text = TEAMS_TEXT
        new_main_keyboard = get_teams_menu()
        new_interactive_text = "–ú–µ–Ω—é Teams"
        new_state = MenuStates.TEAMS_MENU
    elif previous_state == MenuStates.TRADING_MENU:
        new_main_text = TRADING_TEXT
        new_main_keyboard = get_trading_menu()
        new_interactive_text = "–ú–µ–Ω—é Trading"
        new_state = MenuStates.TRADING_MENU
    elif previous_state == MenuStates.SETTINGS_SUBMENU:
        new_main_text = "‚öôÔ∏è Settings"
        new_main_keyboard = get_settings_menu()
        new_interactive_text = "‚öôÔ∏è Settings Menu"
        new_state = MenuStates.SETTINGS_SUBMENU
    elif previous_state == MenuStates.HELP_SUBMENU:
        new_main_text = "‚ùì Help"
        new_main_keyboard = get_help_menu()
        new_interactive_text = "‚ùì Help Menu"
        new_state = MenuStates.HELP_SUBMENU
    elif previous_state == MenuStates.MY_TEAM_MENU:
        new_main_text = "ü™™ My Team"
        new_main_keyboard = get_my_team_menu()
        new_interactive_text = "ü™™ My Team Menu"
        new_state = MenuStates.MY_TEAM_MENU
    else:
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        new_main_text = "üè† Main Navigation"
        new_main_keyboard = get_navigation_menu()
        new_interactive_text = "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª —É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó"
        new_state = MenuStates.NAVIGATION_MENU

    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–æ–ø–æ–º—ñ–∂–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
    await handle_back_action(bot, message, state, new_state, new_main_text, new_main_keyboard)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Help Support" —É —Ä—ñ–∑–Ω–∏—Ö –º–µ–Ω—é
@router.message(F.text == MenuButton.HELP_SUPPORT.value, state=MenuStates.HELP_SUBMENU)
async def handle_help_support(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} selected Help Support")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    try:
        help_support_message = await bot.send_message(
            chat_id=message.chat.id,
            text=HELP_SUPPORT_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        await state.update_data(bot_message_id=help_support_message.message_id)
        await increment_step(state)
    except Exception as e:
        logger.error(f"Failed to send Help Support: {e}")
        await handle_error(bot, message.chat.id, GENERIC_ERROR_MESSAGE_TEXT, state)
        return

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –º–µ–Ω—é Help Submenu
    try:
        help_submenu_message = await bot.send_message(
            chat_id=message.chat.id,
            text="‚ùì Help Menu",
            reply_markup=get_help_menu()
        )
        await state.update_data(bot_message_id=help_submenu_message.message_id)
        await increment_step(state)
        await transition_state(state, MenuStates.HELP_SUBMENU)
    except Exception as e:
        logger.error(f"Failed to send Help Submenu after Help Support: {e}")
        await handle_error(bot, message.chat.id, GENERIC_ERROR_MESSAGE_TEXT, state)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "My Profile" —É –º–µ–Ω—é "Back" –¥—ñ–π
@router.message(F.text == "ü™™ My Profile", state=MenuStates.BACK_FROM_PROFILE)
async def handle_my_profile_back(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} navigated back to My Profile")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é –ø—Ä–æ—Ñ—ñ–ª—é
    new_bot_message_id = await send_new_menu(bot, message.chat.id, "ü™™ My Profile", get_profile_menu(), state)
    if not new_bot_message_id:
        return

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    data = await state.get_data()
    old_bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    if old_bot_message_id:
        await safe_delete_message(bot, message.chat.id, old_bot_message_id)

    if interactive_message_id:
        await check_and_edit_message(
            bot=bot,
            chat_id=message.chat.id,
            message_id=interactive_message_id,
            new_text="ü™™ My Profile Menu",
            new_keyboard=get_generic_inline_keyboard(),
            state=state
        )

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, MenuStates.PROFILE_MENU)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
def setup_missing_handlers(dp: Router):
    dp.include_router(router)
    # –Ø–∫—â–æ —É –≤–∞—Å —î —ñ–Ω—à—ñ —Ä–æ—É—Ç–µ—Ä–∏, –≤–∫–ª—é—á—ñ—Ç—å —ó—Ö —Ç—É—Ç, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:
    # dp.include_router(profile_router)