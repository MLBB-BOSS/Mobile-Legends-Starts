import logging
from aiogram import Router, F, Bot
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.filters import Command

from states import MenuStates, increment_step
from keyboards.menus import (
    MenuButton,
    # –û—Å–∫—ñ–ª—å–∫–∏ –º–∏ –ª–∏—à–∞—î–º–æ get_generic_inline_keyboard –¥–ª—è –ø–æ–º–∏–ª–æ–∫ —ñ –∫–æ—Ä–æ—Ç–∫–∏—Ö —ñ–Ω—Ñ–æ,
    # –∞–ª–µ –æ—Å–Ω–æ–≤–Ω–µ –º–µ–Ω—é –±–µ—Ä–µ–º–æ –∑ ReplyKeyboardMarkup-—Ñ—É–Ω–∫—Ü—ñ–π:
    get_generic_inline_keyboard,
    get_navigation_menu,
    get_challenges_menu,
    get_guides_menu,
    get_bust_menu,
    get_teams_menu,
    get_trading_menu,
    get_settings_menu,
    get_help_menu,
    get_my_team_menu,
    get_language_menu,
    get_profile_menu
)
from texts import (
    MAIN_MENU_ERROR_TEXT, UNKNOWN_COMMAND_TEXT, GENERIC_ERROR_MESSAGE_TEXT,
    CHALLENGES_TEXT, GUIDES_TEXT, BUST_TEXT, TEAMS_TEXT, TRADING_TEXT,
    NEW_GUIDES_TEXT, M6_TEXT, POPULAR_GUIDES_TEXT, BEGINNER_GUIDES_TEXT,
    ADVANCED_TECHNIQUES_TEXT, TEAMPLAY_GUIDES_TEXT,
    LANGUAGE_SELECTION_TEXT, UPDATE_ID_SUCCESS_TEXT, NOTIFICATIONS_SETTINGS_TEXT,
    INSTRUCTIONS_TEXT, FAQ_TEXT, HELP_SUPPORT_TEXT,
    MY_TEAM_TEXT
)
from handlers.base import safe_delete_message, check_and_edit_message, send_or_update_interactive_message

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()

async def transition_state(state: FSMContext, new_state: MenuStates):
    """
    –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É.
    """
    await state.clear()
    await state.set_state(new_state)


# ------------------------------ CHALLENGES ------------------------------

@router.message(F.text == MenuButton.CHALLENGES.value)
async def handle_challenges(message: Message, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ß–µ–ª–µ–Ω–¥–∂—ñ"
    """
    logger.info(f"User {message.from_user.id} selected Challenges")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑ –ø–∞–º‚Äô—è—Ç—ñ bot_message_id (–∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è) —Ç–∞ interactive_message_id (—ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ/—ñ–Ω–ª–∞–π–Ω).
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    # –Ø–∫—â–æ –Ω–µ–º–∞—î –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É —ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –≤ MAIN_MENU
    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            main_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                # –í –¥–∞–Ω–æ–º—É –≤–∏–ø–∞–¥–∫—É –º–æ–∂–Ω–∞ –∑–∞–ª–∏—à–∏—Ç–∏ —ñ–Ω–ª–∞–π–Ω –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É-–ø–æ–º–∏–ª–∫—É
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=main_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"Failed to send main menu error message: {e}")
        return

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ Reply-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é –¥–ª—è "–ß–µ–ª–µ–Ω–¥–∂—ñ–≤"
    try:
        challenges_message = await bot.send_message(
            chat_id=message.chat.id,
            text=CHALLENGES_TEXT,
            reply_markup=get_challenges_menu()  # ReplyKeyboardMarkup
        )
        new_bot_message_id = challenges_message.message_id
    except Exception as e:
        logger.error(f"Failed to send Challenges menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        return

    # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω–ª–∞–π–Ω-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—è–∫—â–æ –≤–æ–Ω–æ –±—É–ª–æ) —è–∫–∏–º–æ—Å—å —Ç–µ–∫—Å—Ç–æ–º, –∞–±–æ —Ä–æ–±–∏–º–æ "–∑–∞–≥–ª—É—à–∫—É"
    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text="–ß–µ–ª–µ–Ω–¥–∂—ñ –º–µ–Ω—é",  # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ, –¥–µ –∑–∞—Ä–∞–∑
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Å—Ç–∞–Ω—É CHALLENGES_MENU
    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, MenuStates.CHALLENGES_MENU)


@router.message(MenuStates.CHALLENGES_MENU)
async def handle_challenges_menu_buttons(message: Message, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –º–µ–Ω—é "–ß–µ–ª–µ–Ω–¥–∂—ñ"
    """
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected {user_choice} in Challenges Menu")

    await safe_delete_message(bot, message.chat.id, message.message_id)

    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            error_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=error_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"Failed to send main menu error message: {e}")
        return

    new_main_text = ""
    new_main_keyboard = None
    new_interactive_text = "–ß–µ–ª–µ–Ω–¥–∂—ñ –º–µ–Ω—é"
    new_state = MenuStates.CHALLENGES_MENU

    if user_choice == "‚ûï –î–æ–¥–∞—Ç–∏ –ß–µ–ª–µ–Ω–¥–∂":
        new_main_text = "Feature to add challenges is under development."
        new_main_keyboard = get_challenges_menu()
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "üè† Main Navigation"
        new_main_keyboard = get_navigation_menu()
        new_interactive_text = "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª —É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó"
        new_state = MenuStates.NAVIGATION_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_challenges_menu()

    try:
        if new_main_keyboard:
            main_message = await bot.send_message(
                chat_id=message.chat.id,
                text=new_main_text,
                reply_markup=new_main_keyboard
            )
            new_bot_message_id = main_message.message_id
        else:
            # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ Inline –∞–±–æ None
            await bot.send_message(
                chat_id=message.chat.id,
                text=new_main_text,
                reply_markup=get_generic_inline_keyboard()
            )
            new_bot_message_id = bot_message_id
    except Exception as e:
        logger.error(f"Failed to send new Challenges menu: {e}")
        return

    # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text=new_interactive_text,
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)


# ------------------------------ GUIDES ------------------------------

@router.message(F.text == MenuButton.GUIDES.value)
async def handle_guides(message: Message, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ì–∞–π–¥–∏"
    """
    logger.info(f"User {message.from_user.id} selected Guides")
    await safe_delete_message(bot, message.chat.id, message.message_id)

    # –ê–Ω–∞–ª–æ–≥—ñ—á–Ω–∞ –ª–æ–≥—ñ–∫–∞, —â–æ –π –≤–∏—â–µ
    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            main_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=main_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"Failed to send main menu error message: {e}")
        return

    try:
        guides_message = await bot.send_message(
            chat_id=message.chat.id,
            text=GUIDES_TEXT,
            reply_markup=get_guides_menu()  # ReplyKeyboardMarkup
        )
        new_bot_message_id = guides_message.message_id
    except Exception as e:
        logger.error(f"Failed to send Guides menu: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text=GENERIC_ERROR_MESSAGE_TEXT,
            reply_markup=get_generic_inline_keyboard()
        )
        return

    await safe_delete_message(bot, message.chat.id, bot_message_id)

    # –†–µ–¥–∞–≥—É—î–º–æ "—ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ" –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–∑–∞–ª–∏—à–∞—î—Ç—å—Å—è —è–∫ –∑–∞–≥–ª—É—à–∫–∞)
    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text="–ú–µ–Ω—é –ì–∞–π–¥—ñ–≤",
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, MenuStates.GUIDES_MENU)


@router.message(MenuStates.GUIDES_MENU)
async def handle_guides_menu_buttons(message: Message, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –º–µ–Ω—é "Guides Menu"
    """
    user_choice = message.text
    logger.info(f"User {message.from_user.id} selected {user_choice} in Guides Menu")

    await safe_delete_message(bot, message.chat.id, message.message_id)

    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')
    interactive_message_id = data.get('interactive_message_id')

    # –¢–∞ —Å–∞–º–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
    if not bot_message_id or not interactive_message_id:
        logger.error("bot_message_id –∞–±–æ interactive_message_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            error_message = await bot.send_message(
                chat_id=message.chat.id,
                text=MAIN_MENU_ERROR_TEXT,
                reply_markup=get_generic_inline_keyboard()
            )
            await state.update_data(bot_message_id=error_message.message_id)
            await transition_state(state, MenuStates.MAIN_MENU)
        except Exception as e:
            logger.error(f"Failed to send main menu error message: {e}")
        return

    new_main_text = ""
    new_main_keyboard = get_guides_menu()
    new_interactive_text = "–ú–µ–Ω—é –ì–∞–π–¥—ñ–≤"
    new_state = MenuStates.GUIDES_MENU

    if user_choice == MenuButton.NEW_GUIDES.value:
        new_main_text = NEW_GUIDES_TEXT
    elif user_choice == MenuButton.POPULAR_GUIDES.value:
        new_main_text = POPULAR_GUIDES_TEXT
    elif user_choice == MenuButton.BEGINNER_GUIDES.value:
        new_main_text = BEGINNER_GUIDES_TEXT
    elif user_choice == MenuButton.ADVANCED_TECHNIQUES.value:
        new_main_text = ADVANCED_TECHNIQUES_TEXT
    elif user_choice == MenuButton.TEAMPLAY_GUIDES.value:
        new_main_text = TEAMPLAY_GUIDES_TEXT
    elif user_choice == MenuButton.M6.value:
        new_main_text = M6_TEXT
    elif user_choice == MenuButton.BACK.value:
        new_main_text = "üè† Main Navigation"
        new_main_keyboard = get_navigation_menu()
        new_interactive_text = "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª —É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó"
        new_state = MenuStates.NAVIGATION_MENU
    else:
        new_main_text = UNKNOWN_COMMAND_TEXT
        new_main_keyboard = get_guides_menu()

    try:
        main_message = await bot.send_message(
            chat_id=message.chat.id,
            text=new_main_text,
            reply_markup=new_main_keyboard
        )
        new_bot_message_id = main_message.message_id
    except Exception as e:
        logger.error(f"Failed to send new Guides menu: {e}")
        return

    await safe_delete_message(bot, message.chat.id, bot_message_id)

    await check_and_edit_message(
        bot=bot,
        chat_id=message.chat.id,
        message_id=interactive_message_id,
        new_text=new_interactive_text,
        new_keyboard=get_generic_inline_keyboard(),
        state=state
    )

    await increment_step(state)
    await state.update_data(bot_message_id=new_bot_message_id)
    await transition_state(state, new_state)


# ------------------------------ BUST ------------------------------

@router.message(F.text == MenuButton.BUST.value)
async def handle_bust(message: Message, state: FSMContext, bot: Bot):
    ...
    # –ê–Ω–∞–ª–æ–≥—ñ—á–Ω–æ: –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–≤–∏—á–∞–π–Ω–µ –º–µ–Ω—é (Reply), —Ä–µ–¥–∞–≥—É—î–º–æ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ —è–∫ –∑–∞–≥–ª—É—à–∫—É.
    # –õ–æ–≥—ñ–∫–∞ —Ç–∞–∫–∞ –∂, —è–∫ —ñ –¥–ª—è Guides / Challenges.
    # –ó–∞–ª–∏—à–∏–≤—à–∏ –∫–æ–¥ –¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—É ‚Äì –≤–∏—â–µ –≤–∂–µ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–æ–≤–∞–Ω–æ, —è–∫ –∑–∞–º—ñ–Ω–∏—Ç–∏.


@router.message(MenuStates.BUST_MENU)
async def handle_bust_menu_buttons(message: Message, state: FSMContext, bot: Bot):
    ...
    # –ê–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –≤–∏–ø—Ä–∞–≤–ª—è—î–º–æ –ø—ñ–¥ Reply-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É.


# ------------------------------ TEAMS ------------------------------

@router.message(F.text == MenuButton.TEAMS.value)
async def handle_teams(message: Message, state: FSMContext, bot: Bot):
    ...
    # –¢–µ —Å–∞–º–µ –¥–ª—è –ö–æ–º–∞–Ω–¥


@router.message(MenuStates.TEAMS_MENU)
async def handle_teams_menu_buttons(message: Message, state: FSMContext, bot: Bot):
    ...
    # –¢–µ —Å–∞–º–µ –¥–ª—è –ø—ñ–¥–º–µ–Ω—é –∫–æ–º–∞–Ω–¥


# ------------------------------ TRADING ------------------------------

@router.message(F.text == MenuButton.TRADING.value)
async def handle_trading(message: Message, state: FSMContext, bot: Bot):
    ...
    # –¢–µ —Å–∞–º–µ


@router.message(MenuStates.TRADING_MENU)
async def handle_trading_menu_buttons(message: Message, state: FSMContext, bot: Bot):
    ...
    # –¢–µ —Å–∞–º–µ


# ------------------------------ SETTINGS ------------------------------

@router.message(F.text == MenuButton.SETTINGS.value)
async def handle_settings(message: Message, state: FSMContext, bot: Bot):
    ...
    # –ê–Ω–∞–ª–æ–≥—ñ—á–Ω–æ


@router.message(MenuStates.SETTINGS_SUBMENU)
async def handle_settings_menu_buttons(message: Message, state: FSMContext, bot: Bot):
    ...
    # –ê–Ω–∞–ª–æ–≥—ñ—á–Ω–æ


# ------------------------------ SELECT LANGUAGE ------------------------------

@router.message(MenuStates.SELECT_LANGUAGE)
async def handle_select_language(message: Message, state: FSMContext, bot: Bot):
    ...
    # –ê–Ω–∞–ª–æ–≥—ñ—á–Ω–æ, –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è ReplyKeyboard.


# ------------------------------ CHANGE USERNAME ------------------------------

@router.message(MenuStates.CHANGE_USERNAME)
async def handle_change_username(message: Message, state: FSMContext, bot: Bot):
    ...
    # –ê–Ω–∞–ª–æ–≥—ñ—á–Ω–æ


# ------------------------------ HELP ------------------------------

@router.message(F.text == MenuButton.HELP.value)
async def handle_help(message: Message, state: FSMContext, bot: Bot):
    ...
    # –¢–∞–∫ —Å–∞–º–æ, –ø—Ä–∏–∫–ª–∞–¥ —É–∂–µ —î –≤–∏—â–µ


@router.message(MenuStates.HELP_SUBMENU)
async def handle_help_menu_buttons(message: Message, state: FSMContext, bot: Bot):
    ...
    # –ê–Ω–∞–ª–æ–≥—ñ—á–Ω–æ


# ------------------------------ MY TEAM ------------------------------

@router.message(F.text == MenuButton.MY_TEAM.value)
async def handle_my_team(message: Message, state: FSMContext, bot: Bot):
    ...
    # –ü—Ä–∏–∫–ª–∞–¥ –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–∏–π, –≤—Å–µ —á–µ—Ä–µ–∑ ReplyKeyboard.


@router.message(MenuStates.MY_TEAM_MENU)
async def handle_my_team_menu_buttons(message: Message, state: FSMContext, bot: Bot):
    ...
    # –ê–Ω–∞–ª–æ–≥—ñ—á–Ω–æ


# ------------------------------ ADVANCED TECHNIQUES ------------------------------

@router.message(F.text == MenuButton.ADVANCED_TECHNIQUES.value)
async def handle_advanced_techniques(message: Message, state: FSMContext, bot: Bot):
    ...
    # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑ ReplyKeyboard –∞–±–æ get_generic_inline_keyboard, —è–∫—â–æ —Ü–µ –ª–∏—à–µ —Ç–∏–º—á–∞—Å–æ–≤–µ —ñ–Ω—Ñ–æ.


# ------------------------------ INSTRUCTIONS ------------------------------

@router.message(F.text == MenuButton.INSTRUCTIONS.value)
async def handle_instructions(message: Message, state: FSMContext, bot: Bot):
    ...
    # –¢–µ–∂ —Å–∞–º–µ


# ------------------------------ FAQ ------------------------------

@router.message(F.text == MenuButton.FAQ.value)
async def handle_faq(message: Message, state: FSMContext, bot: Bot):
    ...
    # –¢–µ–∂ —Å–∞–º–µ


# ------------------------------ HELP SUPPORT ------------------------------

@router.message(F.text == MenuButton.HELP_SUPPORT.value)
async def handle_help_support(message: Message, state: FSMContext, bot: Bot):
    ...
    # –¢–µ–∂ —Å–∞–º–µ


# ------------------------------ UPDATE ID ------------------------------

@router.message(F.text == MenuButton.UPDATE_ID.value)
async def handle_update_id(message: Message, state: FSMContext, bot: Bot):
    ...
    # –¢–∞–∫ —Å–∞–º–æ, –≤—Å–µ –º–µ–Ω—é –ª–∏—à–∞—î—Ç—å—Å—è ReplyKeyboard.


# ------------------------------ NOTIFICATIONS ------------------------------

@router.message(F.text == MenuButton.NOTIFICATIONS.value)
async def handle_notifications(message: Message, state: FSMContext, bot: Bot):
    ...
    # –ê–Ω–∞–ª–æ–≥—ñ—á–Ω–æ


# ------------------------------ SETUP MISSING HANDLERS ------------------------------

def setup_missing_handlers(dp: Router):
    """
    –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ü–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
    """
    dp.include_router(router)
    # –Ø–∫—â–æ —Ç—Ä–µ–±–∞, –ø—ñ–¥–∫–ª—é—á–∞–π—Ç–µ —ñ–Ω—à—ñ —Ä–æ—É—Ç–µ—Ä–∏