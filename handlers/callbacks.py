# handlers/callbacks.py

from aiogram import Router, F
from aiogram.types import CallbackQuery
from keyboards.inline_menus import CallbackData, get_main_inline_keyboard, get_heroes_inline_keyboard, get_guides_inline_keyboard
from utils.menu_messages import MenuMessages
from utils.message_formatter import MessageFormatter
import logging

router = Router()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@router.callback_query(F.data == CallbackData.HEROES.value)
async def process_heroes_menu(callback: CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –ü–µ—Ä—Å–æ–Ω–∞–∂—ñ"""
    user_id = callback.from_user.id
    logger.info(f"User {user_id} pressed heroes")
    
    menu_text = MenuMessages.get_heroes_menu_text()
    try:
        await MessageFormatter.update_menu_message(
            message=callback.message,
            title=menu_text["title"],
            description=menu_text["description"],
            keyboard=get_heroes_inline_keyboard()
        )
        logger.info(f"Heroes menu updated for user {user_id}")
    except Exception as e:
        logger.error(f"Failed to update heroes menu for user {user_id}: {e}")
        await callback.message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –º–µ–Ω—é. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    
    await callback.answer()

@router.callback_query(F.data == CallbackData.GUIDES.value)
async def process_guides_menu(callback: CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –ì–∞–π–¥–∏"""
    user_id = callback.from_user.id
    logger.info(f"User {user_id} pressed guides")
    
    menu_text = MenuMessages.get_guides_menu_text()
    try:
        await MessageFormatter.update_menu_message(
            message=callback.message,
            title=menu_text["title"],
            description=menu_text["description"],
            keyboard=get_guides_inline_keyboard()
        )
        logger.info(f"Guides menu updated for user {user_id}")
    except Exception as e:
        logger.error(f"Failed to update guides menu for user {user_id}: {e}")
        await callback.message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –º–µ–Ω—é. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    
    await callback.answer()

@router.callback_query(F.data == CallbackData.BACK.value)
async def process_back_button(callback: CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥"""
    user_id = callback.from_user.id
    logger.info(f"User {user_id} pressed back")
    
    main_menu_text = {
        "title": "üéÆ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
        "description": "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó:"
    }
    try:
        await MessageFormatter.update_menu_message(
            message=callback.message,
            title=main_menu_text["title"],
            description=main_menu_text["description"],
            keyboard=get_main_inline_keyboard()
        )
        logger.info(f"Returned to main menu for user {user_id}")
    except Exception as e:
        logger.error(f"Failed to return to main menu for user {user_id}: {e}")
        await callback.message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    
    await callback.answer()

# –î–æ–¥–∞–π—Ç–µ —ñ–Ω—à—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∑–∞ –ø–æ—Ç—Ä–µ–±–æ—é

@router.callback_query()
async def handle_unknown_callback(callback: CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö callback'—ñ–≤"""
    user_id = callback.from_user.id
    data = callback.data
    logger.warning(f"User {user_id} pressed unknown callback: {data}")
    
    try:
        await callback.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –Ω–∞–¥–∞–Ω—ñ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó.")
    except Exception as e:
        logger.error(f"Failed to send unknown command response to user {user_id}: {e}")
