import logging
from aiogram import Router, F, Bot
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from interface_messages import InterfaceMessages
from navigation_state_manager import NavigationStateManager
from navigation_config import NavigationConfig
from handlers.navigation_errors import handle_navigation_error

logger = logging.getLogger(__name__)
router = Router()

# –ö–Ω–æ–ø–∫–∏ ReplyKeyboardMarkup
main_menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üß≠ –ú–µ–Ω—é"), KeyboardButton(text="ü¶∏ –ü–µ—Ä—Å–æ–Ω–∞–∂—ñ")]
    ],
    resize_keyboard=True
)

navigation_menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        [KeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)

# InlineKeyboard –¥–ª—è "–µ–∫—Ä–∞–Ω—É"
navigation_inline_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ü—É–Ω–∫—Ç 1", callback_data="nav_1")],
        [InlineKeyboardButton(text="–ü—É–Ω–∫—Ç 2", callback_data="nav_2")]
    ]
)

# –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
async def update_interface(bot: Bot, message: Message, state: FSMContext, new_text: str, keyboard: ReplyKeyboardMarkup, inline_text: str, inline_keyboard: InlineKeyboardMarkup):
    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Å—Ç–∞–Ω—É
    data = await state.get_data()
    old_message_id = data.get('bot_message_id')
    inline_message_id = data.get('inline_message_id')

    # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–ø—É–ª—å—Ç –∫–µ—Ä—É–≤–∞–Ω–Ω—è)
    if old_message_id:
        await bot.delete_message(chat_id=message.chat.id, message_id=old_message_id)
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—É–ª—å—Ç–æ–º –∫–µ—Ä—É–≤–∞–Ω–Ω—è
    new_message = await bot.send_message(
        chat_id=message.chat.id,
        text=new_text,
        reply_markup=keyboard
    )
    
    # –†–µ–¥–∞–≥—É—î–º–æ —ñ–Ω–ª–∞–π–Ω –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–µ–∫—Ä–∞–Ω)
    if inline_message_id:
        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=inline_message_id,
            text=inline_text,
            reply_markup=inline_keyboard
        )
    else:
        # –Ø–∫—â–æ —ñ–Ω–ª–∞–π–Ω –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —â–µ –Ω–µ–º–∞—î, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –π–æ–≥–æ
        inline_message = await bot.send_message(
            chat_id=message.chat.id,
            text=inline_text,
            reply_markup=inline_keyboard
        )
        inline_message_id = inline_message.message_id

    # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —Å—Ç–∞–Ω—É
    await state.update_data(
        bot_message_id=new_message.message_id,
        inline_message_id=inline_message_id
    )

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é"
@router.message(F.text == "üß≠ –ú–µ–Ω—é")
async def handle_main_menu(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É '–ú–µ–Ω—é'")
    await update_interface(
        bot=bot,
        message=message,
        state=state,
        new_text="–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é: –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é.",
        keyboard=main_menu_keyboard,
        inline_text="–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é",
        inline_keyboard=InlineKeyboardMarkup()  # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —ñ–Ω–ª–∞–π–Ω –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    )

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä—Å–æ–Ω–∞–∂—ñ"
@router.message(F.text == "ü¶∏ –ü–µ—Ä—Å–æ–Ω–∞–∂—ñ")
async def handle_heroes_menu(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É '–ü–µ—Ä—Å–æ–Ω–∞–∂—ñ'")
    await update_interface(
        bot=bot,
        message=message,
        state=state,
        new_text="–¢—É—Ç –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å—Å—è –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ. (–§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª —É —Ä–æ–∑—Ä–æ–±—Ü—ñ)",
        keyboard=main_menu_keyboard,
        inline_text="–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤",
        inline_keyboard=InlineKeyboardMarkup()  # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —ñ–Ω–ª–∞–π–Ω –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤
    )

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–≤—ñ–≥–∞—Ü—ñ—è"
@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def handle_navigation_menu(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É '–ù–∞–≤—ñ–≥–∞—Ü—ñ—è'")
    await update_interface(
        bot=bot,
        message=message,
        state=state,
        new_text="–ù–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–µ –º–µ–Ω—é: –æ–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç.",
        keyboard=navigation_menu_keyboard,
        inline_text="–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–æ–≥–æ –º–µ–Ω—é",
        inline_keyboard=navigation_inline_keyboard
    )

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–≤—ñ–≥–∞—Ü—ñ—è" –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é
@router.message(MenuStates.MAIN_MENU, F.text == "üß≠ –ù–∞–≤—ñ–≥–∞—Ü—ñ—è")
async def handle_navigation_transition(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –ø–µ—Ä–µ–π—à–æ–≤ –¥–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–æ–≥–æ –º–µ–Ω—é")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ç–∞–Ω—ñ–≤
    state_manager = NavigationStateManager(state)
    await state_manager.load_state()

    try:
        # –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if not await safe_delete_message(bot, message.chat.id, message.message_id):
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.message_id}")

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        new_message_id, new_interactive_id = await update_interface_messages(
            bot=bot,
            chat_id=message.chat.id,
            old_message_id=state_manager.messages.bot_message_id,
            interactive_message_id=state_manager.messages.interactive_message_id,
            state=state
        )

        if new_message_id and new_interactive_id:
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            await state_manager.messages.update(
                bot=bot,
                chat_id=message.chat.id,
                new_message_id=new_message_id,
                new_interactive_id=new_interactive_id,
                text=NavigationConfig.Messages.NAVIGATION_MENU,
                keyboard=get_navigation_menu()
            )
            
            # –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É
            await state_manager.transition_to(MenuStates.NAVIGATION_MENU)
            logger.info(f"–£—Å–ø—ñ—à–Ω–∏–π –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
        else:
            raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥—ñ –¥–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        await handle_navigation_error(bot, message.chat.id, state)

# –Ü–º–ø–æ—Ä—Ç–∏ –∑ —ñ–Ω—à–∏—Ö —Ñ–∞–π–ª—ñ–≤
async def handle_navigation_error(bot: Bot, chat_id: int, state: FSMContext):
    try:
        await bot.send_message(
            chat_id=chat_id,
            text=NavigationConfig.Messages.ERROR,
            reply_markup=get_main_menu()
        )
        logger.info(f"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –¥–æ —á–∞—Ç—É {chat_id}")
        
        await state.set_state(MenuStates.MAIN_MENU)
        logger.info(f"–°—Ç–∞–Ω –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ MAIN_MENU –¥–ª—è —á–∞—Ç—É {chat_id}")
        
        await state.update_data(
            bot_message_id=None,
            interactive_message_id=None,
            last_text="",
            last_keyboard=None
        )
        logger.info(f"–î–∞–Ω—ñ —Å—Ç–∞–Ω—É –æ—á–∏—â–µ–Ω–æ –¥–ª—è —á–∞—Ç—É {chat_id}")

    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–º–∏–ª–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó: {e}")

# –î–æ–¥–∞–π—Ç–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–ª–∞—Å–∏ —ñ –∑–º—ñ–Ω–Ω—ñ –∑ navigation_config.py
class NavigationConfig:
    class Messages:
        NAVIGATION_MENU = "–ù–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–µ –º–µ–Ω—é: –æ–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É"
        INTERACTIVE = "–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –µ–∫—Ä–∞–Ω –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó"
        ERROR = "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–æ–º–∞–Ω–¥–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."

    class LogMessages:
        TRANSITION_SUCCESS = "–£—Å–ø—ñ—à–Ω–∏–π –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}"
        TRANSITION_ERROR = "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥—ñ –¥–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–æ–≥–æ –º–µ–Ω—é: {error}"
        DELETE_ERROR = "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id}"