# handlers/intro_handler.py
from typing import Optional  # –î–æ–¥–∞—î–º–æ —ñ–º–ø–æ—Ä—Ç Optional
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from logging import getLogger

from utils.message_utils import safe_delete_message, MessageManager
from states.menu_states import IntroState
from keyboards.intro import get_intro_keyboard

class IntroHandler:
    """Handler for intro sequence"""
    
    def __init__(self, message_manager: Optional[MessageManager] = None):
        self.router = Router(name="intro")
        self.message_manager = message_manager
        self.logger = getLogger(__name__)
        self._setup_router()

    def _setup_router(self) -> None:
        """Setup message handlers"""
        self.router.message.register(
            self.start_intro,
            Command("start")
        )
        
        self.router.callback_query.register(
            self.handle_intro_navigation,
            F.data.startswith("intro_")
        )

    async def start_intro(
        self,
        message: types.Message,
        state: FSMContext
    ) -> None:
        """Handle /start command"""
        try:
            self.logger.info(
                f"Processing /start command for user {message.from_user.id}"
            )
            
            # Set initial state
            await state.set_state(IntroState.page_1)
            
            # Send first intro message
            msg_text = (
                "üëã –í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è Mobile Legends: Bang Bang.\n\n"
                "üéÆ –Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º:\n"
                "- –ó–Ω–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—É\n"
                "- –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
                "- –û—Ä–≥–∞–Ω—ñ–∑–æ–≤—É–≤–∞—Ç–∏ —Ç—É—Ä–Ω—ñ—Ä–∏\n"
                "- –¢–∞ –±–∞–≥–∞—Ç–æ —ñ–Ω—à–æ–≥–æ!"
            )
            
            if self.message_manager:
                await self.message_manager.send_or_edit(
                    chat_id=message.chat.id,
                    text=msg_text,
                    keyboard=get_intro_keyboard(1)
                )
            else:
                await message.answer(
                    text=msg_text,
                    reply_markup=get_intro_keyboard(1)
                )
            
            self.logger.info(
                f"Started intro sequence for user {message.from_user.id}"
            )
            
        except Exception as e:
            self.logger.error(f"Error in start_intro: {e}")
            await message.answer(
                "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ /start"
            )

    async def handle_intro_navigation(
        self,
        callback: types.CallbackQuery,
        state: FSMContext
    ) -> None:
        """Handle intro navigation"""
        try:
            # Get current state
            current_state = await state.get_state()
            if not current_state:
                await callback.answer(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞–Ω—É. –ü–æ—á–Ω—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É —á–µ—Ä–µ–∑ /start"
                )
                return
                
            # Get action from callback
            action = callback.data.split("_")[1]
            
            # Handle navigation
            if action == "next":
                if current_state == "IntroState:page_1":
                    next_state = IntroState.page_2
                    page = 2
                    msg_text = (
                        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å:\n\n"
                        "- –í—ñ–¥—Å—Ç–µ–∂—É–π—Ç–µ —Å–≤—ñ–π WR\n"
                        "- –ê–Ω–∞–ª—ñ–∑—É–π—Ç–µ —Å–≤–æ—é –≥—Ä—É\n"
                        "- –ü–æ—Ä—ñ–≤–Ω—é–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏"
                    )
                elif current_state == "IntroState:page_2":
                    next_state = IntroState.page_3
                    page = 3
                    msg_text = (
                        "üèÜ –¢—É—Ä–Ω—ñ—Ä–∏ —Ç–∞ –∫–æ–º–∞–Ω–¥–∏:\n\n"
                        "- –°—Ç–≤–æ—Ä—é–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏\n"
                        "- –û—Ä–≥–∞–Ω—ñ–∑–æ–≤—É–π—Ç–µ —Ç—É—Ä–Ω—ñ—Ä–∏\n"
                        "- –ó–Ω–∞—Ö–æ–¥—å—Ç–µ –≥—Ä–∞–≤—Ü—ñ–≤"
                    )
                else:
                    await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó")
                    return
                    
                await state.set_state(next_state)
                    
            elif action == "prev":
                if current_state == "IntroState:page_2":
                    next_state = IntroState.page_1
                    page = 1
                    msg_text = (
                        "üëã –í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è Mobile Legends: Bang Bang.\n\n"
                        "üéÆ –Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º:\n"
                        "- –ó–Ω–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—É\n"
                        "- –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
                        "- –û—Ä–≥–∞–Ω—ñ–∑–æ–≤—É–≤–∞—Ç–∏ —Ç—É—Ä–Ω—ñ—Ä–∏\n"
                        "- –¢–∞ –±–∞–≥–∞—Ç–æ —ñ–Ω—à–æ–≥–æ!"
                    )
                elif current_state == "IntroState:page_3":
                    next_state = IntroState.page_2
                    page = 2
                    msg_text = (
                        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å:\n\n"
                        "- –í—ñ–¥—Å—Ç–µ–∂—É–π—Ç–µ —Å–≤—ñ–π WR\n"
                        "- –ê–Ω–∞–ª—ñ–∑—É–π—Ç–µ —Å–≤–æ—é –≥—Ä—É\n"
                        "- –ü–æ—Ä—ñ–≤–Ω—é–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏"
                    )
                else:
                    await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó")
                    return
                    
                await state.set_state(next_state)
            
            elif action == "complete":
                # Handle completion
                await state.clear()
                msg_text = (
                    "‚úÖ –ó–Ω–∞–π–æ–º—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
                    "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó."
                )
                
            # Update message
            if self.message_manager:
                await self.message_manager.send_or_edit(
                    chat_id=callback.message.chat.id,
                    text=msg_text,
                    message_id=callback.message.message_id,
                    keyboard=get_intro_keyboard(page)
                )
            else:
                await callback.message.edit_text(
                    text=msg_text,
                    reply_markup=get_intro_keyboard(page)
                )
            
            await callback.answer()
            
        except Exception as e:
            self.logger.error(
                f"Error in handle_intro_navigation for user {callback.from_user.id}: {e}"
            )
            await callback.answer(
                "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ /start"
            )
