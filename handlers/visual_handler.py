# handlers/visual_handler.py

from aiogram import Router, types
from utils.visual_utils import (
    generate_matplotlib_bar_chart,
    generate_seaborn_scatter_plot,
    generate_plotly_pie_chart,
    format_table_with_rich
)
import seaborn as sns
from aiogram.types import InputFile  # –î–æ–¥–∞–π—Ç–µ —Ü–µ–π —ñ–º–ø–æ—Ä—Ç, —è–∫—â–æ —â–µ –Ω–µ –¥–æ–¥–∞–Ω–æ

router = Router()

@router.message(commands=["plot"])
async def cmd_plot(message: types.Message):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /plot.
    –ì–µ–Ω–µ—Ä—É—î –≥—Ä–∞—Ñ—ñ–∫–∏ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î —ó—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.
    """
    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è Matplotlib –≥—Ä–∞—Ñ—ñ–∫–∞
    categories = ['–ü–µ—Ä–µ–º–æ–≥–∏', '–ü–æ—Ä–∞–∑–∫–∏', '–ù—ñ—á—ñ']
    values = [15, 5, 2]
    title = "–í–∞—à—ñ –Ü–≥—Ä–æ–≤—ñ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
    buf_matplotlib = generate_matplotlib_bar_chart(categories, values, title=title)
    await message.answer_photo(photo=InputFile(buf_matplotlib, filename="stats.png"), caption="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ü–µ—Ä–µ–º–æ–≥")

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è Seaborn –≥—Ä–∞—Ñ—ñ–∫–∞
    data = sns.load_dataset("tips")
    buf_seaborn = generate_seaborn_scatter_plot(data, x='total_bill', y='tip', hue='day', title="–í—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –ß–µ–∫—É –¥–æ –ß–∞—é")
    await message.answer_photo(photo=InputFile(buf_seaborn, filename="scatter.png"), caption="üìâ –í—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –ß–µ–∫—É –¥–æ –ß–∞—é")

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è Plotly –≥—Ä–∞—Ñ—ñ–∫–∞
    labels = ['–ê—Ç–∞–∫–∞', '–ó–∞—Ö–∏—Å—Ç', '–ú–∞–≥—ñ—è', '–õ—ñ–∫—É–≤–∞–Ω–Ω—è']
    values_plotly = [55, 20, 15, 10]
    buf_plotly = generate_plotly_pie_chart(labels, values_plotly, title="–†–æ–∑–ø–æ–¥—ñ–ª –ù–∞–≤–∏—á–æ–∫")
    await message.answer_photo(photo=InputFile(buf_plotly, filename="pie_chart.png"), caption="üìà –†–æ–∑–ø–æ–¥—ñ–ª –ù–∞–≤–∏—á–æ–∫")

@router.message(commands=["table"])
async def cmd_table(message: types.Message):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /table.
    –ì–µ–Ω–µ—Ä—É—î —Ç–∞–±–ª–∏—Ü—é —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î —ó—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.
    """
    # –î–∞–Ω—ñ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ
    data = [
        ["–ú–∞—á 1", "–ü–µ—Ä–µ–º–æ–≥–∞"],
        ["–ú–∞—á 2", "–ü–æ—Ä–∞–∑–∫–∞"],
        ["–ú–∞—á 3", "–ü–µ—Ä–µ–º–æ–≥–∞"],
        ["–ú–∞—á 4", "–ü–µ—Ä–µ–º–æ–≥–∞"],
        ["–ú–∞—á 5", "–ü–æ—Ä–∞–∑–∫–∞"]
    ]
    headers = ["–ú–∞—Ç—á", "–†–µ–∑—É–ª—å—Ç–∞—Ç"]
    
    # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º Rich
    formatted_table = format_table_with_rich(data, headers)
    await message.answer(f"üìã <b>–¢–∞–±–ª–∏—Ü—è –†–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤:</b>\n<code>{formatted_table}</code>", parse_mode='HTML')
