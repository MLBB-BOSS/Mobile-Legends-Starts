from aiogram import Router, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

router = Router()

# –ó–≤–∏—á–∞–π–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
def main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üèÜ –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è")],
            [KeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"), KeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞")],
        ],
        resize_keyboard=True
    )

# –Ü–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def statistics_inline():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéØ –ó–∞–≥–∞–ª—å–Ω–∞ –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", callback_data="general_activity")],
        [InlineKeyboardButton(text="üéÆ –Ü–≥—Ä–æ–≤–∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="game_stats")],
        [InlineKeyboardButton(text="üìà –ì—Ä–∞—Ñ—ñ–∫ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ", callback_data="activity_chart")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(lambda message: message.text == "/start" or message.text == "üîô –ù–∞–∑–∞–¥")
async def show_main_menu(message: types.Message):
    await message.delete()
    await message.answer("üóÇ *–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é*", reply_markup=main_menu(), parse_mode="Markdown")
    await message.answer("üìä –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=statistics_inline())

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
@router.callback_query(lambda c: c.data == "activity_chart")
async def send_activity_chart(callback: types.CallbackQuery):
    import matplotlib.pyplot as plt
    import io

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≥—Ä–∞—Ñ—ñ–∫–∞
    x = [1, 2, 3, 4, 5]
    y = [100, 120, 160, 200, 220]

    plt.plot(x, y, marker="o", color="b")
    plt.title("–ì—Ä–∞—Ñ—ñ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ")
    plt.xlabel("–°–µ–∞–Ω—Å")
    plt.ylabel("–†–µ–π—Ç–∏–Ω–≥")
    plt.grid()

    buffer = io.BytesIO()
    plt.savefig(buffer, format="png")
    buffer.seek(0)
    plt.close()

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω–ª–∞–π–Ω-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await callback.message.edit_media(
        types.InputMediaPhoto(media=buffer, caption="üìà –í–∞—à –≥—Ä–∞—Ñ—ñ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"),
        reply_markup=statistics_inline()
