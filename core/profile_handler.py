# core/profile_handler.py

import logging
from telegram import Update
from telegram.ext import ContextTypes
from models.contribution import Contribution

logger = logging.getLogger(__name__)

async def view_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        contributions = Contribution.get_user_contributions(user.id)  # –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–Ω–µ—Å–∫—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        total_points = sum(c.points for c in contributions)
        badges = Contribution.get_user_badges(user.id)  # –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–µ–π–¥–∂—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

        profile_info = f"üìÑ **–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:**\n\n"
        profile_info += f"üë§ **–Ü–º'—è:** {user.first_name} {user.last_name if user.last_name else ''}\n"
        profile_info += f"üî¢ **ID:** {user.id}\n"
        profile_info += f"‚≠ê **–ë–∞–ª–∏:** {total_points}\n"
        profile_info += f"üèÖ **–ë–µ–π–¥–∂—ñ:** {', '.join(badges) if badges else '–ù–µ–º–∞—î'}"

        await update.message.reply_text(profile_info, parse_mode='Markdown')
        logger.info(f"User {user.username or user.id} viewed their profile.")
    except Exception as e:
        logger.error(f"Error in view_profile: {e}")
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é.")
