# core/leaderboard_handler.py

import logging
from telegram import Update
from telegram.ext import ContextTypes
from models.contribution import Contribution

logger = logging.getLogger(__name__)

async def view_leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –±–∞–ª–∞–º–∏
        top_users = Contribution.get_top_users(limit=10)  # –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤

        if not top_users:
            leaderboard_info = "–õ—ñ–¥–µ—Ä–±–æ—Ä–¥ –ø–æ—Ä–æ–∂–Ω—ñ–π."
        else:
            leaderboard_info = "üèÜ **–õ—ñ–¥–µ—Ä–±–æ—Ä–¥:**\n\n"
            for idx, user in enumerate(top_users, start=1):
                leaderboard_info += f"{idx}. @{user.username or 'User' + str(user.user_id)} - {user.total_points} –±–∞–ª—ñ–≤\n"

        await update.message.reply_text(leaderboard_info, parse_mode='Markdown')
        logger.info("Leaderboard viewed by user.")
    except Exception as e:
        logger.error(f"Error in view_leaderboard: {e}")
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ –ª—ñ–¥–µ—Ä–±–æ—Ä–¥—É.")
