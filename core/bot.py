# core/bot.py
import os
import logging
from typing import Dict, Any
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor

from . import CoreConfig, get_app_state
from services import init_services

# –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN not set in environment variables")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞–Ω –¥–æ–¥–∞—Ç–∫—É
app_state = get_app_state()

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    try:
        user_service = app_state.get_service('user_service')
        if user_service:
            await user_service.create_user(
                telegram_id=message.from_user.id,
                username=message.from_user.username or "Anonymous"
            )
        
        await message.reply(
            "–í—ñ—Ç–∞—é! –Ø MLBB-BOSS –±–æ—Ç –¥–ª—è –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó —Ç—É—Ä–Ω—ñ—Ä—ñ–≤ Mobile Legends. "
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥."
        )
        app_state.increment_processed_commands()
        
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await message.reply("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@dp.message_handler(commands=['help'])
async def cmd_help(message: types.Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /help"""
    help_text = """
–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:
/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
/profile - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å
/heroes - –°–ø–∏—Å–æ–∫ –≥–µ—Ä–æ—ó–≤
/achievements - –í–∞—à—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
/tournament - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ç—É—Ä–Ω—ñ—Ä
/rules - –ü—Ä–∞–≤–∏–ª–∞ —É—á–∞—Å—Ç—ñ
    """
    await message.reply(help_text)
    app_state.increment_processed_commands()

@dp.message_handler(commands=['stats'])
async def cmd_stats(message: types.Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /stats"""
    stats = app_state.get_stats()
    stats_text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
        f"‚è± –ß–∞—Å —Ä–æ–±–æ—Ç–∏: {stats['uptime']}\n"
        f"üë• –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {stats['active_users']}\n"
        f"üìù –û–±—Ä–æ–±–ª–µ–Ω–æ –∫–æ–º–∞–Ω–¥: {stats['processed_commands']}\n"
    )
    await message.reply(stats_text)
    app_state.increment_processed_commands()

async def on_startup(dp: Dispatcher):
    """Callback –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —è–¥—Ä–æ
        await initialize_core()
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–µ—Ä–≤—ñ—Å–∏
        services = await init_services(None)  # –¢—É—Ç –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ session
        
        # –†–µ—î—Å—Ç—Ä—É—î–º–æ —Å–µ—Ä–≤—ñ—Å–∏ –≤ —Å—Ç–∞–Ω—ñ –¥–æ–¥–∞—Ç–∫—É
        for name, service in services.items():
            app_state.register_service(name, service)
        
        logger.info("Bot started successfully")
        
    except Exception as e:
        logger.error(f"Error during bot startup: {e}")
        raise

async def on_shutdown(dp: Dispatcher):
    """Callback –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ –±–æ—Ç–∞"""
    try:
        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ —è–¥—Ä–æ
        await shutdown_core()
        
        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Telegram
        await bot.close()
        
        logger.info("Bot shutdown completed")
        
    except Exception as e:
        logger.error(f"Error during bot shutdown: {e}")
        raise

def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        executor.start_polling(
            dp,
            on_startup=on_startup,
            on_shutdown=on_shutdown,
            skip_updates=True
        )
    except Exception as e:
        logger.error(f"Failed to start bot: {e}")
        raise

if __name__ == '__main__':
    run_bot()
