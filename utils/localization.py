# File: utils/localization.py

import json
import os
import logging
from typing import Any, Dict, Optional

logger = logging.getLogger(__name__)

class Localization:
    def __init__(self, lang: str = "uk"):
        self.lang = lang
        self.messages: Dict[str, Any] = {}
        self._load_messages()

    def _load_messages(self) -> None:
        try:
            locale_path = os.path.join(
                os.path.dirname(__file__),
                "..",
                "locales",
                f"{self.lang}.json"
            )
            
            with open(locale_path, 'r', encoding='utf-8') as file:
                self.messages = json.load(file)
            logger.info(f"Successfully loaded messages for language: {self.lang}")
        except FileNotFoundError:
            logger.error(f"Failed to load messages: No such file: {locale_path}")
            self.messages = self._get_default_messages()
        except Exception as e:
            logger.error(f"Failed to load messages: {str(e)}")
            self.messages = self._get_default_messages()

    def get_message(self, key: str, **kwargs) -> str:
        try:
            current = self.messages
            for part in key.split('.'):
                current = current[part]

            if isinstance(current, str):
                # Handle both message_text and text parameters for backward compatibility
                if 'message_text' in kwargs and 'text' not in kwargs:
                    kwargs['text'] = kwargs.pop('message_text')
                return current.format(**kwargs)
            return str(current)
        except KeyError:
            logger.error(f"Missing localization key: {key}")
            return key
        except Exception as e:
            logger.error(f"Error getting message for key {key}: {str(e)}")
            return key

    def get_hero_info(self, hero_name: str) -> str:
        """Get hero information by name"""
        try:
            return self.messages["heroes"]["info"][hero_name]
        except KeyError:
            return f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≥–µ—Ä–æ—è {hero_name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

    def get_hero_class_name(self, class_key: str) -> str:
        """Get hero class name by key"""
        try:
            return self.messages["heroes"]["classes"][class_key]["name"]
        except KeyError:
            return class_key.capitalize()

    def get_heroes_by_class(self, class_key: str) -> list:
        """Get list of heroes by class"""
        try:
            return self.messages["heroes"]["classes"][class_key]["heroes"]
        except KeyError:
            return []

    def _get_default_messages(self) -> Dict[str, Any]:
        return {
            "buttons": {
                "navigation": "üß≠ –ù–∞–≤—ñ–≥–∞—Ü—ñ—è",
                "profile": "ü™™ –ú—ñ–π –ö–∞–±—ñ–Ω–µ—Ç",
                "settings": "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
                "help": "‚ùì –î–æ–ø–æ–º–æ–≥–∞",
                "menu": "–ú–µ–Ω—é",
                "show_heroes": "–ü–æ–∫–∞–∑–∞—Ç–∏ –≥–µ—Ä–æ—ó–≤",
                "back_to_hero_classes": "‚¨ÖÔ∏è –î–æ –∫–ª–∞—Å—ñ–≤ –≥–µ—Ä–æ—ó–≤",
                "back_to_hero_list": "‚¨ÖÔ∏è –î–æ —Å–ø–∏—Å–∫—É –≥–µ—Ä–æ—ó–≤",
                "statistics": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                "achievements": "üèÜ –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è",
                "feedback": "üìù –ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫",
                "back": "‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                "guides": "üìñ –ì–∞–π–¥–∏",
                "characters": "üë• –ü–µ—Ä—Å–æ–Ω–∞–∂—ñ",
                "counter_picks": "‚öîÔ∏è –ö–æ–Ω—Ç—Ä-–ø—ñ–∫–∏",
                "builds": "üõ†Ô∏è –ë—ñ–ª–¥–∏",
                "voting": "üìä –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è",
                "back_to_navigation": "‚Ü©Ô∏è –î–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó"
            },
            "messages": {
                "welcome": "–í—ñ—Ç–∞—î–º–æ —É MLBB-BOSS! –¶–µ –±–æ—Ç –¥–ª—è –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —Ç—É—Ä–Ω—ñ—Ä—ñ–≤ —É –≥—Ä—ñ Mobile Legends. –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ.",
                "help": "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n/start - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞\n/help - –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É\n/profile - –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å\n/settings - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\n\n–î–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                "unhandled_message": "–í–∏–±–∞—á—Ç–µ, —è –Ω–µ —Ä–æ–∑—É–º—ñ—é —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {text}",
                "hero_menu": {
                    "select_hero": "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –≥–µ—Ä–æ—è –∑ –∫–ª–∞—Å—É {class_name}:"
                },
                "select_hero_class": "–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å –≥–µ—Ä–æ—è:"
            },
            "errors": {
                "general": "–í–∏–Ω–∏–∫–ª–∞ –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                "class_not_found": "–í–∏–±—Ä–∞–Ω–∏–π –∫–ª–∞—Å –≥–µ—Ä–æ—ó–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∑ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É.",
                "hero_not_found": "–í–∏–±—Ä–∞–Ω–æ–≥–æ –≥–µ—Ä–æ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π –≤–∏–±—ñ—Ä.",
                "not_registered": "–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.",
                "permission_denied": "–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó."
            }
        }

# Create a singleton instance
loc = Localization()

# Export both the class and the singleton instance
__all__ = ['Localization', 'loc']
